autoco (3m_datapac)  - [M_datapac:STATISTICS] compute the sample autocorrelation coefficient
betran (3m_datapac)  - [M_datapac:RANDOM] generate beta random numbers
bincdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the binomial cumulative distribution function
binppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the binomial percent point function
binran (3m_datapac)  - [M_datapac:RANDOM] generate binomial random numbers
caucdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Cauchy cumulative distribution function
caupdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] compute the Cauchy probability density function
cauplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Cauchy probability plot
cauppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the Cauchy percent point function
cauran (3m_datapac)  - [M_datapac:RANDOM] generate Cauchy random numbers
causf (3m_datapac)   - [M_datapac:SPARSITY] compute the Cauchy sparsity function
chscdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the chi-square cumulative distribution function
chsplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Chi-square probability plot
chsppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the chi-square percent point function
chsran (3m_datapac)  - [M_datapac:RANDOM] generate chi-square random numbers
code (3m_datapac)    - [M_datapac:VECTOR_OPERATIONS] code the elements of a vector (1 for the minimum, 2 for the next larger value, and so on)
copy (3m_datapac)    - [M_datapac:VECTOR_OPERATION] copy the elements of one vector into another vector
corr (3m_datapac)    - [M_datapac:STATISTICS] compute the sample correlation coefficient
count (3m_datapac)   - [M_datapac:STATISTICS] compute the number of observations between a minimum and a maximum value
decomp (3m_datapac)  - [M_datapac:STATISTICS] decomposes a weighted data matrix (utility routine used by other routines)
define (3m_datapac)  - [M_datapac:VECTOR_OPERATION] set all elements of a vector equal to a specified constant
delete (3m_datapac)  - [M_datapac:VECTOR_OPERATION] delete all elements of a vector within some specified interval
demod (3m_datapac)   - [M_datapac:STATISTICS] perform a complex demodulation
dexcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the double exponential cumulative distribution function
dexpdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] compute the double exponential probability density function
dexplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a double exponential probability plot
dexppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the double exponential percent point function
dexran (3m_datapac)  - [M_datapac:RANDOM] generate double exponential random numbers
dexsf (3m_datapac)   - [M_datapac:SPARSITY] compute the double exponential sparsity function
discr2 (3m_datapac)  - [M_datapac:STATISTICS] bin the elements of a vector (output vector contains class midpoints)
discr3 (3m_datapac)  - [M_datapac:STATISTICS] bin the elements of a vector (output vector contains 1's, 2's, 3's, and so on)
discre (3m_datapac)  - [M_datapac:STATISTICS] bin the elements of a vector (like DISCR2, but allows specification of min and max class limits)
dot (3m_datapac)     - [M_datapac:VECTOR_OPERATION] compute a dot product of two vectors
ev1cdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the extreme value type 1 (Gumbel) cumulative distribution function
ev1plt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a extreme value type 1 (Gumbel) probability plot
ev1ppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the extreme value type 1 (Gumbel) percent point function
ev1ran (3m_datapac)  - [M_datapac:RANDOM] generate extreme value type 1 (Gumbel) random numbers
ev2cdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the extreme value type 2 (Frechet) cumulative distribution function
ev2plt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a extreme value type 2 (Frechet) probability plot
ev2ppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the extreme value type 2 (Frechet) percent point function
ev2ran (3m_datapac)  - [M_datapac:RANDOM] generate extreme value type 2 (Frechet) random numbers
expcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the exponential cumulative distribution function
exppdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] compute the exponential probability density function
expplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a exponential probability plot
expppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the exponential percent point function
expran (3m_datapac)  - [M_datapac:RANDOM] generate exponential random numbers
expsf (3m_datapac)   - [M_datapac:SPARSITY] compute the exponential sparsity function
extrem (3m_datapac)  - [M_datapac:STATISTICS] determine whether a type 1 or type 2 extreme value distribution better fits a given data set
fcdf (3m_datapac)    - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the F cumulative distribution function
fourie (3m_datapac)  - [M_datapac:ANALYSIS] perform a Fourier analysis of a data set
fran (3m_datapac)    - [M_datapac:RANDOM] generate F random numbers
freq (3m_datapac)    - [M_datapac:STATISTICS] compute the sample frequency and cumulative sample frequency of a vector
gamcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the gamma cumulative distribution function
gamplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a gamma probability plot
gamppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the gamma percent point function
gamran (3m_datapac)  - [M_datapac:RANDOM] generate gamma random numbers
geocdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the geometric cumulative distribution function
geoplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a geometric probability plot
geoppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the geometric percent point function
georan (3m_datapac)  - [M_datapac:RANDOM] generate geometric random numbers
hfncdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the half-normal cumulative distribution function
hfnplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a half-normal probability plot
hfnppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the half-normal percent point function
hfnran (3m_datapac)  - [M_datapac:RANDOM] generate half-normal random numbers
hist (3m_datapac)    - [M_datapac:STATISTICS] generates histograms based on two different class widths
lamcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Tukey-Lambda cumulative distribution function
lampdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] compute the Tukey-Lambda probability density function
lamplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Tukey-Lambda probability plot
lamppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the Tukey-Lambda percent point function
lamran (3m_datapac)  - [M_datapac:RANDOM] generate Tukey-Lambda random numbers
lamsf (3m_datapac)   - [M_datapac:SPARSITY] compute the Tukey-Lambda sparsity function
lgncdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the lognormal cumulative distribution function
lgnplt (3m_datapac)  - [M_datapac:LINE_PLOT] generates a lognormal probability plot
lgnppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the lognormal percent point function
lgnran (3m_datapac)  - [M_datapac:RANDOM] generate lognormal random numbers
loc (3m_datapac)     - [M_datapac:STATISTICS] print the sample mean, midrange, midmean, and median
logcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the logistic cumulative distribution function
logpdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] compute the logistic probability density function
logplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a logistic probability plot
logppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the logistic percent point function
logran (3m_datapac)  - [M_datapac:RANDOM] generate logistic random numbers
logsf (3m_datapac)   - [M_datapac:SPARSITY] compute the logistic sparsity function
max (3m_datapac)     - [M_datapac:VECTOR_OPERATION] MAX compute the maximum of a data vector
mean (3m_datapac)    - [M_datapac:STATISTICS] compute the sample mean of a data vector
median (3m_datapac)  - [M_datapac:STATISTICS] compute the median of a data vector
midm (3m_datapac)    - [M_datapac:STATISTICS] compute the midmean of a data vector
midr (3m_datapac)    - [M_datapac:STATISTICS] compute the midrange of a data vector
min (3m_datapac)     - [M_datapac:STATISTICS] compute the minimum of a data vector
move (3m_datapac)    - [M_datapac:VECTOR_OPERATION] move selected elements of one vector into another vector
nbcdf (3m_datapac)   - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the negative binomial cumulative distribution function
nbppf (3m_datapac)   - [M_datapac:PERCENT_POINT] compute the negative binomial percent point function
nbran (3m_datapac)   - [M_datapac:RANDOM] generate negative binomial random numbers
norcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the normal cumulative distribution function
norout (3m_datapac)  - [M_datapac:ANALYSIS] Performs a normal outlier analysis on the data in the input vector X.
norpdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] compute the normal probability density function
norplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a normal probability plot
norppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the normal percent point function
norran (3m_datapac)  - [M_datapac:RANDOM] generate normal random numbers
norsf (3m_datapac)   - [M_datapac:SPARSITY] compute the normal sparsity function
parcdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Pareto cumulative distribution function
parplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Pareto probability plot
parppf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the Pareto percent point function
parran (3m_datapac)  - [M_datapac:RANDOM] generate Pareto random numbers
plot (3m_datapac)    - [M_datapac:GENERIC_LINE_PLOT] yields a one-page printer plot of Y(I) versus X(I)
plot10 (3m_datapac)  - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters
plot6 (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot
plot7 (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters
plot8 (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters
plot9 (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters
plotc (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters
plotco (3m_datapac)  - [M_datapac:GENERIC_LINE_PLOT] generate a line printer autocorrelation plot
plotct (3m_datapac)  - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot for the terminal (71 characters wide)
plots (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot of Y vs X
plotsc (3m_datapac)  - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters
plotsp (3m_datapac)  - [M_datapac:LINE_PLOT] generate a line printer spectrum plot
plotst (3m_datapac)  - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot of Y vs X for the terminal (71 characters wide)
plott (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot of Y vs X for the terminal (71 characters wide)
plotu (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer 4-plot
plotx (3m_datapac)   - [M_datapac:GENERIC_LINE_PLOT] generate a line printer run sequence plot
plotxt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a line printer run sequence plot for the terminal (71 characters wide)
plotxx (3m_datapac)  - [M_datapac:LINE_PLOT] generate a line printer lag plot
pltsct (3m_datapac)  - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with special plot characters for the terminal (71 characters wide)
pltxxt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a line printer lag plot for the terminal (71 characters wide)
poicdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Poisson cumulative distribution function
poiplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Poisson probability plot (line printer graph)
poippf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the Poisson percent point function
poiran (3m_datapac)  - [M_datapac:RANDOM] generate Poisson random numbers
propor (3m_datapac)  - [M_datapac:STATISTICS] compute the sample proportion
range (3m_datapac)   - [M_datapac:STATISTICS] compute the sample range
rank (3m_datapac)    - [M_datapac:SORT] rank a vector of sample observations
ranper (3m_datapac)  - [M_datapac:RANDOM] generates a random permutation
relsd (3m_datapac)   - [M_datapac:STATISTICS] compute the relative standard deviation of a vector of observations
replac (3m_datapac)  - [M_datapac:VECTOR_OPERATION] replace all observations in a vector within a given interval with a user-specified constant
retain (3m_datapac)  - [M_datapac:VECTOR_OPERATION] retain all observations in a vector within a user-specified interval
runs (3m_datapac)    - [M_datapac:ANALYSIS] perform a runs test
sampp (3m_datapac)   - [M_datapac:PERCENT_POINT] compute the sample 100P percent point (i.e., percentile)
scale (3m_datapac)   - [M_datapac:STATISTICS] compute the sample range, sample standard deviation, sample relative standard deviation, and sample variance
sd (3m_datapac)      - [M_datapac:STATISTICS] compute the standard deviation of a vector of observations
sort (3m_datapac)    - [M_datapac:SORT] sort a vector of sample observations, also return the positions in the original vector
sortc (3m_datapac)   - [M_datapac:SORT] sort a vector of sample observations and "carry" a second vector
sortp (3m_datapac)   - [M_datapac:SORT] sorts and ranks a numeric vector X
spcorr (3m_datapac)  - [M_datapac:STATISTICS] compute the sample Spearman rank correlation coefficient between two vectors of observations
stmom3 (3m_datapac)  - [M_datapac:STATISTICS] compute the third central moment (i.e., the skewness) of a vector of observations
stmom4 (3m_datapac)  - [M_datapac:STATISTICS] compute the fourth central moment (i.e., the kurtosis) of a vector of observations
subse1 (3m_datapac)  - [M_datapac:VECTOR_OPERATION] extract the elements of a vector which fall into a user-specified subset (one subset variable)
subse2 (3m_datapac)  - [M_datapac:VECTOR_OPERATION] extract the elements of a vector which fall into a user-specified subset (two subset variables)
subset (3m_datapac)  - [M_datapac:VECTOR_OPERATION] extract the elements of a vector which fall into a user-specified subset (one subset variable)
tail (3m_datapac)    - [M_datapac:ANALYSIS] performs a symmetric distribution tail length analysis
tcdf (3m_datapac)    - [M_datapac:CUMULATIVE_DISTRIBUTION] computes the cumulative distribution function value for student's t distribution with integer degrees of freedom NU.
time (3m_datapac)    - [M_datapac:ANALYSIS] perform a time series analysis (autocorrelation plot, a test for white noise, a "pilot" spectrum, and 4 other estimated spectra based on differing bandwidth)
tol (3m_datapac)     - [M_datapac:STATISTICS] compute normal and distribution-free tolerance limits
tplt (3m_datapac)    - [M_datapac:LINE_PLOT] generates a Student's T probability plot (with integer degrees of freedom parameter value NU).
tppf (3m_datapac)    - [M_datapac:PERCENT_POINT] computes the percent point function value for the student's T distribution
tran (3m_datapac)    - [M_datapac:RANDOM] a random sample of size n from the Student's t distribution with integer degrees of freedom parameter NU.
trim (3m_datapac)    - [M_datapac:STATISTICS] computes the sample trimmed mean of the data in the input vector X.
unicdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] trivially compute the Uniform cumulative distribution function
unimed (3m_datapac)  - [M_datapac:STATISTICS] generates the N order statistic medians from the uniform (rectangular) distribution on the unit interval (0, 1).
unipdf (3m_datapac)  - [M_datapac:PROBABILITY_DENSITY] trivially compute the Uniform probability density function
uniplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Uniform probability plot (line printer graph)
unippf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the Uniform percent point function
uniran (3m_datapac)  - [M_datapac:RANDOM] generate Uniform random numbers
unisf (3m_datapac)   - [M_datapac:SPARSITY] compute the Uniform sparsity function
var (3m_datapac)     - [M_datapac:STATISTICS] compute the sample variance of a vector of observations
weib (3m_datapac)    - [M_datapac:ANALYSIS] perform a Weibull distribution analysis (Weibull PPCC analysis)
weicdf (3m_datapac)  - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Weibull cumulative distribution function
weiplt (3m_datapac)  - [M_datapac:LINE_PLOT] generate a Weibull probability plot (line printer graph)
weippf (3m_datapac)  - [M_datapac:PERCENT_POINT] compute the Weibull percent point function
weiran (3m_datapac)  - [M_datapac:RANDOM] generate Weibull random numbers
wind (3m_datapac)    - [M_datapac:STATISTICS] compute the sample Winsorized mean of a vector of observations
plot8(3m_datapac)					     plot8(3m_datapac)



NAME
  plot8(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters


SYNOPSIS
  SUBROUTINE PLOT8(Y,X,Char,N,Ymin,Ymax,Xmin,Xmax,D,Dmin,Dmax)

DESCRIPTION
  PLOT8(3f) yields a one-page printer plot of Y(i) versus X(i):

    1.	With special plot characters;

    2.	With the vertical (Y) axis min and max and the horizontal (X) axis min
	and max values specified by the data analyst; and

    3.	With only those points (X(i),Y(i)) plotted for which the corresponding
	value of D(i) is between the specified values of DMIN and DMAX.

  The 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from Y and X) into the
  plot.

  The plot character used at the i-th plotting position (that is, at the
  coordinate (X(i),Y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5 x if char(i) is any value outside the range

      0.5 to
	36.5.

  The use of the YMIN, YMAX, XMIN, and XMAX specifications allows the data
  analyst to control fully the plot axis limits, so as, for example, to zero-
  in on an interesting sub-region of a previous plot.

  The use of the subset definition vector d gives the data analyst the
  capability of plotting subsets of the data, where the subset is defined by
  values in the vector d.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plot8
     use M_datapac, only : plot8
     implicit none
     ! call plot8(x,y)
     end program demo_plot8

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Statistical Analysis of Interlab Fatigue Time Data',
     Unpublished Manuscript (Available from Author) presented at the American
     Statistical Association, New York City, December 27-30, 1973.



				 July 20, 2023		     plot8(3m_datapac)
plot9(3m_datapac)					     plot9(3m_datapac)



NAME
  plot9(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters


SYNOPSIS
  SUBROUTINE PLOT9(Y,X,Char,N,Ymin,Ymax,Xmin,Xmax,Yaxid,Xaxid,Plchid)

DESCRIPTION
  PLOT9(3f) yields a one-page printer plot of y(i) versus x(i):

    1.	With special plot characters;

    2.	With the vertical (y) axis min and max and the horizontal (x) axis min
	and max values specified by the data analyst; and

    3.	With hollerith labels (at most 6 characters) for the vertical axis
	variable, the horizontal axis variable, and the plotting character
	variable also being provided by the data analyst.

  The 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from Y and X) into the
  plot.

  The plot character used at the i-th plotting position (that is, at the
  coordinate (X(i),Y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5 x if char(i) is any value outside the range

      0.5 to
	36.5.

  The use of the YMIN, YMAX, XMIN, and XMAX specifications allows the data
  analyst to control fully the plot axis limits, so as, for example, to zero-
  in on an interesting sub-region of a previous plot.

  The use of hollerith identifying labels allows the data analyst to
  automatically have the plots labeled. This is particularly useful in a large
  analysis when many plots are being generated.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plot9
     use M_datapac, only : plot9
     implicit none
     ! call plot9(x,y)
     end program demo_plot9

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Statistical Analysis of Interlab Fatigue Time Data',
     Unpublished Manuscript (Available from Author) presented at the American
     Statistical Association, New York City, December 27-30, 1973.



				 July 20, 2023		     plot9(3m_datapac)
plotc(3m_datapac)					     plotc(3m_datapac)



NAME
  plotc(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters


SYNOPSIS
  SUBROUTINE PLOTC(Y,X,Char,N)

DESCRIPTION
  plotc(3f) yields a one-page printer plot of y(i) versus x(i) with special
  plotting characters.

  this 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from y and x) into the
  plot.

  the plot character used at the i-th plotting position (that is, at the
  coordinate (x(i),y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5 x if char(i) is any value outside the range

      0.5 to
	36.5.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotc
     use M_datapac, only : plotc
     implicit none
     ! call plotc(x,y)
     end program demo_plotc

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'STATISTICAL ANALYSIS OF INTERLAB FATIGUE TIME DATA',
     UNPUBLISHED MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT THE AMERICAN
     STATISTICAL ASSOCIATION, NEW YORK CITY, DECEMBER 27-30, 1973.



				 July 20, 2023		     plotc(3m_datapac)
plotco(3m_datapac)					    plotco(3m_datapac)



NAME
  plotco(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer
  autocorrelation plot


SYNOPSIS
  SUBROUTINE PLOTCO(Y,N)

	    REAL(kind=wp) :: Y(:)
	    INTEGER	  :: N


DESCRIPTION
  This routine yields a multi-page (if necessary) plot of the autocorrelation
  coefficient r(k) versus the lag k.

  There is no restriction on the maximum value of n for this routine.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotco
     use M_datapac, only : plotco
     implicit none
     ! call plotco(x,y)
     end program demo_plotco

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    plotco(3m_datapac)
plotct(3m_datapac)					    plotct(3m_datapac)



NAME
  plotct(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot for
  the terminal (71 characters wide)


SYNOPSIS
  SUBROUTINE PLOTCT(Y,X,Char,N)

DESCRIPTION
  plotct(3f) yields a narrow-width (71-character) plot of y(i) versus x(i)
  with special plotting characters.

  its narrow width makes it appropriate for use on a terminal.

  this 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from y and x) into the
  plot.

  the plot character used at the i-th plotting position (that is, at the
  coordinate (x(i),y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5 x if char(i) is any value outside the range

      0.5 to
	36.5.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotct
     use M_datapac, only : plotct
     implicit none
     ! call plotct(x,y)
     end program demo_plotct

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'STATISTICAL ANALYSIS OF INTERLAB FATIGUE TIME DATA',
     UNPUBLISHED MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT THE AMERICAN
     STATISTICAL ASSOCIATION, NEW YORK CITY, DECEMBER 27-30, 1973.



				 July 20, 2023		    plotct(3m_datapac)
plots(3m_datapac)					     plots(3m_datapac)



NAME
  plots(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot of Y
  vs X


SYNOPSIS
  SUBROUTINE PLOTS(Y,X,N,D,Dmin,Dmax)

DESCRIPTION
  plots(3f) yields a one-page printer plot of y(i) versus x(i):

    1.	with only those points (x(i),y(i)) plotted for which the corresponding
	value of d(i) is between the specified values of dmin and dmax.

  the use of the subset definition vector d gives the data analyst the
  capability of plotting subsets of the data, where the subset is defined by
  values in the vector d.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plots
     use M_datapac, only : plots
     implicit none
     ! call plots(x,y)
     end program demo_plots

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		     plots(3m_datapac)
plotsc(3m_datapac)					    plotsc(3m_datapac)



NAME
  plotsc(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters


SYNOPSIS
  SUBROUTINE PLOTSC(Y,X,Char,N,D,Dmin,Dmax)

DESCRIPTION
  plotsc(3f) yields a one-page printer plot of y(i) versus x(i):

    1.	with special plot characters; and

    2.	with only those points (x(i),y(i)) plotted for which the corresponding
	value of d(i) is between the specified values of dmin and dmax.

  the 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from y and x) into the
  plot.

  the plot character used at the i-th plotting position (that is, at the
  coordinate (x(i),y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5 x if char(i) is any value outside the range

      0.5 to
	36.5.

  the use of the subset definition vector d gives the data analyst the
  capability of plotting subsets of the data, where the subset is defined by
  values in the vector d.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotsc
     use M_datapac, only : plotsc
     implicit none
     ! call plotsc(x,y)
     end program demo_plotsc

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'STATISTICAL ANALYSIS OF INTERLAB FATIGUE TIME DATA',
     UNPUBLISHED MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT THE AMERICAN
     STATISTICAL ASSOCIATION, NEW YORK CITY, DECEMBER 27-30, 1973.



				 July 20, 2023		    plotsc(3m_datapac)
plotsp(3m_datapac)					    plotsp(3m_datapac)



NAME
  plotsp(3f) - [M_datapac:LINE_PLOT] generate a line printer spectrum plot


SYNOPSIS
  SUBROUTINE PLOTSP(Y,N,Idf)

	 REAL(kind=wp),intent(in) :: Y(:)
	 INTEGER,intent(in)	  :: N
	 INTEGER,intent(in)	  :: Idf


DESCRIPTION
  This routine yields a one-page plot of the spectrum, along with upper and
  lower limits of the spectrum.

  The convention has been followed that if the integer input parameter idf has
  the value 0, then no confidence limits will be computed and only the
  spectrum itself will be plotted out.

  Multiple plot points are not indicated.

  The first point will be plotted on the left vertical axis the last point
  will be plotted on the right vertical axis there is no restriction on the
  maximum value of n for this routine.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotsp
     use M_datapac, only : plotsp
     implicit none
     ! call plotsp(x,y)
     end program demo_plotsp

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    plotsp(3m_datapac)
plotst(3m_datapac)					    plotst(3m_datapac)



NAME
  plotst(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot of Y
  vs X for the terminal (71 characters wide)


SYNOPSIS
  SUBROUTINE PLOTST(Y,X,N,D,Dmin,Dmax)

DESCRIPTION
  plotst(3f) yields a narrow-width (71-character) of y(i) versus x(i):

    1.	with only those points (x(i),y(i)) plotted for which the corresponding
	value of d(i) is between the specified values of dmin and dmax.

  its narrow width makes it appropriate for use on a terminal.

  the use of the subset definition vector d gives the data analyst the
  capability of plotting subsets of the data, where the subset is defined by
  values in the vector d.

  ! INPUT ARGUMENTS--Y	    = THE  VECTOR OF

    ! (UNSORTED OR SORTED) OBSERVATIONS

    ! TO BE PLOTTED VERTICALLY.

    ! --X      = THE  VECTOR OF

    ! (UNSORTED OR SORTED) OBSERVATIONS

    ! TO BE PLOTTED HORIZONTALLY.

    ! --N      = THE INTEGER NUMBER OF OBSERVATIONS

    ! IN THE VECTOR Y.

    ! --D      = THE  VECTOR

    ! WHICH 'DEFINES' THE VARIOUS

    ! POSSIBLE SUBSETS.

    ! --DMIN   = THE  VALUE

    ! WHICH DEFINES THE LOWER BOUND

    ! (INCLUSIVELY) OF THE PARTICULAR

    ! SUBSET OF INTEREST TO BE PLOTTED.

    ! --DMAX   = THE  VALUE

    ! WHICH DEFINES THE UPPER BOUND

    ! (INCLUSIVELY) OF THE PARTICULAR

    ! SUBSET OF INTEREST TO BE PLOTTED.

    ! OUTPUT--A NARROW-WIDTH (71-CHARACTER) TERMINAL PLOT

    ! OF Y(I) VERSUS X(I),

    ! FOR ONLY OF A SPECIFIED SUBSET OF THE DATA.

    ! THE BODY OF THE PLOT (NOT COUNTING AXIS VALUES

    ! AND MARGINS) IS 25 ROWS (LINES) AND 49 COLUMNS.

EXAMPLES
  Sample program:

     program demo_plotst
     use M_datapac, only : plotst
     implicit none
     ! call plotst(x,y)
     end program demo_plotst

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    plotst(3m_datapac)
plott(3m_datapac)					     plott(3m_datapac)



NAME
  plott(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot of Y
  vs X for the terminal (71 characters wide)


SYNOPSIS
  SUBROUTINE PLOTT(Y,X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 REAL(kind=wp),intent(in) :: Y(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  PLOTT(3f) yields a narrow-width (71-character) plot of Y(i) versus X(i). Its
  narrow width makes it appropriate for use on a terminal.

  Note values in the vertical axis vector (y) or the horizontal axis vector
  (x) which are equal to or in excess of 10.0**10 will not be plotted.

  This convention greatly simplifies the problem of plotting when some
  elements in the vector y (or x) are 'missing data', or when we purposely
  want to ignore certain elements in the vector y (or x) for plotting purposes
  (that is, we do not want certain elements in y (or x) to be plotted). To
  cause specific elements in y (or x) to be ignored, we replace the elements
  beforehand (by, for example, use of the REPLAC(3f) subroutine) by some large
  value (like, say, 10.0**10) and they will subsequently be ignored in the
  plot subroutine.

  Note that the storage requirements for this (and the other) terminal plot
  subroutines are very small. This is due to the "one line at a time"
  algorithm employed for the plot.

INPUT ARGUMENTS
  Y The vector of (unsorted or sorted) observations to be plotted vertically.

  X The REAL vector of (unsorted or sorted) observations to be plotted
    horizontally.

  N The integer number of observations in the vector Y.  There is no
    restriction on the maximum value of N for this subroutine.

OUTPUT
  A narrow-width (71-character) terminal plot of y(i) versus x(i).  The body
  of the plot (not counting axis values and margins) is 25 rows (lines) and 49
  columns.

EXAMPLES
  Sample program:

       program demo_plott
       use M_datapac, only : plott, label
       implicit none
       integer ::  i
       integer,parameter :: dp=kind(0.0d0)
       real(kind=dp), allocatable ::  x(:), y(:)
	  call label('plott')
	  y=[(real(i)/10.0,i=1,30)]
	  x=y**3.78-6*y**2.52+9*y**1.26
	  call plott(x,y,size(x))
       end program demo_plott

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.4000000E+01 -		     X X X				X
       0.3833356E+01 I		    X	  X
       0.3666712E+01 I			    X
       0.3500068E+01 I		  X
       0.3333424E+01 I			      X
       0.3166780E+01 I		X
       0.3000137E+01 -			       X
       0.2833493E+01 I	       X
       0.2666849E+01 I						      X
       0.2500205E+01 I				 X
       0.2333561E+01 I	     X
       0.2166917E+01 I				  X
       0.2000273E+01 -
       0.1833629E+01 I
       0.1666985E+01 I	   X			    X		     X
       0.1500341E+01 I
       0.1333698E+01 I				      X
       0.1167054E+01 I
       0.1000410E+01 -	  X
       0.8337659E+00 I				       X	   X
       0.6671220E+00 I
       0.5004781E+00 I	X				 X
       0.3338342E+00 I						 X
       0.1671903E+00 I					   X	X
       0.5463774E-03 -					    X X
			I-----------I-----------I-----------I-----------I
		 0.1000E+00  0.8250E+00  0.1550E+01  0.2275E+01  0.3000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		     plott(3m_datapac)
plotu(3m_datapac)					     plotu(3m_datapac)



NAME
  plotu(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer 4-plot


SYNOPSIS
  SUBROUTINE PLOTU(X,N)

DESCRIPTION
  PLOTU(3f) produces the following 4 plots-- all on the same printer page--

    1.	data plot--x(i) versus i

    2.	autoregression plot--x(i) versus x(i-1)

    3.	histogram

    4.	normal probability plot

  In addition, location, scale, and autocorrelation summary statistics are
  printed out automatically on the same page.

  These plots give the data analyst a quick first-pass check at some of the
  underlying assumptions typically made-- constant location, constant scale,
  no outliers, unautocorrelated data, symmetry, normality.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotu
     use M_datapac, only : plotu
     implicit none
     ! call plotu(x,y)
     end program demo_plotu

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'SOME USEFUL COMPUTERIZED TECHNIQUES FOR DATA ANALYSIS',
     (UNPUBLISHED MANUSCRIPT AVAILABLE FROM AUTHOR), 1975.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

  •  FILLIBEN, 'THE PROBABILITY PLOT CORRELATION COEFFICIENT TEST FOR
     NORMALITY', TECHNOMETRICS, 1975, pages 111-117.



				 July 20, 2023		     plotu(3m_datapac)
plotx(3m_datapac)					     plotx(3m_datapac)



NAME
  plotx(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer run
  sequence plot


SYNOPSIS
  SUBROUTINE PLOTX(X,N)

DESCRIPTION
  PLOTX(3f) yields a one-page printer plot of X(I) versus I.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotx
     use M_datapac, only : plotx
     implicit none
     ! call plotx(x,y)
     end program demo_plotx

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		     plotx(3m_datapac)
plotxt(3m_datapac)					    plotxt(3m_datapac)



NAME
  plotxt(3f) - [M_datapac:LINE_PLOT] generate a line printer run sequence plot
  for the terminal (71 characters wide)


SYNOPSIS
  SUBROUTINE PLOTXT(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  PLOTXT(3f) yields a narrow-width (71-character) plot of x(i) versus i.  Its
  narrow width makes it appropriate for use on a terminal.

  Values in the vertical axis vector (X) which are equal to or in excess of
  10.0**10 will not be plotted.

  This convention greatly simplifies the problem of plotting when some
  elements in the vector X are 'missing data', or when we purposely want to
  ignore certain elements in the vector X for plotting purposes (that is, we
  do not want certain elements in X to be plotted). To cause specific elements
  in X to be ignored, we replace the elements beforehand (by, for example, use
  of the REPLAC(3f) subroutine) by some large value (like, say, 10.0**10) and
  they will subsequently be ignored in the PLOTXT(3f) subroutine.

  Note that the storage requirements for this (and the other) terminal plot
  subroutiness are very small. This is due to the 'one line at a time'
  algorithm employed for the plot.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations to be plotted vertically.

  N The integer number of observations in the vector X.

OUTPUT
  A narrow-width (71-character) terminal plot of X(I) versus I.  The body of
  the plot (not counting axis values and margins) is 25 rows (lines) and 49
  columns.

EXAMPLES
  Sample program:

     program demo_plotxt
     use M_datapac, only : plotxt
     implicit none
     ! call plotxt(x,y)
     end program demo_plotxt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    plotxt(3m_datapac)
plotxx(3m_datapac)					    plotxx(3m_datapac)



NAME
  plotxx(3f) - [M_datapac:LINE_PLOT] generate a line printer lag plot


SYNOPSIS
  SUBROUTINE PLOTXX(X,N)

DESCRIPTION
  plotxx(3f) yields a one-page printer plot of x(i) versus x(i-1).

  this type of plot (which is called an autocorrelation plot or a lag 1 plot)
  is useful in examining for autocorrelation in a sequence of observations.

  uncorrelated data will produce an autocorrelation plot with no apparent
  structure; autocorrelated data will produce an autocorrelation plot with
  linear, elliptical, or other kinds of structure.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plotxx
     use M_datapac, only : plotxx
     implicit none
     ! call plotxx(x,y)
     end program demo_plotxx

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'SOME USEFUL PROCEDURES FOR THE STATISTICAL ANALYSIS OF DATA',
     UNPUBLISHED MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT

   THE FALL CONFERENCE OF THE CHEMICAL DIVISION OF THE AMERICAN SOCIETY
  FOR QUALITY CONTROL, KNOXVILLE, TENNESSEE, OCTOBER 19-20, 1972.

  •  FILLIBEN, 'DATA EXPLORATION USING STAND-ALONE SUBROUTINES', UNPUBLISHED
     MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT THE MEETING OF THE
     AMERICAN STATISTICAL ASSOCIATION, ST. LOUIS, MISSOURI, AUGUST 26-29,
     1974.



				 July 20, 2023		    plotxx(3m_datapac)
pltsct(3m_datapac)					    pltsct(3m_datapac)



NAME
  pltsct(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters for the terminal (71 characters wide)


SYNOPSIS
  SUBROUTINE PLTSCT(Y,X,Char,N,D,Dmin,Dmax)

DESCRIPTION
  pltsct(3f) yields a narrow-width (71-character) plot of y(i) versus x(i):

    1.	with special plot characters; and

    2.	with only those points (x(i),y(i)) plotted for which the corresponding
	value of d(i) is between the specified values of dmin and dmax.

  its narrow width makes it appropriate for use on a terminal.

  the 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from y and x) into the
  plot.

  the plot character used at the i-th plotting position (that is, at the
  coordinate (x(i),y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5 x if char(i) is any value outside the range

      0.5 to
	36.5.

  the use of the subset definition vector d gives the data analyst the
  capability of plotting subsets of the data, where the subset is defined by
  values in the vector d.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_pltsct
     use M_datapac, only : pltsct
     implicit none
     ! call pltsct(x,y)
     end program demo_pltsct

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'STATISTICAL ANALYSIS OF INTERLAB FATIGUE TIME DATA',
     UNPUBLISHED MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT THE THE
     AMERICAN STATISTICAL ASSOCIATION, NEW YORK CITY, DECEMBER 27-30, 1973.



				 July 20, 2023		    pltsct(3m_datapac)
pltxxt(3m_datapac)					    pltxxt(3m_datapac)



NAME
  pltxxt(3f) - [M_datapac:LINE_PLOT] generate a line printer lag plot for the
  terminal (71 characters wide)


SYNOPSIS
  SUBROUTINE PLTXXT(X,N)

DESCRIPTION
  pltxxt(3f) yields a narrow-width (71-character) plot of x(i) versus x(i-1).
  Its narrow width makes it appropriate for use on a terminal.

  this type of plot (which is called an autocorrelation plot or a lag 1 plot)
  is useful in examining for autocorrelation in a sequence of observations.

  uncorrelated data will produce an autocorrelation plot with no apparent
  structure; autocorrelated data will produce an autocorrelation plot with
  linear, elliptical, or other kinds of structure.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_pltxxt
     use M_datapac, only : pltxxt
     implicit none
     ! call pltxxt(x,y)
     end program demo_pltxxt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'SOME USEFUL PROCEDURES FOR THE STATISTICAL ANALYSIS OF DATA',
     UNPUBLISHED MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT

   THE FALL CONFERENCE OF THE CHEMICAL DIVISION OF THE AMERICAN SOCIETY
  FOR QUALITY CONTROL, KNOXVILLE, TENNESSEE, OCTOBER 19-20, 1972.

  •  FILLIBEN, 'DATA EXPLORATION USING STAND-ALONE SUBROUTINES', UNPUBLISHED
     MANUSCRIPT (AVAILABLE FROM AUTHOR) PRESENTED AT THE MEETING OF THE
     AMERICAN STATISTICAL ASSOCIATION, ST. LOUIS, MISSOURI, AUGUST 26-29,
     1974.



				 July 20, 2023		    pltxxt(3m_datapac)
poicdf(3m_datapac)					    poicdf(3m_datapac)



NAME
  poicdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Poisson
  cumulative distribution function


SYNOPSIS
  SUBROUTINE POICDF(X,Alamba,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(in)  :: Alamba
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  POICDF(3f) computes the cumulative distribution function value at the
  precision value X for the Poisson distribution with precision tail length
  parameter = alamba.

  The Poisson distribution used herein has mean = ALAMBA and standard
  deviation = sqrt(ALAMBA).

  This distribution is defined for all discrete non-negative integer X-- X =
  0, 1, 2, ... .

  This distribution has the probability function

	 f(X) = exp(-ALAMBA) * ALAMBA**X / X!

  The Poisson distribution is the distribution of the number of events in the
  interval (0,ALAMBA) when the waiting time between events is exponentially
  distributed with mean = 1 and standard deviation = 1.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. x should be non-negative and integral-valued.

  ALAMBA
    The value of the tail length parameter. alamba should be positive. The
    tail length parameter alamba is not restricted to only integer values.
    ALAMBA can be set to any positive real value --integer or non-integer.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value. For the Poisson distribution

NOTE
  Even though the input to this cumulative distribution function subroutine
  for this discrete distribution should (under normal circumstances) be a
  discrete integer value, X has been specified as REAL so as to conform with
  the datapac convention that all input ****data**** (as opposed to sample
  size, for example) variables to all datapac subroutines are real.  this
  convention is based on the belief that

      1) a mixture of modes (floating point versus integer) is inconsistent
	 and an unnecessary complication in a data analysis; and
      2) floating point machine arithmetic (as opposed to integer
	 arithmetic) is the more natural mode for doing data analysis.


EXAMPLES
  Sample program:

     program demo_poicdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : poicdf, plott, label
     implicit none
     real,allocatable :: x(:), y(:)
     real	      :: alamba
     integer	      :: i
	call label('poicdf')
	x=[(real(i),i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	alamba=29.5
	do i=1,size(x)
	   call poicdf(X(i),Alamba,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_poicdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -							X
       0.9583334E+02 I							X
       0.9166666E+02 I							X
       0.8750000E+02 I							X
       0.8333334E+02 I							X
       0.7916667E+02 I							X
       0.7500000E+02 -							X
       0.7083334E+02 I							X
       0.6666667E+02 I							X
       0.6250000E+02 I							X
       0.5833334E+02 I							X
       0.5416667E+02 I							X
       0.5000000E+02 -							X
       0.4583334E+02 I							X
       0.4166667E+02 I						       XX
       0.3750000E+02 I						   XXXX
       0.3333334E+02 I					  X  X X X
       0.2916667E+02 I			     X	 X  X  X
       0.2500000E+02 -	      X  X X  X   X
       0.2083334E+02 I	 XXX X
       0.1666667E+02 I	XX
       0.1250000E+02 I	X
       0.8333336E+01 I	X
       0.4166672E+01 I	X
       0.0000000E+00 -	X
			I-----------I-----------I-----------I-----------I
		 0.1543E-12  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Discrete Distributions, 1969, pages 87-121, especially
     page 114, Formula 93.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 112.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     941, Formulae 26.4.4 and 26.4.5, and page 929.

  •  Feller, An Introduction to Probability Theory and Its Applications,
     Volume 1, Edition 2, 1957, pages 146-154.

  •  Cox and Miller, The Theory of Stochastic Processes, 1965, page 7.

  •  General Electric Company, Tables of the Individual and Cumulative Terms
     of Poisson Distribution, 1962.

  •  Owen, Handbook of Statistical Tables, 1962, pages 259-261.



				 July 20, 2023		    poicdf(3m_datapac)
poiplt(3m_datapac)					    poiplt(3m_datapac)



NAME
  poiplt(3f) - [M_datapac:LINE_PLOT] generate a Poisson probability plot (line
  printer graph)


SYNOPSIS
  SUBROUTINE POIPLT(X,N,Alamba)

DESCRIPTION
  poiplt(3f) generates a poisson probability plot (with REAL tail length
  parameter = alamba).

  the prototype poisson distribution used herein has mean = alamba and
  standard deviation = sqrt(alamba).

  this distribution is defined for all discrete non-negative integer x--x = 0,
  1, 2, ... .

  this distribution has the probability function

	 f(x) = exp(-alamba) * alamba**x / x!.

  the poisson distribution is the distribution of the number of events in the
  interval (0,alamba) when the waiting time between events is exponentially
  distributed with mean = 1 and standard deviation = 1.

  the prototype distribution restrictions of discreteness and non-negativeness
  mentioned above do not carry over to the input vector x of observations to
  be analyzed.

  the input observations in x may be discrete, continuous, non-negative, or
  negative.

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that

  distribution.
    the poisson probability plot is useful in graphically testing the
    composite (that is, location and scale parameters need not be specified)
    hypothesis that the underlying distribution from which the data have been
    randomly drawn is the poisson distribution with tail length parameter
    value = alamba.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_poiplt
     use M_datapac, only : poiplt
     implicit none
     ! call poiplt(x,y)
     end program demo_poiplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	JOHNSON AND KOTZ, DISCRETE DISTRIBUTIONS, 1969, pages 87-121.



				 July 20, 2023		    poiplt(3m_datapac)
poippf(3m_datapac)					    poippf(3m_datapac)



NAME
  poippf(3f) - [M_datapac:PERCENT_POINT] compute the Poisson percent point
  function


SYNOPSIS
  SUBROUTINE POIPPF(P,Alamba,Ppf)

DESCRIPTION
  POIPPF(3f) computes the percent point function value at the precision
  precision value P for the Poisson distribution with REAL tail length
  parameter = alamba.

  the poisson distribution used herein has mean = alamba and standard
  deviation = sqrt(alamba). this distribution is defined for all discrete non-
  negative integer x--x = 0, 1, 2, ... .

  this distribution has the probability function

	 f(x) = exp(-alamba) * alamba**x / x!.

  the poisson distribution is the distribution of the number of events in the
  interval (0,alamba) when the waiting time between events is exponentially
  distributed with mean = 1 and standard deviation = 1.

  note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_poippf
     use M_datapac, only : poippf
     implicit none
     ! call poippf(x,y)
     end program demo_poippf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Discrete Distributions, 1969, pages 87-121,

     especially page 102, Formula 36.1.
       --Hastings and Peacock, Statistical Distributions--A Handbook for
       Students and Practitioners, 1975, pages 108-113.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964,

     page 929.
       --Feller, An Introduction to Probability Theory and Its Applications,
       Volume 1, Edition 2, 1957, pages 146-154.

  •  Cox and Miller, The Theory of Stochastic Processes, 1965, page 7.

  •  General Electric Company, Tables of the Individual and Cumulative Terms
     of Poisson Distribution, 1962.

  •  Owen, Handbook of Statistical Tables, 1962, pages 259-261.



				 July 20, 2023		    poippf(3m_datapac)
poiran(3m_datapac)					    poiran(3m_datapac)



NAME
  poiran(3f) - [M_datapac:RANDOM] generate Poisson random numbers


SYNOPSIS
  SUBROUTINE POIRAN(N,Alamba,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: Alamba
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  POIRAN(3f) generates a random sample of size N from the Poisson distribution
  with REAL tail length parameter = ALAMBA.

  The Poisson distribution used herein has mean = ALAMBA and standard
  deviation = sqrt(ALAMBA).

  This distribution is defined for all discrete non-negative integer X where X
  = 0, 1, 2, ... .

  This distribution has the probability function

	 f(X) = exp(-ALAMBA) * ALAMBA**X / X!

  The Poisson distribution is the distribution of the number of events in the
  interval (0,ALAMBA) when the waiting time between events is exponentially
  distributed with mean = 1 and standard deviation = 1.

  Note that even though the output from this discrete random number generator
  must necessarily be a sequence of ***integer*** values, the output vector X
  is REAL in mode.

  X has been specified as REAL so as to conform with the DATAPAC convention
  that all output vectors from all DATAPAC subroutines

  are REAL.
    this convention is based on the belief that

  1.  A mixture of modes (floating point versus integer) is inconsistent and
      an unnecessary complication in a data analysis; and

  2.  Floating point machine arithmetic (as opposed to integer arithmetic) is
      the more natural mode for doing data analysis.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

  ALAMBA The value of the tail length parameter. Note the tail length
  parameter ALAMBA is not restricted to only integer values. ALAMBA can be set
  to any positive real value--integer or non-integer.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the poisson distribution will be placed.

EXAMPLES
  Sample program:

     program demo_poiran
     use m_datapac, only : poiran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=500
     real :: x(n)
     integer :: iseed
     real :: alamba
	call label('poiran')
	alamba=2.0
	iseed=12345
	call poiran(N,Alamba,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_poiran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.7000000E+01 -				       X
       0.6708333E+01 I
       0.6416667E+01 I
       0.6125000E+01 I	      X 	XX	 X	X   X	       X
       0.5833333E+01 I
       0.5541667E+01 I
       0.5250000E+01 -
       0.4958333E+01 I	       XX   XXXX   X  X X  X   X     XX    X
       0.4666667E+01 I
       0.4375000E+01 I
       0.4083333E+01 I	XXXX   XXX X XXXXXXX  XX XXXX  XXXXXX  X X XX XX
       0.3791667E+01 I
       0.3500000E+01 -
       0.3208333E+01 I
       0.2916667E+01 I	XXX XXXXXX X   XX XX  XXX  XXXXXXXXXXX X XXXXXXX
       0.2625000E+01 I
       0.2333333E+01 I
       0.2041667E+01 I	XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXX XXXXXXXXXXXXXX
       0.1750000E+01 -
       0.1458333E+01 I
       0.1166667E+01 I
       0.8750000E+00 I	 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5833335E+00 I
       0.2916670E+00 I
       0.0000000E+00 -	XXXXXXXXXXXXXXX  XX XX XXXXXXXXXXXXX  XX XXXXXX X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1258E+03  0.2505E+03  0.3752E+03  0.5000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.7000000E+01 -							X
       0.6708333E+01 I
       0.6416667E+01 I
       0.6125000E+01 I						       XX
       0.5833333E+01 I
       0.5541667E+01 I
       0.5250000E+01 -
       0.4958333E+01 I						      XX
       0.4666667E+01 I
       0.4375000E+01 I
       0.4083333E+01 I						  XXXX
       0.3791667E+01 I
       0.3500000E+01 -
       0.3208333E+01 I
       0.2916667E+01 I					  XXXXXXXXX
       0.2625000E+01 I
       0.2333333E+01 I
       0.2041667E+01 I			      XXXXXXXXXXXXX
       0.1750000E+01 -
       0.1458333E+01 I
       0.1166667E+01 I
       0.8750000E+00 I	       XXXXXXXXXXXXXXXX
       0.5833335E+00 I
       0.2916670E+00 I
       0.0000000E+00 -	XXXXXXXX

			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1258E+03  0.2505E+03  0.3752E+03  0.5000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Cox and Miller, The Theory of Stochastic Processes, 1965, page 7.

  •  Tocher, The Art of Simulation, 1963, pages 36-37.

  •  Johnson and Kotz, Discrete Distributions, 1969, pages 87-121.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 108-113.

  •  Feller, An Introduction to Probability Theory and Its Applications,
     Volume 1, Edition 2, 1957, pages 146-154.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     929.



				 July 20, 2023		    poiran(3m_datapac)
propor(3m_datapac)					    propor(3m_datapac)



NAME
  propor(3f) - [M_datapac:STATISTICS] compute the sample proportion


SYNOPSIS
  SUBROUTINE PROPOR(X,N,Xmin,Xmax,Iwrite,Xprop)

DESCRIPTION
  propor(3f) computes the the sample proportion which is the proportion of
  data between xmin and xmax (inclusively) in the input vector x.

  the sample proportion = (the number of observations in the sample between
  xmin and xmax, inclusively) / n. The sample proportion will be a REAL value
  between 0.0 and 1.0 (inclusively).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_propor
     use M_datapac, only : propor
     implicit none
     ! call propor(x,y)
     end program demo_propor

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  SNEDECOR AND COCHRAN, STATISTICAL METHODS, EDITION 6, 1967, pages
     207-213.

  •  DIXON AND MASSEY, INTRODUCTION TO STATISTICAL ANALYSIS, EDITION 2, 1957,
     pages 81-82, 228-231.



				 July 20, 2023		    propor(3m_datapac)
range(3m_datapac)					     range(3m_datapac)



NAME
  range(3f) - [M_datapac:STATISTICS] compute the sample range


SYNOPSIS
  SUBROUTINE RANGE(X,N,Iwrite,Xrange)

DESCRIPTION
  RANGE(3f) computes the sample range of the data in the input vector X.  the
  sample range = sample max - sample min.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_range
     use M_datapac, only : range
     implicit none
     ! call range(x,y)
     end program demo_range

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, page 338.

  •  David, Order Statistics, 1970, page 10-11.

  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, page 39.

  •  Dixon and Massey, Introduction to Statistical Analysis, Edition 2, 1957,
     page 21.



				 July 20, 2023		     range(3m_datapac)
rank(3m_datapac)					      rank(3m_datapac)



NAME
  rank(3f) - [M_datapac:SORT] rank a vector of sample observations


SYNOPSIS
  SUBROUTINE RANK(X,N,Xr)

	 REAL(kind=wp),intent(in)  :: X(:)
	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(out) :: Xr(:)


DESCRIPTION
  RANK(3f) ranks (in ascending order) the N elements of the precision
  precision vector X, and puts the resulting N ranks into the precision
  precision vector XR.

  RANK(3f) gives the data analyst the ability to (for example) rank the data
  preliminary to certain distribution-free analyses.

NOTES
  The rank of the first element of the vector X will be placed in the first
  position of the vector XR, the rank of the second element of the vector X
  will be placed in the second position of the vector XR, etc.

  The smallest element in the vector X will have a rank of 1 (unless

  ties exist).
    the largest element in the vector X will have a rank of N (unless ties
    exist).

  Although ranks are usually (unless ties exist) integral values from 1 to N,
  it is to be noted that they are outputted as REAL values in

  the vector XR.
    XR is so as to be consistent with the fact that all vector arguments in
    all other datapac subroutines are REAL; but more importantly, because ties
    frequently do exist in data sets and so some of the resulting ranks will
    be non-integral and so the output vector of ranks must necessarily be REAL
    and not INTEGER.

  The input vector X remains unaltered.

  Due to conflicting use of labeled common /block2_real64/ by this rank
  subroutine and the SPCORR (Spearman rank correlation coefficient)
  subroutine, the vector XS of this rank subroutine has been placed in labeled
  common /block4_real64/

  The first and third arguments in the calling sequence may be identical; that
  is, an 'in place' ranking is permitted. The calling sequence call
  RANK(X,N,X) is valid, if desired.

  The sorting algorthm used herein is the binary sort. This algorthim

  is extremely fast as the following time trials indicate.
    These time trials were carried out on the UNIVAC 1108 EXEC 8 system at NBS
    in

  August of 1974.
    by way of comparison, the time trial values for the easy-to-program but
    extremely inefficient bubble sort algorithm have also been included--

  Number of random
    Binary sort       Bubble sort numbers sorted

    n = 10
      .002 sec		.002 sec

    n = 100
      .011 sec		.045 sec

    n = 1000
      .141 sec	       4.332 sec

    n = 3000
      .476 sec	      37.683 sec

    n = 10000
      1.887 sec      not computed

INPUT ARGUMENTS
  X The vector of observations to be ranked.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

OUTPUT ARGUMENTS
  XR
    The vector into which the ranks of the X values will be placed (in
    ascending order)

EXAMPLES
  Sample program:

     program demo_rank
     use M_datapac, only : rank
     implicit none
     ! call rank(x,y)
     end program demo_rank

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  CACM March 1969, page 186 (Binary Sort Algorithm by Richard C.
     Singleton).

  •  CACM January 1970, page 54.

  •  CACM October 1970, page 624.

  •  JACM January 1961, page 41.



				 July 20, 2023		      rank(3m_datapac)
ranper(3m_datapac)					    ranper(3m_datapac)



NAME
  ranper(3f) - [M_datapac:RANDOM] generates a random permutation


SYNOPSIS
  SUBROUTINE RANPER(N,Istart,X)

	 INTEGER,intent(in)    :: N
	 INTEGER,intent(inout) :: Istart
	 REAL(kind=wp)	       :: X(:)


DESCRIPTION
  RANPER(3f) generates a random permutation of size N of the values 1.0, 2.0,
  3.0, ..., N-1, N.

INPUT ARGUMENTS
  N The desired integer size of the random 1 to N permutation.

  ISTART
    An integer flag code which (if set to 0) will start the generator over and
    hence produce the same random permutation over and over again upon
    successive calls to this subroutine within a run; or (if set to some
    integer value not equal to 0, like, say, 1) will allow the generator to
    continue from where it stopped and hence produce different random
    permutations upon successive calls to this subroutine within a run.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random
    permutation will be placed of size N of the values 1.0, 2.0, 3.0, ...,
    n-1, n.

EXAMPLES
  Sample program:

     program demo_ranper
     use M_datapac, only : ranper
     implicit none
     integer,parameter :: n=10
     integer	       :: istart
     real	       :: x(n)
     integer	       :: i
	do i=1,3
	   istart=i
	   call  RANPER(N,Istart,X)
	   write(*,*)istart
	   write(*,'(*(g0.2,1x))')x
	enddo
     end program demo_ranper



AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

  Algorithm suggested by Dan Lozier, National Bureau of Standards (205.01).

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    ranper(3m_datapac)
relsd(3m_datapac)					     relsd(3m_datapac)



NAME
  relsd(3f) - [M_datapac:STATISTICS] compute the relative standard deviation
  of a vector of observations


SYNOPSIS
  SUBROUTINE RELSD(X,N,Iwrite,Xrelsd)

DESCRIPTION
  RELSD(3f) computes the sample relative standard deviation of the data in the
  input vector X.

  The sample relative standard deviation = (the sample standard
  deviation)/(the sample mean).

  The denominator N-1 is used in computing the sample standard deviation.

  The sample relative standard deviation is alternatively referred to as the
  sample coefficient of variation.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_relsd
     use M_datapac, only : relsd
     implicit none
     ! call relsd(x,y)
     end program demo_relsd

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  KENDALL AND STUART, THE ADVANCED THEORY OF STATISTICS, VOLUME 1, EDITION
     2, 1963, pages 47, 233.

  •  SNEDECOR AND COCHRAN, STATISTICAL METHODS, EDITION 6, 1967, pages 62-65.



				 July 20, 2023		     relsd(3m_datapac)
replac(3m_datapac)					    replac(3m_datapac)



NAME
  replac(3f) - [M_datapac:VECTOR_OPERATION] replace all observations in a
  vector within a given interval with a user-specified constant


SYNOPSIS
  SUBROUTINE REPLAC(X,N,Xmin,Xmax,Xnew)

DESCRIPTION
  REPLAC(3f) replaces (with the value XNEW) all observations in the REAL
  vector X which are inside the closed (inclusive) interval defined by XMIN
  and XMAX.

  All observations outside of this interval are left unchanged.  Thus all
  observations in X which are equal to or larger than XMIN and equal to or
  smaller than XMAX, will be replaced by XNEW.

  REPLAC(3f) (and the RETAIN(3f) and DELETE(3f) subroutines) gives the data
  analyst the ability to easily 'clean up' a data set which has missing and/or
  outlying observations so that a more appropriate subsequent data analysis
  may be performed. For example, replacement of an outlier with a more
  appropriate value can easily be done by REPLAC(3f).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_replac
     use M_datapac, only : replac
     implicit none
     ! call replac(x,y)
     end program demo_replac

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    replac(3m_datapac)
retain(3m_datapac)					    retain(3m_datapac)



NAME
  retain(3f) - [M_datapac:VECTOR_OPERATION] retain all observations in a
  vector within a user-specified interval


SYNOPSIS
  SUBROUTINE RETAIN(X,N,Xmin,Xmax,Newn)

DESCRIPTION
  RETAIN(3f) retains all observations in the REAL vector X which are inside
  the closed (inclusive) interval defined by XMIN and XMAX, while deleting all
  observations outside of this interval.

  Thus all observations in X which are smaller than XMIN or larger than XMAX
  are deleted from X. RETAIN(3f) (and the REPLAC and DELETE subroutines) gives
  the data analyst the ability to easily 'clean up' a data set which has
  missing and/or outlying observations so that a more appropriate subsequent
  data analysis may be performed. For example, a trimmed sample can easily be
  constructed by use of RETAIN(3f).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_retain
     use M_datapac, only : retain
     implicit none
     ! call retain(x,y)
     end program demo_retain

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    retain(3m_datapac)
runs(3m_datapac)					      runs(3m_datapac)



NAME
  runs(3f) - [M_datapac:ANALYSIS] perform a runs test


SYNOPSIS
  SUBROUTINE RUNS(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  RUNS(3f) performs a runs analysis of the data in the input vector x.

  This runs analysis is a useful distribution-free test of the randomness of a
  data set.

  The analysis consists of first determining the observed number of runs from
  the data, and then computing the expected number of runs, the standard
  deviation of the number of runs, and the resulting standardized statistic
  for the number of runs for runs of various lengths.

  This is done for runs up, runs down, and runs up and down.

INPUT ARGUMENTS
  X The precision vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector x.

	restrictions-- The maximum allowable value of n for this subroutine
	is 15000.

OUTPUT
  4 pages of automatic printout consisting of the observed number, expected
  number, standard deviation and resulting standardized statistic for runs of
  various lengths, and the cumulative frequency.

EXAMPLES
  Sample program:

     program demo_runs
     use M_datapac, only : runs
     implicit none
     ! call runs(x,y)
     end program demo_runs

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Levene and Wolfowitz, Annals of Mathematical Statistics, 1944, pages
     58-69; especially pages 60, 63, and 64.

  •  Bradley, Distribution-free Statistical Tests, 1968, Chapter 12, pages
     271-282.



				 July 20, 2023		      runs(3m_datapac)
sampp(3m_datapac)					     sampp(3m_datapac)



NAME
  sampp(3f) - [M_datapac:PERCENT_POINT] compute the sample 100P percent point
  (i.e., percentile)


SYNOPSIS
  SUBROUTINE SAMPP(X,N,P,Iwrite,Pp)

DESCRIPTION
  SAMPP(3f) computes the sample 100p percent point (where p is between 0.0 and
  1.0, exclusively) of the data in the input vector X.

  the sample 100p percent point = is that point in which 100p percent of the
  data in the sample is below.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_sampp
     use M_datapac, only : sampp
     implicit none
     ! call sampp(x,y)
     end program demo_sampp

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 236-239, 243.

  •  Mood and Grable, 'Introduction to the Theory of Statistics, Edition 2,
     1963, pages 406-407.

  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, page 125.



				 July 20, 2023		     sampp(3m_datapac)
scale(3m_datapac)					     scale(3m_datapac)



NAME
  scale(3f) - [M_datapac:STATISTICS] compute the sample range, sample standard
  deviation, sample relative standard deviation, and sample variance


SYNOPSIS
  SUBROUTINE SCALE(X,N)

DESCRIPTION
  scale(3f) computes 4 estimates of the scale (variation, scatter, dispersion)
  of the data in the input vector x.

  the 4 estimators employed are--

    1.	the sample range;

    2.	the sample standard deviation;

    3.	the sample relative standard deviation; and

    4.	the sample variance.

  note that n-1 (rather than n) is used in the divisor in the computation of
  the sample standard deviation, the sample relative standard deviation, and
  the sample variance.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_scale
     use M_datapac, only : scale
     implicit none
     ! call scale(x,y)
     end program demo_scale

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  DIXON AND MASSEY, pages 19 AND 21

  •  SNEDECOR AND COCHRAN, page 62

  •  DIXON AND MASSEY, pages 14, 70, AND 71

  •  CROW, JOURNAL OF THE AMERICAN STATISTICAL ASSOCIATION, pages 357 AND 387

  •  KENDALL AND STUART, THE ADVANCED THEORY OF STATISTICS, VOLUME 1, EDITION
     2, 1963, page 8.



				 July 20, 2023		     scale(3m_datapac)
sd(3m_datapac)							sd(3m_datapac)



NAME
  sd(3f) - [M_datapac:STATISTICS] compute the standard deviation of a vector
  of observations


SYNOPSIS
  SUBROUTINE SD(X,N,Iwrite,Xsd)

DESCRIPTION
  sd(3f) computes the sample standard deviation (with denominator n-1) of the
  data in the input vector x.

  the sample standard deviation = sqrt((the sum of the squared deviations
  about the sample mean)/(n-1)).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_sd
     use M_datapac, only : sd
     implicit none
     ! call sd(x,y)
     end program demo_sd

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, page 44.

  •  Dixon and Massey, Introduction to Statistical Analysis, Edition 2, 1957,
     pages 19, 76.



				 July 20, 2023			sd(3m_datapac)
sort(3m_datapac)					      sort(3m_datapac)



NAME
  sort(3f) - [M_datapac:SORT] sort a vector of sample observations, also
  return the positions in the original vector


SYNOPSIS
  SUBROUTINE SORT(X,N,Y)

       real,intent(in)	  :: x(:)
       integer,intent(in) :: n
       real,intent(out)   :: y(:)


DESCRIPTION
  This subroutine sorts (in ascending order) the N elements of the REAL vector
  X using the binary sort algorithm and puts the resulting N sorted values
  into the REAL vector Y.

OPTIONS
INPUT
  X The REAL vector of observations to be sorted.  The input vector X remains
    unaltered.

  N The integer number of observations in the vector X.

OUTPUT
  Y The REAL vector into which the sorted data values from X will be placed in
    ascending order.

EXAMPLES
  Sample program:

     program demo_sort
     use M_datapac, only : sort
     implicit none
     integer,parameter		  :: isz=20
     real			  :: aa(isz)
     real			  :: bb(isz)
     integer			  :: i
	write(*,*)'initializing array with ',isz,' random numbers'
	call random_seed()
	CALL RANDOM_NUMBER(aa)
	aa=aa*450000.0
	bb=real([(i,i=1,isz)])

	call sort(aa,isz,bb) ! sort data

	write(*,*)'checking if real values are sorted(3f)'
	do i=1,isz-1
	   if(bb(i).gt.bb(i+1))then
	      write(*,*)'Error in sorting reals small to large ',i,bb(i),bb(i+1)
	   endif
	enddo
       write(*,'(2(g0,1x))')'ORIGINAL','SORTED',(aa(i),bb(i),i=1,isz)

     end program demo_sort

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

REFERENCES
  1.  CACM MARCH 1969, page 186 (BINARY SORT ALGORITHM BY RICHARD C.
      SINGLETON).

  2.  CACM JANUARY 1970, page 54.

  3.  CACM OCTOBER 1970, page 624.

  1.  JACM JANUARY 1961, page 41.

LICENSE
  CC0-1.0



				 July 20, 2023		      sort(3m_datapac)
sortc(3m_datapac)					     sortc(3m_datapac)



NAME
  sortc(3f) - [M_datapac:SORT] sort a vector of sample observations and
  "carry" a second vector


SYNOPSIS
  Subroutine sortc(X,Y,N,Xs,Yc)

	Real(kind=wp), Intent (In)    :: X
	Real(kind=wp), Intent (In)    :: Y
	Integer, Intent (In) :: N
	Real(kind=wp), Intent (Out)   :: Xs
	Real(kind=wp), Intent (Out)   :: Yc


DESCRIPTION
  SORTC(3f) sorts (in ascending order) the N elements of the vector X, puts
  the resulting N sorted values into the vector XS, rearranges the elements of
  the vector Y (according to the sort on X), and puts the rearranged Y values
  into the vector YC.  This subroutine gives the data analyst the ability to
  sort one data vector while 'carrying along' the elements of a second data
  vector.

  The smallest element of the vector X will be placed in the first position of
  the vector XS, the second smallest element in the vector X will be placed in
  the second position of the vector XS, etc.

  The element in the vector Y corresponding to the smallest element in X will
  be placed in the first position of the vector YC, the element in the vector
  Y corresponding to the second smallest element in X will be placed in the
  second position of the vector YC, etc.

  The input vector X remains unaltered.

  If the analyst desires a sort 'in place', this is done by having the same
  output vector as input vector in the calling sequence. Thus, for example,
  the calling sequence CALL SORTC(X,Y,N,X,YC) is allowable and will result in
  the desired 'in-place' sort.

  The sorting algorithm used herein is the binary sort. This algorithm is
  extremely fast as the following time trials indicate. These time trials were
  carried out on the UNIVAC 1108 EXEC 8 system at NBS in August of 1974. By
  way of comparison, the time trial values for the easy-to-program but
  extremely inefficient bubble sort algorithm have also been included--

       Number of Random        Binary Sort	 Bubble Sort
       Numbers Sorted
	 N = 10 		.002 sec	  .002 sec
	 N = 100		.011 sec	  .045 sec
	 N = 1000		.141 sec	 4.332 sec
	 N = 3000		.476 sec	37.683 sec
	 N = 10000	       1.887 sec      NOT COMPUTED


INPUT ARGUMENTS
  X The vector of observations to be sorted.

  Y The vector of observations to be 'carried along', that is, to be
    rearranged according to the sort on X.

  N The integer number of observations in the vector X.

OUTPUT ARGUMENTS
  XS
    The vector into which the sorted data values from X will be placed in
    ascending order.

  YC
    The vector into which the rearranged (according to the sort of the vector
    X) values of the vector Y will be placed.

EXAMPLES
  Sample program:

     program demo_sortc
     use M_datapac, only : sortc, label
     implicit none
     integer,parameter		  :: isz=20
     real			  :: aa(isz)
     real			  :: bb(isz)
     real			  :: cc(isz)
     real			  :: dd(isz)
     integer			  :: i
       call label('sortc')
       write(*,*)'initializing array with ',isz,' random numbers'
       call random_seed()
       CALL RANDOM_NUMBER(aa)
       aa=aa*450000.0
       bb=real([(i,i=1,isz)])
       call sortc(aa,bb,size(aa),cc,dd)

       write(*,*)'checking if real values are sorted(3f)'
       do i=1,isz-1
	  if(cc(i).gt.cc(i+1))then
	     write(*,*)'Error in sorting reals small to large ',i,cc(i),cc(i+1)
	  endif
       enddo
       write(*,*)'test of sortc(3f) complete'
       write(*,'(4(g0,1x))')(aa(i),bb(i),cc(i),dd(i),i=1,isz)
       write(*,'(*(g0,1x))')sum(aa),sum(cc) ! should be the same if no truncation
       write(*,'(*(g0,1x))')sum(bb),sum(dd)

     end program demo_sortc

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

REFERENCES
  1.  CACM MARCH 1969, page 186 (BINARY SORT ALGORITHM BY RICHARD C.
      SINGLETON).

  2.  CACM JANUARY 1970, page 54.

  3.  CACM OCTOBER 1970, page 624.

  4.  JACM JANUARY 1961, page 41.

LICENSE
  CC0-1.0



				 July 20, 2023		     sortc(3m_datapac)
sortp(3m_datapac)					     sortp(3m_datapac)



NAME
  sortp(3f) - [M_datapac:SORT] sorts and ranks a numeric vector X


SYNOPSIS
  SUBROUTINE SORTP(X,N,Y,Xpos)

       Real(kind=wp) :: (In)	::  X(N)
       Integer, Intent (In)	::  N
       Real(kind=wp) :: (Out)	::  Y(N)
       Real(kind=wp) :: (Out)	::  XPOS(N)


DESCRIPTION
  SORTP(3f) sorts (in ascending order) the N elements of the precision
  precision vector X, puts the resulting N sorted values into the precision
  precision vector Y; and puts the position (in the original vector X) of each
  of the sorted values into the REAL vector XPOS.

  This subroutine gives the data analyst not only the ability to determine
  what the MIN and MAX (for example) of the data set are, but also where in
  the original data set the MIN and MAX occur.

  This is especially useful for large data sets.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_sortp
     use M_datapac, only : sortp
     implicit none
     ! call sortp(x,y)
     end program demo_sortp

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  CACM March 1969, page 186 (Binary Sort Algorithm by Richard C.
     Singleton).

  •  CACM January 1970, page 54.

  •  CACM October 1970, page 624.

  •  JACM January 1961, page 41.



				 July 20, 2023		     sortp(3m_datapac)
spcorr(3m_datapac)					    spcorr(3m_datapac)



NAME
  spcorr(3f) - [M_datapac:STATISTICS] compute the sample Spearman rank
  correlation coefficient between two vectors of observations


SYNOPSIS
  SUBROUTINE SPCORR(X,Y,N,Iwrite,Spc)

DESCRIPTION
  spcorr(3f) computes the spearman rank correlation coefficient between the 2
  sets of data in the input vectors x and y.

  the spearman rank correlation coefficient will be a REAL value between -1.0
  and 1.0 (inclusively).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_spcorr
     use M_datapac, only : spcorr
     implicit none
     ! call spcorr(x,y)
     end program demo_spcorr

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  KENDALL AND STUART, THE ADVANCED THEORY OF STATISTICS, VOLUME 2, EDITION
     1, 1961, pages 476-477.

  •  SNEDECOR AND COCHRAN, STATISTICAL METHODS, EDITION 6, 1967, pages
     193-195.

  •  DIXON AND MASSEY, INTRODUCTION TO STATISTICAL ANALYSIS, EDITION 2, 1957,
     pages 294-295.

  •  MOOD AND GRABLE, 'INTRODUCTION TO THE THEORY OF STATISTICS, EDITION 2,
     1963, page 424.



				 July 20, 2023		    spcorr(3m_datapac)
stmom3(3m_datapac)					    stmom3(3m_datapac)



NAME
  stmom3(3f) - [M_datapac:STATISTICS] compute the third central moment (i.e.,
  the skewness) of a vector of observations


SYNOPSIS
  SUBROUTINE STMOM3(X,N,Iwrite,Xsmom3)

DESCRIPTION
  stmom3(3f) computes the sample standardized third central moment of the data
  in the input vector x.

  the sample standardized third central moment = (the sample third central
  moment)/((the sample standard deviation)**3).

  n (rather than n-1) has been used in the denominator in the calculation of
  both the sample third central moment and the sample standard deviation.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_stmom3
     use M_datapac, only : stmom3
     implicit none
     ! call stmom3(x,y)
     end program demo_stmom3

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, the Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 85, 234, 243, 297-298, 305.

  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, pages 86-90.



				 July 20, 2023		    stmom3(3m_datapac)
stmom4(3m_datapac)					    stmom4(3m_datapac)



NAME
  stmom4(3f) - [M_datapac:STATISTICS] compute the fourth central moment (i.e.,
  the kurtosis) of a vector of observations


SYNOPSIS
  SUBROUTINE STMOM4(X,N,Iwrite,Xsmom4)

DESCRIPTION
  stmom4(3f) computes the sample standardized fourth central moment of the
  data in the input vector x.

  the sample standardized fourth central moment = (the sample fourth central
  moment)/((the sample standard deviation)**4).

  n (rather than n-1) has been used in the denominator in the calculation of
  both the sample fourth central moment and the sample standard deviation.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_stmom4
     use M_datapac, only : stmom4
     implicit none
     ! call stmom4(x,y)
     end program demo_stmom4

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 85, 243.

  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, pages 86-90.



				 July 20, 2023		    stmom4(3m_datapac)
subse1(3m_datapac)					    subse1(3m_datapac)



NAME
  subse1(3f) - [M_datapac:VECTOR_OPERATION] extract the elements of a vector
  which fall into a user-specified subset (one subset variable)


SYNOPSIS
  SUBROUTINE SUBSE1(X,N,D,Dmin,Dmax,Y,Ny)

	 REAL(kind=wp) :: D(:), Dmax, Dmin, X(:), Y(:)
	 INTEGER       :: N, Ny


DESCRIPTION
  This subroutine carries over into Y all observations of the precision
  precision vector X for which the corresponding elements in the precision
  precision vector D are inside the closed (inclusive) interval defined by
  DMIN and DMAX, while not carrying over any observations of X corresponding
  to elements of D outside of this interval.

  the input vector X is itself unaltered; those elements of X to be retained
  are copied over into the output vector Y.

  thus all observations of X which correspond to elements in D which are
  smaller than DMIN or larger than DMAX are not copied over into Y.

  the use of subse1(3f) gives the data analyst the capability to easily
  extract subsets of the data prior to data analysis on each subset.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  n The integer number of observations in the vector x.

  d The vector which 'defines' the various possible subsets of x.

  dmin
    The value which defines the lower limit (inclusively) of the particular
    subset of interest to be retained.

  dmax
    The value which defines the upper limit (inclusively) of the particular
    subset of interest to be retained.

OUTPUT ARGUMENTS
  y the vector containing only those elements of x corresponding to values of
    the d vector in the interval dmin to dmax (inclusive).

  ny
    the integer number of retained observations copied into the vector y.

EXAMPLES
  Sample program:

     program demo_subse1
     use M_datapac, only : subse1
     implicit none
     ! call subse1(x,y)
     end program demo_subse1

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    subse1(3m_datapac)
subse2(3m_datapac)					    subse2(3m_datapac)



NAME
  subse2(3f) - [M_datapac:VECTOR_OPERATION] extract the elements of a vector
  which fall into a user-specified subset (two subset variables)


SYNOPSIS
  SUBROUTINE SUBSE2(X,N,D1,D1min,D1max,D2,D2min,D2max,Y,Ny)

      REAL(kind=wp) :: D1(:), D1max, D1min, D2(:), D2max, D2min, X(:), Y(:)
      INTEGER	    :: N, Ny


DESCRIPTION
  This subroutine carries over into Y all observations of the precision
  precision vector X for which the corresponding elements in the precision
  precision vector D1 are inside the closed (inclusive) interval defined by
  D1MIN and D1MAX, and also for which the corresponding elements in the vector
  D2 are inside the closed (inclusive) interval defined by D2MIN and D2MAX.

  No observations in X corresponding to elements of D1 or D2 outside of their
  respective intervals are carried over into Y.

  The input vector X is itself unaltered; those elements of X to be retained
  are copied over into the output vector Y.

  Thus all observations of X which correspond to elements in D1 which are
  smaller than D1MIN or larger than D1MAX, or which correspond to elements in
  D2 which are smaller than D2MIN or larger than D2MAX, are not copied over
  into Y.

  The use of subse2(3f) gives the data analyst the capability to easily
  extract subsets of the data prior to data analysis on each subset.

INPUT ARGUMENTS
  X the vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector x.

  D1
    A vector which (in conjunction with d2) "defines" the various possible
    subsets of x.

  D1MIN
    The value which defines in d1 the lower limit (inclusively) of the
    particular subset of interest to be retained.

  D1MAX
    The value which defines in d1 the upper limit (inclusively) of the
    particular subset of interest to be retained.

  D2
    A vector which (in conjunction with d2) "defines" the various possible
    subsets of x.

  D2MIN
    The value which defines in d2 the lower limit (inclusively) of the
    particular subset of interest to be retained.

  D2MAX
    The value which defines in d2 the upper limit (inclusively) of the
    particular subset of interest to be retained.

OUTPUT ARGUMENTS
  Y The vector containing only those elements of X simultaneously
    corresponding to values of the D1 vector in the interval D1MIN to D1MAX
    (inclusive), and values of the D2 vector in the interval D2MIN to D2MAX
    (inclusive).

  NY
    The integer number of retained observations copied into the vector Y.

EXAMPLES
  Sample program:

     program demo_subse2
     use M_datapac, only : subse2
     implicit none
     ! call subse2(x,y)
     end program demo_subse2

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    subse2(3m_datapac)
subset(3m_datapac)					    subset(3m_datapac)



NAME
  subset(3f) - [M_datapac:VECTOR_OPERATION] extract the elements of a vector
  which fall into a user-specified subset (one subset variable)


SYNOPSIS
  SUBROUTINE SUBSET(X,N,D,Dmin,Dmax,Newn)

       REAL(kind=wp) :: D(:), Dmax ,Dmin, X(:)
       INTEGER	     :: N , Newn


DESCRIPTION
  This subroutine retains all observations in the vector X for which the
  corresponding elements in the vector D are inside the closed (inclusive)
  interval defined by DMIN and DMAX, while deleting all observations in X
  corresponding to elements of D outside of this interval.

  Thus all observations in X which correspond to elements in D which are
  smaller than DMIN or larger than DMAX are deleted from X.

  The use of subset(3f) gives the data analyst the capability to easily
  extract subsets of the data prior to data analysis on each subset.

INPUT ARGUMENTS
  x the vector of (unsorted or sorted) observations.

  n the integer number of observations in the vector x.

  d the vector which 'defines' the various possible subsets of x.

  dmin
    the value which defines the lower limit (inclusively) of the particular
    subset of interest to be retained.

  dmax
    the value which defines the upper limit (inclusively) of the particular
    subset of interest to be retained.

OUTPUT ARGUMENTS
  newn
    the integer number of observations remaining (retained) in x after all of
    the observations in x have been deleted which correspond to values in the
    vector d outside the interval of interest.

EXAMPLES
  Sample program:

     program demo_subset
     use M_datapac, only : subset
     implicit none
     ! call subset(x,y)
     end program demo_subset

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    subset(3m_datapac)
tail(3m_datapac)					      tail(3m_datapac)



NAME
  tail(3f) - [M_datapac:ANALYSIS] performs a symmetric distribution tail
  length analysis


SYNOPSIS
  SUBROUTINE TAIL(X,N)

	 REAL(kind=wp) :: X(:)
	 INTEGER       :: N


DESCRIPTION
  TAIL(3f) performs a symmetric distribution tail length analysis on the data
  in the input vector X.

  The analysis consists of the following--

    1.	Various test statistics to test the specific hypothesis of normality;

    2.	A uniform probability plot (a short-tailed distribution);

    3.	A normal probability plot (a moderate-tailed distribution);

    4.	A tukey lambda = -0.5 probability plot (a moderate-long-tailed
	distribution);

    5.	A cauchy probability plot (a long-tailed distribution);

    6.	A determination of the best-fit symmetric distribution to the data set
	from an admissible set consisting of 43 symmetric distributions.

  The admissible set of symmetric distributions considered includes the
  uniform, normal, logistic, double exponential, cauchy, and 37 distributions
  drawn from the the tukey lambda distributional family.

  The goodness of fit criterion is the maximum probability plot correlation
  coefficient criterion.

INPUT ARGUMENTS
  X The  vector of unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 3000.

OUTPUT
  6 pages of automatic printout--

    1.	various test statistics for normality;

    2.	a uniform probability plot;

    3.	a normal probability plot;

    4.	a tukey lambda = -0.5 probability plot;

    5.	a cauchy probability plot;

    6.	a determination of the best-fit symmetric distribution to the data
	set.

EXAMPLES
  Sample program:

     program demo_tail
     use M_datapac, only : tail, label
     implicit none
     real,allocatable :: x(:)
     integer :: i
	call label('tail')
	x=[(real(i)/10.0,i=1,2000)]
	x=x**3.78-6*x**2.52+9*x**1.26
	call tail(x,size(x))
     end program demo_tail

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCE
  •  Filliben (1972), 'Techniques for Tail Length Analysis', Proceedings of
     the Eighteenth Conference on the Design of Experiments in Army Research
     and Testing, pages 425-450.

  •  Filliben, 'The Percent Point Function', Unpublished Manuscript.

  •  Johnson and Kotz (1970), Continuous Univariate Distributions-1, pages
     250-271.



				 July 20, 2023		      tail(3m_datapac)
tcdf(3m_datapac)					      tcdf(3m_datapac)



NAME
  tcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] computes the cumulative
  distribution function value for student's t distribution with integer
  degrees of freedom NU.


SYNOPSIS
  SUBROUTINE TCDF(X,Nu,Cdf)

	 REAL(kind=wp) :: X
	 INTEGER       :: Nu
	 REAL(kind=wp) :: Cdf


DESCRIPTION
  TCDF(3f) computes the cumulative distribution function value for Student's T
  distribution with integer degrees of freedom parameter = NU. This
  distribution is defined for all X.

  The probability density function is given in the references below.

  Note the mode of internal operations is double precision.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative.

  NU
    The integer number of degrees of freedom. NU should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the Student's T
    distribution

EXAMPLES
  Sample program:

     program demo_tcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : tcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: nu
     integer	       :: i
	call label('tcdf')
	x=[(real(i)/20.0,i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	nu=12
	do i=1,size(x)
	   call tcdf(X(i),Nu,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_tcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.5000000E+01 -							X
       0.4791667E+01 I							X
       0.4583333E+01 I							X
       0.4375000E+01 I							X
       0.4166667E+01 I							X
       0.3958333E+01 I							X
       0.3750000E+01 -							X
       0.3541667E+01 I							X
       0.3333333E+01 I							X
       0.3125000E+01 I							X
       0.2916667E+01 I						       X
       0.2708333E+01 I						       X
       0.2500000E+01 -						      XX
       0.2291667E+01 I						      X
       0.2083333E+01 I						     X
       0.1875000E+01 I						   XX
       0.1666667E+01 I						  XX
       0.1458333E+01 I					       XXX
       0.1250000E+01 -					   XXXX
       0.1041667E+01 I				       XXXX
       0.8333335E+00 I				  XXXX
       0.6250000E+00 I			    XX XX
       0.4166670E+00 I		     X XX X
       0.2083335E+00 I	      XX X X
       0.0000000E+00 -	X X X
			I-----------I-----------I-----------I-----------I
		 0.5000E+00  0.6250E+00  0.7499E+00  0.8749E+00  0.9998E+00



AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     948, Formulae 26.7.3 and 26.7.4.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     94-129.

  •  Federighi, Extended Tables of the Percentage Points Of Student'S T-
     Distribution, Journal of the American Statistical Association, 1959,
     pages 683-688.

  •  Owen, Handbook of Statistical Tables, 1962, pages 27-30.

  •  Pearson and Hartley, Biometrika Tables for Statisticians, Volume 1, 1954,
     pages 132-134.



				 July 20, 2023		      tcdf(3m_datapac)
time(3m_datapac)					      time(3m_datapac)



NAME
  time(3f) - [M_datapac:ANALYSIS] perform a time series analysis
  (autocorrelation plot, a test for white noise, a "pilot" spectrum, and 4
  other estimated spectra based on differing bandwidth)


SYNOPSIS
  SUBROUTINE TIME(X,N)

DESCRIPTION
  time(3f) performs a time series analysis on the data in the input vector x.

  the analysis consists of the following--

    1.	a plot of autocorrelation versus lag number;

    2.	a test for white noise (assuming normality);

    3.	a 'pilot' spectrum; and

    4.	4 other estimated spectra--each based on a differing bandwidth.

  in order that the results of the time series analysis be valid and properly
  interpreted, the input data in x should be equi-spaced in time (or whatever
  variable corresponds to time).

  the horizontal axis of the spectra produced by time(3f) is frequency.

  this frequency is measured in units of cycles per 'data point' or, more
  precisely, in cycles per unit time where 'unit time' is defined as the
  elapsed time between adjacent observations.

  the range of the frequency axis is 0.0 to 0.5.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_time
     use M_datapac, only : time
     implicit none
     ! call time(x,y)
     end program demo_time

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Jenkins and Watts, especially page 290.



				 July 20, 2023		      time(3m_datapac)
tol(3m_datapac) 					       tol(3m_datapac)



NAME
  tol(3f) - [M_datapac:STATISTICS] compute normal and distribution-free
  tolerance limits


SYNOPSIS
  SUBROUTINE TOL(X,N)

DESCRIPTION
  tol(3f) computes normal and distribution-free tolerance limits for the data
  in the input vector x.

  15 normal tolerance limits are computed; and 30 distribution-free tolerance
  limits are computed.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_tol
     use M_datapac, only : tol
     implicit none
     ! call tol(x,y)
     end program demo_tol

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  GARDINER AND HULL, TECHNOMETRICS, 1966, pages 115-122

  •  WILKS, ANNALS OF MATHEMATICAL STATISTICS, 1941, page 92

  •  MOOD AND GRABLE, pages 416-417



				 July 20, 2023		       tol(3m_datapac)
tplt(3m_datapac)					      tplt(3m_datapac)



NAME
  tplt(3f) - [M_datapac:LINE_PLOT] generates a Student's T probability plot
  (with integer degrees of freedom parameter value NU).


SYNOPSIS
  SUBROUTINE TPLT(X,N,Nu)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in) :: N
	 INTEGER,intent(in) :: Nu


DESCRIPTION
  TPLT(3f) generates a Student's T probability plot (with integer degrees of
  freedom parameter value = NU).

  The prototype Student's T distribution used herein is defined for all X, and
  its probability density function is given in the references below.

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The Student's T probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the Student's T distribution with degrees of freedom
  parameter value = NU.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

  NU
    The integer number of degrees of freedom.  NU should be positive.

OUTPUT
  A one-page Student's T probability plot.

EXAMPLES
  Sample program:

     program demo_tplt
     use M_datapac, only : tplt
     implicit none
     ! call tplt(x,y)
     end program demo_tplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     949, FormulA 26.7.5.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, page 102,
     Formula 11.

  •  Federighi, 'Extended Tables of the Percentage Points of Student's T
     Distribution, Journal of the American Statistical Association, 1969,
     pages 683-688.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 120-123.



				 July 20, 2023		      tplt(3m_datapac)
tppf(3m_datapac)					      tppf(3m_datapac)



NAME
  tppf(3f) - [M_datapac:PERCENT_POINT] computes the percent point function
  value for the student's T distribution


SYNOPSIS
  SUBROUTINE TPPF(P,Nu,Ppf)

DESCRIPTION
  tppf(3f) computes the percent point function value for the student's t
  distribution with integer degrees of freedom parameter = nu.	the student's
  t distribution used herein is defined for all x, and its probability density
  function is given in the references below.

  note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_tppf
     use M_datapac, only : tppf
     implicit none
     ! call tppf(x,y)
     end program demo_tppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     949, Formula 26.7.5.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, page 102,
     Formula 11.

  •  Federighi, 'Extended Tables of the Percentage Points of Student's T
     Distribution, Journal of the American Statistical Association, 1969,
     pages 683-688.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 120-123.



				 July 20, 2023		      tppf(3m_datapac)
tran(3m_datapac)					      tran(3m_datapac)



NAME
  tran(3f) - [M_datapac:RANDOM] a random sample of size n from the Student's t
  distribution with integer degrees of freedom parameter NU.


SYNOPSIS
  SUBROUTINE TRAN(N,Nu,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(in)	   :: Nu
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  This subroutine generates a random sample of size N from the Student's T
  distribution with integer degrees of freedom parameter = NU.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  NU
    The integer degrees of freedom (parameter) for the T distribution. NU
    should be a positive integer variable.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the Student's T distribution will be placed.

EXAMPLES
  Sample program:

     program demo_tran
     use m_datapac, only : tran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=400
     real :: x(n)
     integer :: iseed
     integer :: nu
	call label('tran')
	nu=3
	iseed=12345
	call tran(N,Nu,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_tran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1029407E+02 -						X
       0.9486016E+01 I
       0.8677961E+01 I
       0.7869905E+01 I
       0.7061851E+01 I				X
       0.6253795E+01 I				     X
       0.5445739E+01 -
       0.4637684E+01 I
       0.3829628E+01 I		X	 X	   X	  X
       0.3021573E+01 I	    X X  X XX	    X X     X		      X
       0.2213517E+01 I	X    XX       XX  X    X X	X X   X
       0.1405462E+01 I	 X   XXXX XXXXXXXXXXXX XX    XXX  XXX  XXXXXX
       0.5974064E+00 -	XX XXXXXXXXXXXXXXXXXXXXXXXX XXX XXXXXXXXXXXX XXX
      -0.2106485E+00 I	 XXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXX
      -0.1018704E+01 I	XX XX XX X XXX XX XXXXXXXXXXXX	XX  XXXX XX XXX X
      -0.1826759E+01 I	  XXXXXX XX  XX  XX  X	 XX  X	   X X	  XX   XX
      -0.2634815E+01 I	   X	       XX	 X	   X   X    XX
      -0.3442871E+01 I		X		    X
      -0.4250926E+01 -			      X 	 X	    X  X
      -0.5058982E+01 I				      X 	     X
      -0.5867038E+01 I			   X
      -0.6675092E+01 I
      -0.7483148E+01 I
      -0.8291203E+01 I
      -0.9099259E+01 -				X		       X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1008E+03  0.2005E+03  0.3002E+03  0.4000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1029407E+02 -							X
       0.9486016E+01 I
       0.8677961E+01 I
       0.7869905E+01 I
       0.7061851E+01 I							X
       0.6253795E+01 I							X
       0.5445739E+01 -
       0.4637684E+01 I
       0.3829628E+01 I						       XX
       0.3021573E+01 I						      XX
       0.2213517E+01 I						    XXX
       0.1405462E+01 I					       XXXXXX
       0.5974064E+00 -				    XXXXXXXXXXXX
      -0.2106485E+00 I		      XXXXXXXXXXXXXXX
      -0.1018704E+01 I	      XXXXXXXXX
      -0.1826759E+01 I	  XXXXX
      -0.2634815E+01 I	 XX
      -0.3442871E+01 I	 X
      -0.4250926E+01 -	 X
      -0.5058982E+01 I	X
      -0.5867038E+01 I	X
      -0.6675092E+01 I
      -0.7483148E+01 I
      -0.8291203E+01 I
      -0.9099259E+01 -	X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1008E+03  0.2005E+03  0.3002E+03  0.4000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Mood and Grable, Introduction to the Theory of Statistics, 1963, page
     233.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, page 94.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 121.



				 July 20, 2023		      tran(3m_datapac)
trim(3m_datapac)					      trim(3m_datapac)



NAME
  trim(3f) - [M_datapac:STATISTICS] computes the sample trimmed mean of the
  data in the input vector X.


SYNOPSIS
  SUBROUTINE TRIM(X,N,P1,P2,Iwrite,Xtrim)

	 REAL(kind=wp),intent(in)  :: X(:)
	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: P1
	 REAL(kind=wp),intent(in)  :: P2
	 INTEGER,intent(in)	   :: Iwrite
	 REAL(kind=wp),intent(out) :: Xtrim


DESCRIPTION
  TRIM(3f) computes the sample trimmed mean of the data in the input vector X.

  The trimming is such that the lower 100*P1 % of the data is trimmed off and
  the upper 100*P2 % of the data is trimmed off.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 15000.

  P1
    The value (between 0.0 and 1.0) which defines what fraction of the lower
    order statistics is to be trimmed off before computing the trimmed mean.
    P1 should be non-negative.	P1 should be smaller than 1.0 .

  P2
    The value (between 0.0 and 1.0) which defines what fraction of the upper
    order statistics is to be trimmed off before computing the trimmed mean.
    P2 should be non-negative.	P2 should be smaller than 1.0. The sum of P1
    and P2 should be smaller than 1.0.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample trimmed mean as it is computed; or (if set to some integer value
    not equal to 0), like, say, "1" will cause the printing of the sample
    trimmed mean at the time it is computed.

OUTPUT ARGUMENTS
  XTRIM
    The value of the computed sample trimmed mean where 100*P1 % of the
    smallest and 100*P2 % of the largest ordered observations have been
    trimmed away before computing the mean of the remaining observations in
    the middle.

EXAMPLES
  Sample program:

     program demo_trim
     use M_datapac, only : trim
     implicit none
     ! call trim(x,y)
     end program demo_trim

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  David, Order Statistics, 1970, pages 126-130, 136.

  •  Crow and Siddiqui, 'Robust Estimation of Location', Journal of the
     American Statistical Association, 1967, pages 357, 387.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University, 1969).



				 July 20, 2023		      trim(3m_datapac)
unicdf(3m_datapac)					    unicdf(3m_datapac)



NAME
  unicdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] trivially compute the
  Uniform cumulative distribution function


SYNOPSIS
  subroutine unicdf(X,Cdf)

       real(kind=wp), intent(in)  :: X
       real(kind=wp), intent(out) :: Cdf


DESCRIPTION
  UNICDF(3f) computes the cumulative distribution function value for the
  uniform (rectangular) distribution on the unit interval (0,1).

  This distribution has mean = 0.5 and standard deviation = sqrt(1/12) =
  0.28867513.

  This distribution has the probability density function f(x) = x.

  That is, this is a trivial function as the output equals the input.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be between 0 and 1, inclusively.

OUTPUT ARGUMENTS
  CDF
    the REAL cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_unicdf
     !@(#) line plotter graph of function
     use M_datapac, only : unicdf, plott, label
     implicit none
     integer,parameter :: n=40
     real	       :: x(0:n), y(0:n)
     integer	       :: i
	call label('unicdf')
	x=[(real(i)/real(n),i=0,n)]
	do i=0,n
	   call unicdf(x(i),y(i))
	enddo
	call plott(x,y,n+1)
     end program demo_unicdf

  Result:

    The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
		      I-----------I-----------I-----------I-----------I
     0.1000000E+01 -						      X
     0.9583333E+00 I						    XX
     0.9166667E+00 I						 XX
     0.8750000E+00 I						X
     0.8333333E+00 I					      XX
     0.7916666E+00 I					   XX
     0.7500000E+00 -					  X
     0.7083333E+00 I					XX
     0.6666666E+00 I				     XX
     0.6250000E+00 I				    X
     0.5833333E+00 I				  XX
     0.5416666E+00 I			       XX
     0.5000000E+00 -			      X
     0.4583333E+00 I			    XX
     0.4166666E+00 I			 XX
     0.3750000E+00 I			X
     0.3333333E+00 I		      XX
     0.2916666E+00 I		   XX
     0.2500000E+00 -		  X
     0.2083333E+00 I		XX
     0.1666666E+00 I	     XX
     0.1250000E+00 I	    X
     0.8333331E-01 I	  XX
     0.4166663E-01 I   XX
     0.0000000E+00 -  X
		      I-----------I-----------I-----------I-----------I
	       0.0000E+00  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions -- 2, 1970, pages
     57-74.



				 July 20, 2023		    unicdf(3m_datapac)
unimed(3m_datapac)					    unimed(3m_datapac)



NAME
  unimed(3f) - [M_datapac:STATISTICS] generates the N order statistic medians
  from the uniform (rectangular) distribution on the unit interval (0,1).


SYNOPSIS
  SUBROUTINE UNIMED(N,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  UNIMED(3f) generates the N order statistic medians from the uniform
  (rectangular) distribution on the unit interval (0,1).

  This distribution has mean = 0.5 and standard deviation = sqrt(1/12) =
  0.28867513. This distribution has the probability density function f(X) = 1.

  UNIMED(3f) is a support subroutine for all of the probability plot
  subroutines in datapac; it is rarely used by the data analyst directly.

  A probability plot for a general distribution is a plot of the ordered
  observations versus the order statistic medians for that distribution.

  The i-th order statistic median for a general distribution is obtained by
  transforming the i-th uniform order statistic median by the percent point
  function of the desired distribution--hence the importance of being able to
  generate uniform order statistic medians.

  It is of theoretical interest to note that the i-th uniform order statistic
  median in a sample of size N is identically the median of the beta
  distribution with parameters i and N-i+1.

INPUT ARGUMENTS
  N The desired integer number of uniform order statistic medians to be
    generated.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated uniform order
    statistic medians will be placed.

EXAMPLES
  Sample program:

     program demo_unimed
     use M_datapac, only : unimed, label, plotxt
     implicit none
     integer,parameter :: N=100
     real	       :: X(N)
	call label('unimed')
	call unimed(N,X)
	call plotxt(x,n)
     end program demo_unimed

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.9930925E+00 -						       XX
       0.9520015E+00 I						     XXX
       0.9109104E+00 I						   XXX
       0.8698193E+00 I						 XXX
       0.8287283E+00 I					       XXX
       0.7876373E+00 I					     XXX
       0.7465463E+00 -					   XXX
       0.7054552E+00 I					 XXX
       0.6643642E+00 I				       XXX
       0.6232731E+00 I				     XXX
       0.5821820E+00 I				   XXX
       0.5410910E+00 I				 XXX
       0.5000000E+00 -			       XXX
       0.4589090E+00 I			     XXX
       0.4178179E+00 I			   XXX
       0.3767269E+00 I			 XXX
       0.3356358E+00 I		       XXX
       0.2945448E+00 I		     XXX
       0.2534538E+00 -		   XXX
       0.2123627E+00 I		 XXX
       0.1712717E+00 I	       XXX
       0.1301807E+00 I	     XXX
       0.8908957E-01 I	   XXX
       0.4799855E-01 I	 XXX
       0.6907523E-02 -	XX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.2575E+02  0.5050E+02  0.7525E+02  0.1000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'The Probability Plot Correlation Coefficient Test for
     Normality', Technometrics, 1975, pages 111-117.



				 July 20, 2023		    unimed(3m_datapac)
unipdf(3m_datapac)					    unipdf(3m_datapac)



NAME
  unipdf(3f) - [M_datapac:PROBABILITY_DENSITY] trivially compute the Uniform
  probability density function


SYNOPSIS
  SUBROUTINE UNIPDF(X,Pdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Pdf


DESCRIPTION
  UNIPDF(3f) computes the probability density function value for the uniform
  (rectangular) distribution on the unit interval (0,1).

  This distribution has mean = 0.5 and standard deviation = sqrt(1/12) =
  0.28867513. this distribution has the probability density function

	 f(X) = 1

  That is, trivially no matter what the input the output is 1.

INPUT ARGUMENTS
  X The REAL value at which the probability density function is to be
    evaluated. X should be between 0 and 1, inclusively.

OUTPUT ARGUMENTS
  PDF
    The REAL probability density function value.

EXAMPLES
  Sample program:

     program demo_unipdf
     !@(#) line plotter graph of probability density function
     use M_datapac, only : unipdf, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('unipdf')
	x=[(real(i)/10.0,i=0,10,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call unipdf( x(i), y(i) )
	enddo
	write(*,*)y
     end program demo_unipdf

  Results:

	1.00  1.000000	1.000000  1.000000  1.000000
	1.00  1.000000	1.000000  1.000000  1.000000
	1.00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     57-74.



				 July 20, 2023		    unipdf(3m_datapac)
uniplt(3m_datapac)					    uniplt(3m_datapac)



NAME
  uniplt(3f) - [M_datapac:LINE_PLOT] generate a Uniform probability plot (line
  printer graph)


SYNOPSIS
  SUBROUTINE UNIPLT(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  UNIPLT(3f) generates a uniform probability plot.

  The prototype uniform distribution used herein is defined on the unit
  interval (0,1). This distribution has mean = 0.5 and standard deviation =
  sqrt(1/12) = 0.28867513.

  This distribution has the probability density function

	 f(X) = 1

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The uniform probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the uniform distribution.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

INPUT ARGUMENTS
  X The  vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

OUTPUT
  A one-page uniform probability plot.

EXAMPLES
  Sample program:

     program demo_uniplt
     use M_datapac, only : uniplt, label
     implicit none
     call label('uniplt')
     ! call uniplt(x,y)
     end program demo_uniplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army REsearch
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     57-74.



				 July 20, 2023		    uniplt(3m_datapac)
unippf(3m_datapac)					    unippf(3m_datapac)



NAME
  unippf(3f) - [M_datapac:PERCENT_POINT] compute the Uniform percent point
  function


SYNOPSIS
  SUBROUTINE UNIPPF(P,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  UNIPPF(3f) computes the percent point function value for the uniform
  (rectangular) distribution on the unit interval (0,1).

  This distribution has mean = 0.5 and standard deviation = sqrt(1/12) =
  0.28867513. This distribution has the probability density function

	 f(X) = 1

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0) at which the percent point function is to
    be evaluated.

OUTPUT ARGUMENTS
  PPF
    The percent point function value.

EXAMPLES
  Sample program:

     program demo_unippf
     use M_datapac, only : unippf, label
     implicit none
	call label('unippf')
     ! call unippf(x,y)
     end program demo_unippf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     57-74.



				 July 20, 2023		    unippf(3m_datapac)
uniran(3m_datapac)					    uniran(3m_datapac)



NAME
  uniran(3f) - [M_datapac:RANDOM] generate Uniform random numbers


SYNOPSIS
  SUBROUTINE UNIRAN(N,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  UNIRAN(3f) generates a random sample of size N from the uniform
  (rectangular) distribution on the unit interval (0,1).

  This distribution has mean = 0.5 and standard deviation = sqrt(1/12) =
  0.28867513. This distribution has the probability density function

	 f(X) = 1


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer iseed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the rectangular distribution on (0,1) will be placed.

EXAMPLES
  Sample program:

     program demo_uniran
     use M_datapac, only : uniran, plotxt, sort, label
     implicit none
     integer,parameter :: n=400
     real :: x(n)
     integer :: iseed
	call label('uniran')
	iseed=1234
	call UNIRAN(n,Iseed,X)
	call plotxt(x,n) ! plot random values
	call sort(x,n,x) ! sort values
	call plotxt(x,n) ! should display the f(x)=1 nature
			 ! of the distribution
     end program demo_uniran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.9982013E+00 -	 X    X 	  X		   X  X    X X
       0.9566447E+00 I		X    XX       X XX XXXX X	XX
       0.9150882E+00 I	   X  XXXX  X  XXXX X  X X X  X   XX X	       X
       0.8735316E+00 I	 XX	 XXX XX    XXXXXX X    X   X  X   X
       0.8319750E+00 I	     XXX  X   X  X  X X      XX     X  X     X
       0.7904184E+00 I	 XXX	   XX	 X   X		  X X	 X   XXX
       0.7488618E+00 -	 X XX X X X  X	   X	 X   X	    X X   XXX  X
       0.7073053E+00 I	X      X  X  X	X   X  X  X  X	 X X	      X
       0.6657487E+00 I	    X	  XXX	X  XX  XXX X   X   X  X X    X	X
       0.6241921E+00 I	X  X	X   X	 XX  X		   X   X     X
       0.5826355E+00 I	    X	     X	X	   XX X X	X X X
       0.5410789E+00 I	    XX	 X     XX X	 X     XXX XX X       X
       0.4995224E+00 -	 X    X        XX	  X  XXX     XX
       0.4579658E+00 I	XXX   X  XXX	 X X  X XX XX X  X	     X	X
       0.4164092E+00 I	   XX X  X	X X	  X	  X	 X  X X
       0.3748527E+00 I	       XX XX  XX   X X	 XX XX XX X	      X
       0.3332961E+00 I	 X  XXX 	 X X  X 	X X  XXXX  X  X
       0.2917395E+00 I		X  X	X   X X    X XX 	XX XX  X
       0.2501829E+00 -	  XX	   XXX X     X	     X	 X   XX XXXX   X
       0.2086263E+00 I	X  X X	X	  X	X     XX    X	    X  XX
       0.1670697E+00 I	  X  X X      XX X   XX     XX XXX   X	 X XXX	X
       0.1255132E+00 I		 X XXX X  X		  X    X XX X
       0.8395660E-01 I	 X X X	 X    XX    X X X X	X X	    X XX
       0.4240000E-01 I	  X    XX    X	    X  X X X	      X    X X	X
       0.8433913E-03 -	       X		       X X     X  X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1008E+03  0.2005E+03  0.3002E+03  0.4000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.9982013E+00 -						       XX
       0.9566447E+00 I						     XXX
       0.9150882E+00 I						  XXXX
       0.8735316E+00 I						XXX
       0.8319750E+00 I					      XXX
       0.7904184E+00 I					    XXX
       0.7488618E+00 -					  XXX
       0.7073053E+00 I					XXX
       0.6657487E+00 I				     XXX
       0.6241921E+00 I				    XX
       0.5826355E+00 I				  XXX
       0.5410789E+00 I				XXX
       0.4995224E+00 -			       XX
       0.4579658E+00 I			    XXXX
       0.4164092E+00 I			   XX
       0.3748527E+00 I			 XXX
       0.3332961E+00 I		      XXX
       0.2917395E+00 I		     XX
       0.2501829E+00 -		  XXXX
       0.2086263E+00 I		 XX
       0.1670697E+00 I	      XXXX
       0.1255132E+00 I	    XXX
       0.8395660E-01 I	  XXX
       0.4240000E-01 I	 XX
       0.8433913E-03 -	X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1008E+03  0.2005E+03  0.3002E+03  0.4000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

WRITTEN BY
  •  James Blue

	      Scientific Computing Division
	      Center for Applied Mathematics
	      National Bureau of Standards
	      Washington, D. C. 20234


  •  David Kahaner

	      Scientific Computing Division
	      Center for Applied Mathematics
	      National Bureau of Standards


  •  George Marsaglia

	      Computer Science Department
	      Washington State University


  •  James J. Filliben

	      Statistical Engineering Division
	      Center for Applied Mathematics
	      National Bureau of Standards


MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Marsaglia G., "Comments on the Perfect Uniform Random Number Generator",
     Unpublished Notes, Wash S. U.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     57-74.



				 July 20, 2023		    uniran(3m_datapac)
unisf(3m_datapac)					     unisf(3m_datapac)



NAME
  unisf(3f) - [M_datapac:SPARSITY] compute the Uniform sparsity function


SYNOPSIS
  SUBROUTINE UNISF(P,Sf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Sf


DESCRIPTION
  UNISF(3f) computes the sparsity function value for the uniform (rectangular)
  distribution on the unit interval (0,1).

  This distribution has mean = 0.5 and standard deviation = sqrt(1/12) =
  0.28867513.

  This distribution has the probability density function f(X) = 1.

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of P rather than X).

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0) at which the sparsity function is to be
    evaluated.

OUTPUT ARGUMENTS
  SF
    The sparsity function value.

EXAMPLES
  Sample program:

     program demo_unisf
     use M_datapac, only : unisf, label
     implicit none
	call label('unisf')
     ! call unisf(x,y)
     end program demo_unisf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. DIssertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     57-74.



				 July 20, 2023		     unisf(3m_datapac)
var(3m_datapac) 					       var(3m_datapac)



NAME
  var(3f) - [M_datapac:STATISTICS] compute the sample variance of a vector of
  observations


SYNOPSIS
  SUBROUTINE VAR(X,N,Iwrite,Xvar)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in) :: N
	 INTEGER,intent(in) :: Iwrite
	 REAL(kind=wp),intent(out) :: Xvar


DESCRIPTION
  VAR(3f) computes the sample variance (with denominator N-1) of the data in
  the input vector X.

  The sample variance = (the sum of the squared deviations about the sample
  mean)/(N-1).

  Variance is the expectation of the squared deviation of a random variable
  from its population mean or sample mean. Variance is a measure of
  dispersion, meaning it is a measure of how far a set of numbers is spread
  out from their average value.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample variance as it is computed; or (if set to some integer value not
    equal to 0), like, say, 1) will cause the printing of the sample variance
    at the time it is computed.

OUTPUT ARGUMENTS
  XVAR
    The value of the computed sample variance (with denominator N-1).

EXAMPLES
  Sample program:

     program demo_var
     use M_datapac, only : var, label
     implicit none
     real,allocatable :: x(:)
     real :: Xvar
	call label('var')
	x = [46.0, 69.0, 32.0, 60.0, 52.0, 41.0]
	call VAR(X,size(x),1,Xvar)
	write(*,*)merge('GOOD','BAD ',Xvar == 177.2), Xvar
     end program demo_var

  Results:

      The sample variance of the 6 observations is  0.17720000E+03
      GOOD   177.2000


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, page 44.

  •  Dixon and Massey, Introduction to Statistical Analysis, Edition 2, 1957,
     page 38.

  •  Mood and Grable, 'Introduction to the Theory of Statistics, Edition 2,
     1963, page 171.



				 July 20, 2023		       var(3m_datapac)
weib(3m_datapac)					      weib(3m_datapac)



NAME
  weib(3f) - [M_datapac:ANALYSIS] perform a Weibull distribution analysis
  (Weibull PPCC analysis)


SYNOPSIS
  SUBROUTINE WEIB(X,N)

DESCRIPTION
  WEIB(3f) performs a Weibull distribution analysis on the data in the input
  vector X.

  This analysis consists of determining that particular Weibull distribution
  which best fits the data set.

  The goodness of fit criterion is the maximum probability plot correlation
  coefficient criterion.

  After the best-fit distribution is determined, estimates are computed and
  printed out for the location and scale parameters.

  Two probability plots are also printed out-- the best-fit Weibull
  probability plot and an extreme value type 1 probability plot (this is due
  to the fact that as the Weibull parameter gamma approaches infinity, the
  Weibull distribution approaches the extreme value type 1 distribution).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_weib
     use M_datapac, only : weib
     implicit none
     ! call weib(x,y)
     end program demo_weib

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCE
  •  Filliben (1972), 'Techniques for Tail Length Analysis', Proceedings of
     the Eighteenth Conference on the Design of Experiments in Army Research
     and Testing, pages 425-450.

  •  Filliben, 'The Percent Point Function', UNpublished Manuscript.

  •  Johnson and Kotz (1970), Continuous Univariate Distributions-1, pages
     250-271.



				 July 20, 2023		      weib(3m_datapac)
weicdf(3m_datapac)					    weicdf(3m_datapac)



NAME
  weicdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Weibull
  cumulative distribution function


SYNOPSIS
  SUBROUTINE WEICDF(X,Gamma,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  WEICDF(3f) computes the cumulative distribution function value for the
  Weibull distribution with REAL tail length parameter = GAMMA.

  The Weibull distribution used herein is defined for all positive X, and has
  the probability density function

	 f(X) = GAMMA * (X**(GAMMA-1)) * exp(-(X**GAMMA))


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be positive ( >0 )

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the Weibull distribution

EXAMPLES
  Sample program:

     program demo_weicdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : weicdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     real	       :: gamma
     integer	       :: i
	call label('weicdf')
	x=[((real(i)+epsilon(0.0))/30.0,i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	gamma=12.2
	do i=1,size(x)
	   call weicdf(X(i),Gamma,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_weicdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.3333333E+01 -							X
       0.3194444E+01 I							X
       0.3055556E+01 I							X
       0.2916667E+01 I							X
       0.2777778E+01 I							X
       0.2638889E+01 I							X
       0.2500000E+01 -							X
       0.2361111E+01 I							X
       0.2222222E+01 I							X
       0.2083333E+01 I							X
       0.1944444E+01 I							X
       0.1805556E+01 I							X
       0.1666667E+01 -							X
       0.1527778E+01 I							X
       0.1388889E+01 I							X
       0.1250000E+01 I							X
       0.1111111E+01 I						   X  X X
       0.9722223E+00 I			 X     X      X      X
       0.8333335E+00 -	  XX X	X   X
       0.6944444E+00 I	XX
       0.5555556E+00 I	X
       0.4166667E+00 I	X
       0.2777779E+00 I	X
       0.1388891E+00 I	X
       0.3973643E-08 -	X
			I-----------I-----------I-----------I-----------I
		 0.0000E+00  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     250-271.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 124.



				 July 20, 2023		    weicdf(3m_datapac)
weiplt(3m_datapac)					    weiplt(3m_datapac)



NAME
  weiplt(3f) - [M_datapac:LINE_PLOT] generate a Weibull probability plot (line
  printer graph)


SYNOPSIS
  SUBROUTINE WEIPLT(X,N,Gamma)

DESCRIPTION
  WEIPLT(3f) generates a weibull probability plot (with tail length parameter
  value = GAMMA).

  The prototype weibull distribution used herein is defined for all positive
  X, and has the probability density function

	 f(x) = gamma * (x**(gamma-1)) * exp(-(x**gamma))

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The Weibull probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the Weibull distribution with tail length parameter value = GAMMA.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_weiplt
     use M_datapac, only : weiplt
     implicit none
     ! call weiplt(x,y)
     end program demo_weiplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     250-271.



				 July 20, 2023		    weiplt(3m_datapac)
weippf(3m_datapac)					    weippf(3m_datapac)



NAME
  weippf(3f) - [M_datapac:PERCENT_POINT] compute the Weibull percent point
  function


SYNOPSIS
  SUBROUTINE WEIPPF(P,Gamma,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  WEIPPf(3f) computes the percent point function value for the Weibull
  distribution with REAL tail length parameter = GAMMA.

  The Weibull distribution used herein is defined for all positive X, and has
  the probability density function

	 f(X) = GAMMA * (X**(GAMMA-1)) * exp(-(X**GAMMA))

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (inclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  PPF
    The percent point function value for the Weibull distribution

EXAMPLES
  Sample program:

     program demo_weippf
     !@(#) line plotter graph of function
     use M_datapac, only : weippf, plott, label
     implicit none
     integer,parameter :: n=200
     real	       :: x(n), y(n)
     real	       :: gamma
     integer	       :: i
	gamma=2.0
	call label('weippf')
	x=[(real(i)/real(n+1),i=1,n)]
	do i=1,n
	   call weippf(x(i),gamma,y(i))
	enddo
	call plott(x,y,n)
     end program demo_weippf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.9950249E+00 -						XX X X	X
       0.9537728E+00 I					  XXXXXX
       0.9125207E+00 I				       XXXX
       0.8712686E+00 I				    XXX
       0.8300166E+00 I				  XXX
       0.7887645E+00 I				 XX
       0.7475125E+00 -			       XX
       0.7062603E+00 I			      XX
       0.6650083E+00 I			    XX
       0.6237562E+00 I			   XX
       0.5825042E+00 I			  XX
       0.5412520E+00 I			 XX
       0.5000000E+00 -			XX
       0.4587479E+00 I		       XX
       0.4174958E+00 I		      XX
       0.3762438E+00 I		     XX
       0.3349917E+00 I		    XX
       0.2937396E+00 I		   XX
       0.2524875E+00 -		  XX
       0.2112355E+00 I		XX
       0.1699834E+00 I	       XX
       0.1287313E+00 I	      XX
       0.8747923E-01 I	    XXX
       0.4622716E-01 I	  XXX
       0.4975124E-02 -	XXX
			I-----------I-----------I-----------I-----------I
		 0.7062E-01  0.6287E+00  0.1187E+01  0.1745E+01  0.2303E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     250-271.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 124.



				 July 20, 2023		    weippf(3m_datapac)
weiran(3m_datapac)					    weiran(3m_datapac)



NAME
  weiran(3f) - [M_datapac:RANDOM] generate Weibull random numbers


SYNOPSIS
  SUBROUTINE WEIRAN(N,Gamma,Iseed,X)

	 INTEGER       :: N
	 REAL(kind=wp) :: Gamma
	 INTEGER       :: Iseed
	 REAL(kind=wp) :: X(:)


DESCRIPTION
  WEIRAN(3f) generates a random sample of size N from the Weibull distribution
  with tail length parameter value = GAMMA.

  The prototype Weibull distribution used herein is defined for all positive
  X, and has the probability density function

	 f(X) = GAMMA * (X**(GAMMA-1)) * exp(-(X**GAMMA)).


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  GAMMA
    The value of the tail length parameter. gamma should be positive.

  ISEED
    An integer iseed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    will be placed.

EXAMPLES
  Sample program:

     program demo_weiran
     use M_datapac, only : weiran
     implicit none
     ! call weiran(x,y)
     end program demo_weiran

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, the Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     250-271.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 128.



				 July 20, 2023		    weiran(3m_datapac)
wind(3m_datapac)					      wind(3m_datapac)



NAME
  wind(3f) - [M_datapac:STATISTICS] compute the sample Winsorized mean of a
  vector of observations


SYNOPSIS
  SUBROUTINE WIND(X,N,P1,P2,Iwrite,Xwind)

DESCRIPTION
  WIND(3f) computes the sample windsorized mean of the data in the input
  vector X.

  The windsorizing is such that the lower 100*p1 % of the data is replaced by
  the smallest non-windsorized value, and the upper 100*p2 % of the data is
  windsorized. replaced by the largest non-windsorized value.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_wind
     use M_datapac, only : wind
     implicit none
     ! call wind(x,y)
     end program demo_wind

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  David, Order Statistics, 1970, pages 126-130, 136.

  •  Crow and Siddiqui, 'Robust Estimation of Location', Journal of the
     American Statistical Association, 1967, pages 357, 387.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University, 1969).



				 July 20, 2023		      wind(3m_datapac)
plot7(3m_datapac)					     plot7(3m_datapac)



NAME
  plot7(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters


SYNOPSIS
  SUBROUTINE PLOT7(Y,X,Char,N,Ymin,Ymax,Xmin,Xmax)

DESCRIPTION
  PLOT7(3f) yields a one-page printer plot of Y(i) versus X(i):

    1.	With special plot characters; and

    2.	With the vertical (y) axis min and max and the horizontal (x) axis min
	and max values specified by the data analyst.

  The 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from Y and X) into the
  plot.

  The plot character used at the i-th plotting position (that is, at the
  coordinate (X(i),Y(i))) will be

    1 if Char(i) is between
      0.5 and  1.5

    2 if Char(i) is between
      1.5 and  2.5 .  .  .

    9 if Char(i) is between
      8.5 and  9.5

    0 if Char(i) is between
      9.5 and 10.5 a if Char(i) is between 10.5 and 11.5 b if Char(i) is
      between 11.5 and 12.5 c if Char(i) is between 12.5 and 13.5 .  .	.  w
      if Char(i) is between 32.5 and 33.5 x if Char(i) is between 33.5 and
      34.5 y if Char(i) is between 34.5 and 35.5 z if Char(i) is between 35.5
      and 36.5 x if Char(i) is any value outside the range

      0.5 to
	36.5.

  The use of the YMIN, YMAX, XMIN, and XMAX specifications allows the data
  analyst to control fully the plot axis limits, so as, for example, to zero-
  in on an interesting sub-region of a previous plot.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_plot7
     use M_datapac, only : plot7
     implicit none
     ! call plot7(x,y)
     end program demo_plot7

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Statistical Analysis of Interlab Fatigue Time Data',
     Unpublished Manuscript (Available from Author) Presented at the American
     Statistical Association, New York City, December 27-30, 1973.



				 July 20, 2023		     plot7(3m_datapac)
count(3m_datapac)					     count(3m_datapac)



NAME
  count(3f) - [M_datapac:STATISTICS] compute the number of observations
  between a minimum and a maximum value


SYNOPSIS
  SUBROUTINE COUNT(X,N,Xmin,Xmax,Iwrite,Xcount)

DESCRIPTION
  COUNT(3f) computes the number of observations between xmin and xmax
  (inclusively) in the input vector x.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_count
     use M_datapac, only : count
     implicit none
     ! call count(x,y)
     end program demo_count

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  snedecor and cochran, statistical methods, edition 6, 1967, pages
     207-213.

  •  dixon and massey, introduction to statistical analysis, edition 2, 1957,
     pages 81-82, 228-231.



				 July 20, 2023		     count(3m_datapac)
decomp(3m_datapac)					    decomp(3m_datapac)



NAME
  decomp(3f) - [M_datapac:STATISTICS] decomposes a weighted data matrix
  (utility routine used by other routines)


SYNOPSIS
  SUBROUTINE DECOMP(N,K,Eta,Tol,Irank,Insing)

DESCRIPTION
  decomp(3f) decomposes the weighted data matrix q which originally = the n by
  k data matrix x times the square root of the weights (in w).

  the original q is decomposed into a new q times the inverse of a diagonal
  matrix d times the diagonal matrix d times an upper triangular matrix r.

  the new n by k q has orthogonal columns.

  a second output from decomp(3f) is the rank and status (non-singular or
  singular) of the data matrix x.

  a third output from decomp(3f) is the numerically optimal pivot points for
  the decomposition.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_decomp
     use M_datapac, only : decomp
     implicit none
     ! call decomp(x,y)
     end program demo_decomp

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    decomp(3m_datapac)
define(3m_datapac)					    define(3m_datapac)



NAME
  define(3f) - [M_datapac:VECTOR_OPERATION] set all elements of a vector equal
  to a specified constant


SYNOPSIS
  SUBROUTINE DEFINE(X,N,Xnew)

	 REAL(kind=wp),intent(out)  :: X(:)
	 INTEGER,intent(in)	    :: N
	 REAL(kind=wp),intent(in)   :: Xnew


DESCRIPTION
  DEFINE(3f) sets all of the elements in the REAL vector X equal to XNEW.

  DEFINE(3f) is useful in defining a vector of constants.

  For example, if the data analyst wishes to treat the equal weights case in
  doing a polynomial regression, this could be done by defining as, say, 1.0
  the input weight vector W to the datapac POLY(3f) subroutine; such defining
  could be done by use of the DEFINE(3f) subroutine with XNEW = 1.0.

  Except fo the verbose output, this procedure is deprecated as this can
  easily be done using Fortran array syntax.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  XNEW
    The value to which all of the observations in the vector X will be set.

OUTPUT
  X The vector X every element of which will be equal to XNEW.	Also, 3 lines
    of summary information will be generated indicating

    1.	What the sample size was (N)

    2.	What the defining constant was (XNEW)

EXAMPLES
  Sample program:

     program demo_define
     use M_datapac, only : define
     implicit none
     real :: x(4)
	call define(x,size(x),3.33333)
	write(*,'(*(g0.4,1x))')x
     end program demo_define

  Results:

      Output from the DEFINE(3f) subroutine--
	     The input number of observations is 4
	     The defining constant is 0.33333299E+01
  3.333 3.333 3.333 3.333

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    define(3m_datapac)
delete(3m_datapac)					    delete(3m_datapac)



NAME
  delete(3f) - [M_datapac:VECTOR_OPERATION] delete all elements of a vector
  within some specified interval


SYNOPSIS
  SUBROUTINE DELETE(X,N,Xmin,Xmax,Newn)

DESCRIPTION
  delete(3f) deletes all observations in the REAL vector x which are inside
  the closed (inclusive) interval defined by xmin and xmax, while retaining
  all observations outside of this interval.

  thus all observations in x which are larger than or equal to xmin and
  smaller than or equal to xmax are deleted from x.

  delete(3f) (and the replac and retain subroutines) gives the data analyst
  the ability to easily 'clean up' a data set which has missing and/or
  outlying observations so that a more appropriate subsequent data analysis
  may be performed.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_delete
     use M_datapac, only : delete
     implicit none
     ! call delete(x,y)
     end program demo_delete

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    delete(3m_datapac)
dexcdf(3m_datapac)					    dexcdf(3m_datapac)



NAME
  dexcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the double
  exponential cumulative distribution function


SYNOPSIS
  SUBROUTINE DEXCDF(X,Cdf)

	 real(kind=wp),intent(in)  :: X
	 real(kind=wp),intent(out) :: Cdf


DESCRIPTION
  DEXCDF(3f) computes the cumulative distribution function value for the
  double exponential (Laplace) distribution with mean = 0 and standard
  deviation = sqrt(2).

  This distribution is defined for all X and has the probability density
  function

	 f(x) = 0.5*exp(-abs(x))


INPUT ARGUMENTS
  X The REAL value at which the cumulative distribution function is to be
    evaluated.

OUTPUT ARGUMENTS
  CDF
    The REAL cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_dexcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : dexcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('dexcdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call dexcdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_dexcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -							X
       0.9166666E+02 I							X
       0.8333334E+02 I							X
       0.7500000E+02 I							X
       0.6666667E+02 I							X
       0.5833334E+02 I							X
       0.5000000E+02 -							X
       0.4166667E+02 I						       XX
       0.3333334E+02 I						       X
       0.2500000E+02 I						     XXX
       0.1666667E+02 I						 XXXXX
       0.8333336E+01 I					 X XXXXXXX
       0.0000000E+00 -			X X X X X X X X X
      -0.8333328E+01 I	       XXXXXXX X
      -0.1666666E+02 I	   XXXXX
      -0.2499999E+02 I	 XXX
      -0.3333333E+02 I	 X
      -0.4166666E+02 I	XX
      -0.5000000E+02 -	X
      -0.5833333E+02 I	X
      -0.6666666E+02 I	X
      -0.7500000E+02 I	X
      -0.8333333E+02 I	X
      -0.9166666E+02 I	X
      -0.1000000E+03 -	X
			I-----------I-----------I-----------I-----------I
		 0.2270E-04  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     22-36.



				 July 20, 2023		    dexcdf(3m_datapac)
dexpdf(3m_datapac)					    dexpdf(3m_datapac)



NAME
  dexpdf(3f) - [M_datapac:PROBABILITY_DENSITY] compute the double exponential
  probability density function


SYNOPSIS
  SUBROUTINE DEXPDF(X,Pdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Pdf


DESCRIPTION
  DEXPDF(3f) computes the probability density function value for the double
  exponential (Laplace) distribution with mean = 0 and standard deviation =
  sqrt(2).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = 0.5*exp(-abs(X))


INPUT ARGUMENTS
  X The value at which the probability density function is to be evaluated.

OUTPUT ARGUMENTS
  PDF
    The probability density function value.

EXAMPLES
  Sample program:

     program demo_dexpdf
     !@(#) line plotter graph
     !@(#) of probability density function for Laplace distribution
     use M_datapac, only : dexpdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('dexpdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call dexpdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_dexpdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     22-36.



				 July 20, 2023		    dexpdf(3m_datapac)
dexplt(3m_datapac)					    dexplt(3m_datapac)



NAME
  dexplt(3f) - [M_datapac:LINE_PLOT] generate a double exponential probability
  plot


SYNOPSIS
  SUBROUTINE DEXPLT(X,N)

DESCRIPTION
  dexplt(3f) generates a double exponential (laplace) probability plot.

  the prototype double exponential distribution used herein has mean = 0 and
  standard deviation = sqrt(2).

  this distribution is defined for all x and has the probability density
  function

	 f(x) = 0.5 * exp(-abs(x)).

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the double exponential probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the double exponential distribution.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_dexplt
     use M_datapac, only : dexplt
     implicit none
     ! call dexplt(x,y)
     end program demo_dexplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--2, 1970, pages
	22-36.



				 July 20, 2023		    dexplt(3m_datapac)
dexppf(3m_datapac)					    dexppf(3m_datapac)



NAME
  dexppf(3f) - [M_datapac:PERCENT_POINT] compute the double exponential
  percent point function


SYNOPSIS
  SUBROUTINE DEXPPF(P,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  DEXPPF(3f) computes the percent point function value for the double
  exponential (laplace) distribution with mean = 0 and standard deviation =
  sqrt(2).

  This distribution is defined for all x and has the probability density
  function

	f(x) = 0.5*exp(-abs(x)).

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0, EXCLUSIVELY) at which the percent point
    function is to be evaluated.

OUTPUT ARGUMENTS
  PPF
    The percent point function value.

EXAMPLES
  Sample program:

     program demo_dexppf
     use M_datapac, only : dexppf
     implicit none
     ! call dexppf(x,y)
     end program demo_dexppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     22-36.



				 July 20, 2023		    dexppf(3m_datapac)
dexran(3m_datapac)					    dexran(3m_datapac)



NAME
  dexran(3f) - [M_datapac:RANDOM] generate double exponential random numbers


SYNOPSIS
  subroutine dexran(N,Istart,X)

	 integer,intent(in)    :: N
	 integer,intent(inout) :: Istart
	 real(kind=wp)	       :: X(:)


DESCRIPTION
  DEXRAN(3f) generates a random sample of size n from the double exponential
  (Laplace) distribution with mean = 0 and standard deviation = sqrt(2).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = 0.5*exp(-abs(X))


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISTART
    An integer flag code which (if set to 0) will start the generator over and
    hence produce the same random sample over and over again upon successive
    calls to this subroutine within a run; or (if set to some integer value
    not equal to 0, like, say, 1) will allow the generator to continue from
    where it stopped and hence produce different random samples upon
    successive calls to this subroutine within a run.

OUTPUT ARGUMENTS
  X A REAL vector (of dimension at least N) into which the generated random
    sample will be placed.

EXAMPLES
  Sample program:

     program demo_dexran
     use M_datapac, only : dexran
     implicit none
     ! call dexran(x,y)
     end program demo_dexran

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. dissertation, Princeton
     University), 1969, page 231.

  •  Filliben, 'The percent point function', (Unpublished manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     22-36.



				 July 20, 2023		    dexran(3m_datapac)
dexsf(3m_datapac)					     dexsf(3m_datapac)



NAME
  dexsf(3f) - [M_datapac:SPARSITY] compute the double exponential sparsity
  function


SYNOPSIS
  SUBROUTINE DEXSF(P,Sf)

	 REAL(kind=wp),intent(in) :: P
	 REAL(kind=wp),intent(out) :: Sf


DESCRIPTION
  DEXSF(3f) computes the sparsity function value for the double exponential
  (Laplace) distribution with mean = 0 and standard deviation = sqrt(2).

  This distribution is defined for all x and has the probability density
  function

	 f(x) = 0.5*exp(-abs(x))

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of P rather than X).

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0 exclusively) at which the sparsity function
    is to be evaluated.

OUTPUT ARGUMENTS
  SF
    The sparsity function value.

EXAMPLES
  Sample program:

     program demo_dexsf
     use M_datapac, only : dexsf
     implicit none
     ! call dexsf(x,y)
     end program demo_dexsf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (UNpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     22-36.



				 July 20, 2023		     dexsf(3m_datapac)
discr2(3m_datapac)					    discr2(3m_datapac)



NAME
  discr2(3f) - [M_datapac:STATISTICS] bin the elements of a vector (output
  vector contains class midpoints)


SYNOPSIS
  SUBROUTINE DISCR2(X,N,Numcla,Y)

DESCRIPTION
  discr2(3f) 'discretizes' the data of the REAL vector x into numcla classes.

  all values in the vector x within a given class will be mapped into the
  midpoint of that class.

  the sample minimum and sample maximum are automatically computed internally
  and the class width (xdel) is computed as the (sample max - sample
  min)/numcla.

  the first class interval is from the sample min to the sample min + xdel;
  the second class interval is from the sample min + xdel to the sample min +
  2*xdel;

  the last class interval is from the sample max - xdel to the sample max. The
  use of discr2(3f) (and the discre and discr3 subroutines) gives the data
  analyst the capability of constructing a discrete variate from a continuous
  one.

  the resulting discrete variate might then (for example) be analyzed in
  itself for gross structure, or for adherence to some theoretical discrete
  probability model, or the discrete variate might be used as a subset
  definition vector for some other variate.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_discr2
     use M_datapac, only : discr2
     implicit none
     ! call discr2(x,y)
     end program demo_discr2

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    discr2(3m_datapac)
discr3(3m_datapac)					    discr3(3m_datapac)



NAME
  discr3(3f) - [M_datapac:STATISTICS] bin the elements of a vector (output
  vector contains 1's, 2's, 3's, and so on)


SYNOPSIS
  SUBROUTINE DISCR3(X,N,Numcla,Y)

DESCRIPTION
  discr3(3f) 'discretizes' the data on the REAL vector x into numcla classes.

  all values in the vector x within a given class will be mapped into the
  class number (1, 2, ... , numcla). thus all the elements in the lowermost
  class will be mapped into the value 1.0; all the elements of x in the next
  higher class will be mapped into 2.0; etc.

  the sample minimum and sample maximum are automatically computed internally
  and the class width (xdel) is computed as the (sample max

  •  sample min)/numcla. the first class interval is from the sample min to
     the sample min + xdel; the second class interval is from the sample min +
     xdel to the sample min + 2*xdel;

  the last class interval is from the sample max - xdel to the sample max. the
  use of discr3(3f) (and the discre and discr2 subroutines) gives the data
  analyst the capability of constructing a discrete variate from a continuous
  one.

  the resulting discrete variate might then (for example) be analyzed in
  itself for gross structure, or for adherence to some theoretical discrete
  probability model, or the discrete variate might be used as a subset
  definition vector for some other variate.

  this discr3 subroutine is particularly suited to this last purpose inasmuch
  as it output's 1's, 2's, etc. rather than midpoints.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_discr3
     use M_datapac, only : discr3
     implicit none
     ! call discr3(x,y)
     end program demo_discr3

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    discr3(3m_datapac)
discre(3m_datapac)					    discre(3m_datapac)



NAME
  discre(3f) - [M_datapac:STATISTICS] bin the elements of a vector (like
  DISCR2, but allows specification of min and max class limits)


SYNOPSIS
  SUBROUTINE DISCRE(X,N,Xmin,Xdel,Xmax,Y)

DESCRIPTION
  discre(3f) 'discretizes' the data of the REAL vector x.  the first class
  interval is from xmin to xmin + xdel; the second class interval is from
  xmin+ xdel to xmin + 2*xdel; etc.

  all values in the vector x within a given class will be mapped into the
  midpoint of that class.

  all values in the vector x smaller than xmin will be mapped into xmin -
  (xdel/2.0).

  all values in the vector x larger than xmax will be mapped into xmax +
  (xdel/2.0).

  the use of discre(3f) (and the discr2 and discr3 subroutines) gives the data
  analyst the capability of constructing a discrete variate from a continuous
  one.

  the resulting discrete variate might then (for example) be analyzed in
  itself for gross structure, or for adherence to some theoretical discrete
  probability model, or the discrete variate might be used as a subset
  definition vector for some other variate.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_discre
     use M_datapac, only : discre
     implicit none
     ! call discre(x,y)
     end program demo_discre

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    discre(3m_datapac)
dot(3m_datapac) 					       dot(3m_datapac)



NAME
  dot(3f) - [M_datapac:VECTOR_OPERATION] compute a dot product of two vectors


SYNOPSIS
  subroutine dot(A,B,Imin,Imax,Parpro,Dotpro)

      real(kind=wp),intent(in)	:: A(:), B(:), Parpro
      real(kind=wp),intent(out) :: Dotpro
      integer,intent(in)	:: Imax, Imin


DESCRIPTION
  To compute the dot product between 2 vectors A and B only elements IMIN
  through IMAX of the 2 vectors are considered. The computed dot product is
  added to the input value PARPRO to yield a final answer for DOTPRO.

  Note Fortran now has a dot product intrinsic called DOT_PRODUCT(3f).

INPUT OPTIONS
  A First vector

  B Second vector

  Imin
    First index in A and B to consider

  Imax
    Last index in A and B to consider

  Parpro
    Initial value to add the dot product to

OUTPUT OPTIONS
  Dotpro
    Dot product of A and B.

EXAMPLES
  Sample program:

     program demo_dot
     use M_datapac, only : dot, label
     real, dimension(3) :: a, b
     real :: dotpro , parpro
     integer i , imax , imin
	call label('dot')
	a = [ 1.0, 2.0, 3.0 ]
	b = [ 4.0, 5.0, 6.0 ]
	imin=1
	imax=size(a)
	parpro=0.0
	call dot(a,b,imin,imax,parpro,dotpro)
	write(*,*)a
	write(*,*)b
	write(*,*)dotpro, dot_product(a,b), dotpro == dot_product(a,b)
     end program demo_dot

  Results:

	1.000000       2.000000       3.000000
	4.000000       5.000000       6.000000
	32.00000       32.00000     T


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		       dot(3m_datapac)
ev1cdf(3m_datapac)					    ev1cdf(3m_datapac)



NAME
  ev1cdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the extreme value
  type 1 (Gumbel) cumulative distribution function


SYNOPSIS
  SUBROUTINE EV1CDF(X,Cdf)

	 REAL(kind=wp),intent(in) :: X
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  EV1CDF(3f) computes the cumulative distribution function value for the
  extreme value type 1 distribution.

  The extreme value type 1 distribution used herein has mean = Euler's number
  = 0.57721566 and standard deviation = pi/sqrt(6) = 1.28254983.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (exp(-X)) * (exp(-(exp(-X))))


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_ev1cdf
     use M_datapac, only : ev1cdf
     implicit none
     ! call ev1cdf(x,y)
     end program demo_ev1cdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     272-295.



				 July 20, 2023		    ev1cdf(3m_datapac)
ev1plt(3m_datapac)					    ev1plt(3m_datapac)



NAME
  ev1plt(3f) - [M_datapac:LINE_PLOT] generate a extreme value type 1 (Gumbel)
  probability plot


SYNOPSIS
  SUBROUTINE EV1PLT(X,N)

DESCRIPTION
  ev1plt(3f) generates an extreme value type 1 probability plot.

  the prototype extreme value type 1 distribution used here has mean = euler's
  number = 0.57721566 and standard deviation = pi/sqrt(6) = 1.28254983.

  this distribution is defined for all x and has the probability density
  function

	f(x) = (exp(-x)) * (exp(-(exp(-x))))

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the extreme value type 1 probability plot is useful in graphically testing
  the composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the extreme value type 1 distribution.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_ev1plt
     use M_datapac, only : ev1plt
     implicit none
     ! call ev1plt(x,y)
     end program demo_ev1plt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
	272-295.



				 July 20, 2023		    ev1plt(3m_datapac)
freq(3m_datapac)					      freq(3m_datapac)



NAME
  freq(3f) - [M_datapac:STATISTICS] compute the sample frequency and
  cumulative sample frequency of a vector


SYNOPSIS
  SUBROUTINE FREQ(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  freq(3f) computes the sample frequency and sample cumulative frequency for
  the data in the input vector x.

INPUT ARGUMENTS
  X The  vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 15000.

OUTPUT
  Several (for large data sets) pages of automatic plots (with approximately
  55 values per page) consisting of an ordered listing of each distinct value
  in the data set along with the frequency of occurance of that value and the
  cumulative frequency.

EXAMPLES
  Sample program:

     program demo_freq
     use M_datapac, only : freq
     implicit none
     ! call freq(x,y)
     end program demo_freq

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  KENDALL AND STUART, THE ADVANCED THEORY OF STATISTICS, VOLUME 1, EDITION
     2, 1963, page 8.



				 July 20, 2023		      freq(3m_datapac)
gamcdf(3m_datapac)					    gamcdf(3m_datapac)



NAME
  gamcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the gamma
  cumulative distribution function


SYNOPSIS
  SUBROUTINE GAMCDF(X,Gamma,Cdf)

	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  GAMCDF(3f) computes the cumulative distribution function value for the gamma
  distribution with REAL tail length parameter = GAMMA.

  The Gamma distribution used herein has mean = GAMMA and standard deviation =
  sqrt(GAMMA).

  This distribution is defined for all positive X, and has the probability
  density function

	 f(X) = (1/constant) * (X**(GAMMA-1)) * exp(-X)

  Where the constant = the Gamma function evaluated at the value GAMMA.

  Note the mode of internal operations is DOUBLE PRECISION.

ACCURACY
  (On the UNIVAC 1108, EXEC 8 system at NBS)

     Compared to the known GAMMA = 1 (exponential) results, agreement
     was had out to 7 significant digits for all tested X.  The tested X
     values covered the entire range of the distribution--from the 0.00001
     percent point up to the 99.99999 percent point of the distribution.


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be positive.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the gamma distribution

EXAMPLES
  Sample program:

     program demo_gamcdf
     use M_datapac, only : gamcdf
     implicit none
     ! call gamcdf(x,y)
     end program demo_gamcdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  WILK, GNANADESIKAN, AND HUYETT, 'PROBABILITY PLOTS FOR THE GAMMA
     DISTRIBUTION', TECHNOMETRICS, 1962, pages 1-15, ESPECIALLY pages 3-5.

  •  NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS SERIES 55, 1964, page
     257, FORMULA 6.1.41.

  •  JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
     166-206.

  •  HASTINGS AND PEACOCK, STATISTICAL DISTRIBUTIONS--A HANDBOOK FOR STUDENTS
     AND PRACTITIONERS, 1975, pages 68-73.



				 July 20, 2023		    gamcdf(3m_datapac)
gamplt(3m_datapac)					    gamplt(3m_datapac)



NAME
  gamplt(3f) - [M_datapac:LINE_PLOT] generate a gamma probability plot


SYNOPSIS
  SUBROUTINE GAMPLT(X,N,Gamma)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N
	 REAL(kind=wp),intent(in) :: Gamma


DESCRIPTION
  GAMPLT(3f) generates a gamma probability plot (with tail length parameter
  value = GAMMA).

  The prototype gamma distribution used herein has mean = GAMMA and standard
  deviation = sqrt(GAMMA).

  This distribution is defined for all positive X, and has the probability
  density function

	 f(X) = (1/constant) * (X**(GAMMA-1)) * exp(-X)

  Where the constant = the gamma function evaluated at the value GAMMA.

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The gamma probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the gamma distribution with tail length parameter value = GAMMA.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

  GAMMA
    The value of the tail length parameter. Gamma should be positive.

OUTPUT
  A one-page gamma probability plot.

EXAMPLES
  Sample program:

     program demo_gamplt
     use M_datapac, only : gamplt
     implicit none
     ! call gamplt(x,y)
     end program demo_gamplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Wilk, Gnanadesikan, and Huyett, 'Probability Plots for the Gamma
     Distribution', Technometrics, 1962, pages 1-15.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     257, Formula 6.1.41.

  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     166-206.



				 July 20, 2023		    gamplt(3m_datapac)
gamppf(3m_datapac)					    gamppf(3m_datapac)



NAME
  gamppf(3f) - [M_datapac:PERCENT_POINT] compute the gamma percent point
  function


SYNOPSIS
  SUBROUTINE GAMPPF(P,Gamma,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  GAMPPF(3f) computes the percent point function value for the gamma
  distribution with REAL tail length parameter = GAMMA.

  The gamma distribution used herein has mean = GAMMA and standard deviation =
  sqrt(GAMMA). This distribution is defined for all positive X, and has the
  probability density function

	 f(X) = (1/constant) * (X**(GAMMA-1)) * exp(-X)

  where the constant = the gamma function evaluated at the value GAMMA.

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (exclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  PPF
    The percent point function value for the gamma distribution

EXAMPLES
  Sample program:

     program demo_gamppf
     use M_datapac, only : gamppf
     implicit none
     ! call gamppf(x,y)
     end program demo_gamppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Wilk, Gnanadesikan, and Huyett, 'Probability Plots for the Gamma
     Distribution', Technometrics, 1962, pages 1-15, especially pages 3-5.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     257, Formula 6.1.41.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     166-206.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 68-73.



				 July 20, 2023		    gamppf(3m_datapac)
gamran(3m_datapac)					    gamran(3m_datapac)



NAME
  gamran(3f) - [M_datapac:RANDOM] generate gamma random numbers


SYNOPSIS
  SUBROUTINE GAMRAN(N,Gamma,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  GAMRAN(3f) generates a random sample of size N from the gamma distribution
  with tail length parameter value = GAMMA.

  The prototype gamma distribution used herein has mean = GAMMA and standard
  deviation = sqrt(GAMMA). This distribution is defined for all positive X,
  and has the probability density function

	 f(X) = (1/constant) * (X**(GAMMA-1)) * exp(-X)

  where the constant is equal to the Gamma function evaluated at the value
  GAMMA.

ALGORITHM
  Generate N Gamma Distribution random numbers using Greenwood's Rejection
  Algorithm--

    1.	Generate a normal random number;

    2.	Transform the normal variate to an approximate gamma variate using the
	Wilson-Hilferty approximation (see the Johnson and Kotz reference,
	page 176);

    3.	Form the rejection function value, based on the probability density
	function value of the actual distribution of the pseudo-gamma variate,
	and the probability density function value of a true gamma variate.

    4.	Generate a uniform random number;

    5.	If the uniform random number is less than the rejection function
	value, then accept the pseudo-random number as a gamma variate; if the
	uniform random number is larger than the rejection function value,
	then reject the pseudo-random number as a gamma variate.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive. GAMMA
    should be larger than 1/3 (algorithmic restriction).

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    from the gamma distribution will be placed.

EXAMPLES
  Sample program:

     program demo_gamran
     use m_datapac, only : gamran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=4000
     real :: x(n)
     integer :: iseed
     real :: gamma
	call label('gamran')
	gamma=3.4
	iseed=12345
	call gamran(n,gamma,iseed,x)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_gamran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY)
			I-----------I-----------I-----------I-----------I
       0.1547529E+02 -		     X		  X
       0.1483860E+02 I
       0.1420192E+02 I
       0.1356523E+02 I				     X
       0.1292854E+02 I					 X
       0.1229185E+02 I					       X   X
       0.1165516E+02 -					    X
       0.1101848E+02 I		X			 X	 X
       0.1038179E+02 I	   XX  X      X   X	   X	   X   X   X
       0.9745100E+01 I	  X X  X     XX      X X   XX  X     XX       X X
       0.9108413E+01 I		X X X	   XX	  X    XXX	    XX
       0.8471725E+01 I	X X XX	XX    X  XXXXX XXX X   XX  X X X  X  XX X
       0.7835037E+01 -	X  XXX XX X  XXX  X XX XXXXXXX	XX XXXX XX X  XX
       0.7198349E+01 I	 X XXXXX  XXXXX  XXXX  X X XXX XXXXX XXX XXX X X
       0.6561661E+01 I	XXXXXXXXXX XXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXX
       0.5924973E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5288285E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.4651597E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.4014910E+01 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.3378222E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.2741534E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.2104846E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1468158E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.8314705E+00 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1947823E+00 -	 X X   X X  XX X X    X X XX XXXX X X	    X  XX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY)
			I-----------I-----------I-----------I-----------I
       0.1547529E+02 -							X
       0.1483860E+02 I
       0.1420192E+02 I
       0.1356523E+02 I							X
       0.1292854E+02 I							X
       0.1229185E+02 I							X
       0.1165516E+02 -							X
       0.1101848E+02 I							X
       0.1038179E+02 I							X
       0.9745100E+01 I							X
       0.9108413E+01 I						       XX
       0.8471725E+01 I						       X
       0.7835037E+01 -						      XX
       0.7198349E+01 I						      X
       0.6561661E+01 I						    XXX
       0.5924973E+01 I						  XXX
       0.5288285E+01 I					       XXXX
       0.4651597E+01 I					   XXXXX
       0.4014910E+01 -				      XXXXXX
       0.3378222E+01 I			       XXXXXXXX
       0.2741534E+01 I			XXXXXXXX
       0.2104846E+01 I		 XXXXXXXX
       0.1468158E+01 I	   XXXXXXX
       0.8314705E+00 I	XXXX
       0.1947823E+00 -	X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04
  ================================================================================
  ```

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Greenwood, 'A Fast generator for Gamma-Distributed Random Variables',
     Compstat 1974, Proceedings in Computational Statistics, Vienna,
     September, 1974, pages 19-27.

  •  Tocher, The Art of Simulation, 1963, pages 24-27.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, pages 36-37.

  •  Wilk, Gnanadesikan, and Huyett, 'Probability Plots for the Gamma
     Distribution', Technometrics, 1962, pages 1-15.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     166-206.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 68-73.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     952.



				 July 20, 2023		    gamran(3m_datapac)
geocdf(3m_datapac)					    geocdf(3m_datapac)



NAME
  geocdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the geometric
  cumulative distribution function


SYNOPSIS
  SUBROUTINE GEOCDF(X,P,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  GEOCDF(3f) computes the cumulative distribution function value at the REAL
  value X for the geometric distribution with precision precision 'Bernoulli
  probability' parameter = P.

  The geometric distribution used herein herein has mean = (1-P)/P and
  standard deviation = sqrt((1-P)/(P*P))).

  This distribution is defined for all non-negative integer X where X = 0, 1,
  2, ... . This distribution has the probability function

	 f(X) = P * (1-P)**X

  The geometric distribution is the distribution of the number of failures
  before obtaining 1 success in an indefinite sequence of Bernoulli (0,1)
  trials where the probability of success in a precision trial = P.

  Note that even though the input to this cumulative distribution function
  subroutine for this discrete distribution should (under normal
  circumstances) be a discrete integer value, the input variable X is REAL.  X
  has been specified as REAL so as to conform with the datapac convention that
  all input ****data**** (as opposed to sample size, for example) variables to
  all datapac subroutines are.

  This convention is based on the belief that

    1.	A mixture of modes (floating point versus integer) is inconsistent and
	an unnecessary complication in a data analysis; and

    2.	Floating point machine arithmetic (as opposed to integer arithmetic)
	is the more natural mode for doing data analysis.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative and integral-valued.

  P The value of the 'Bernoulli probability' parameter for the

    geometric distribution.
      P should be between 0.0 (exclusively) and 1.0 (exclusively).

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the geometric distribution

EXAMPLES
  Sample program:

     program demo_geocdf
     use M_datapac, only : geocdf
     implicit none
     ! call geocdf(x,y)
     end program demo_geocdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Feller, An Introduction to Probability Theory and its Applications,
     Volume 1, Edition 2, 1957, pages 155-157, 210.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     929.



				 July 20, 2023		    geocdf(3m_datapac)
geoplt(3m_datapac)					    geoplt(3m_datapac)



NAME
  geoplt(3f) - [M_datapac:LINE_PLOT] generate a geometric probability plot


SYNOPSIS
  SUBROUTINE GEOPLT(X,N,P)

DESCRIPTION
  geoplt(3f) generates a geometric probability plot (with 'bernoulli
  probability' parameter value = p).

  the geometric distribution used herein has mean = (1-p)/p and standard
  deviation = sqrt((1-p)/(p*p))). this distribution is defined for all non-
  negative integer x--x = 0, 1, 2, ... . this distribution has the probability
  function

	 f(x) = p * (1-p)**x.

  the geometric distribution is the distribution of the number of failures
  before obtaining 1 success in an indefinite sequence of bernoulli (0,1)
  trials where the probability of success in a precision trial = p.

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the geometric probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the geometric distribution with probability parameter
  value = p.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_geoplt
     use M_datapac, only : geoplt
     implicit none
     ! call geoplt(x,y)
     end program demo_geoplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  FELLER, AN INTRODUCTION TO PROBABILITY THEORY AND ITS APPLICATIONS,
     VOLUME 1, EDITION 2, 1957, pages 155-157, 210.

     •	NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS SERIES 55, 1964, page
	929.



				 July 20, 2023		    geoplt(3m_datapac)
geoppf(3m_datapac)					    geoppf(3m_datapac)



NAME
  geoppf(3f) - [M_datapac:PERCENT_POINT] compute the geometric percent point
  function


SYNOPSIS
  SUBROUTINE GEOPPF(P,Ppar,Ppf)

DESCRIPTION
  geoppf(3f) computes the percent point function value for the geometric
  distribution with REAL 'bernoulli probability' parameter = ppar.

  the geometric distribution used herein has mean = (1-ppar)/ppar and standard
  deviation = sqrt((1-ppar)/(ppar*ppar))).

  this distribution is defined for all non-negative integer x--x = 0, 1, 2,
  ... .

  this distribution has the probability function

	 f(x) = ppar * (1-ppar)**x.

  the geometric distribution is the distribution of the number of failures
  before obtaining 1 success in an indefinite sequence of bernoulli (0,1)
  trials where the probability of success in a precision trial = ppar.

  note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_geoppf
     use M_datapac, only : geoppf
     implicit none
     ! call geoppf(x,y)
     end program demo_geoppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FELLER, AN INTRODUCTION TO PROBABILITY THEORY AND ITS APPLICATIONS,
     VOLUME 1, EDITION 2, 1957, pages 155-157, 210.

  •  NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS SERIES 55, 1964, page
     929.



				 July 20, 2023		    geoppf(3m_datapac)
georan(3m_datapac)					    georan(3m_datapac)



NAME
  georan(3f) - [M_datapac:RANDOM] generate geometric random numbers


SYNOPSIS
  SUBROUTINE GEORAN(N,P,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: P
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  GEORAN(3f) generates a random sample of size N from the geometric
  distribution with REAL 'Bernoulli probability' parameter = P.

  The geometric distribution used herein has mean = (1-P)/P and standard
  deviation = sqrt((1-P)/(P*P))). This distribution is defined for all non-
  negative integer X-- X = 0, 1, 2, ... .

  This distribution has the probability function

  f(X) = P * (1-P)**X.

  The geometric distribution is the distribution of the number of failures
  before obtaining 1 success in an indefinite sequence of Bernoulli (0,1)
  trials where the probability of success in a precision trial = P.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer iseed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

  P The value of the 'Bernoulli probability' parameter for the geometric
    distribution. P should be between 0.0 (exclusively) and 1.0 (exclusively).

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the geometric distribution will be placed.

EXAMPLES
  Sample program:

     program demo_georan
     use m_datapac, only : georan, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=4000
     real :: x(n)
     integer :: iseed
     real :: P
	call label('georan')
	P=0.2
	iseed=12345
	call georan(N,P,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_georan

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.4500000E+02 -	 X
       0.4312500E+02 I
       0.4125000E+02 I
       0.3937500E+02 I
       0.3750000E+02 I			 X
       0.3562500E+02 I
       0.3375000E+02 -				X
       0.3187500E+02 I					  X
       0.3000000E+02 I
       0.2812500E+02 I			X		       X
       0.2625000E+02 I		 X	  X	     X	    X	XX
       0.2437500E+02 I	 X	      X XX X	    X X 	  X
       0.2250000E+02 -		  X X		      X 	X      X
       0.2062500E+02 I	  X X		  X    XX X XX	 X   X	X    X
       0.1875000E+02 I	    X  XX     X XXX   X XX  X XX  XX   XX X    XX
       0.1687500E+02 I	X X XX X XXXX X  X  XXX  XX XXXXX  XX XX  X XXXX
       0.1500000E+02 I	XX X  XXXXXXX  X  X  X	X  XX XXXX X X	X   X  XX
       0.1312500E+02 I	XXXX XXXXXX XXXXXXXXX XXXXXXX X X XXXXXXXX XXXX X
       0.1125000E+02 -	 XXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXX XX XXX XXX XX
       0.9375000E+01 I	XXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.7500000E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5625000E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.3750000E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1875000E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.0000000E+00 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.4500000E+02 -							X
       0.4312500E+02 I
       0.4125000E+02 I
       0.3937500E+02 I
       0.3750000E+02 I							X
       0.3562500E+02 I
       0.3375000E+02 -							X
       0.3187500E+02 I							X
       0.3000000E+02 I
       0.2812500E+02 I							X
       0.2625000E+02 I							X
       0.2437500E+02 I							X
       0.2250000E+02 -							X
       0.2062500E+02 I						       XX
       0.1875000E+02 I						       X
       0.1687500E+02 I						       X
       0.1500000E+02 I						      XX
       0.1312500E+02 I						     XX
       0.1125000E+02 -						    XX
       0.9375000E+01 I						  XXX
       0.7500000E+01 I					     XXXXXX
       0.5625000E+01 I					XXXXXX
       0.3750000E+01 I			       XXXXXXXXXX
       0.1875000E+01 I		  XXXXXXXXXXXXXX
       0.0000000E+00 -	XXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Feller, An Introduction to Probability Theory and its Applications,
     Volume 1, Edition 2, 1957, pages 155-157, 210.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     929.



				 July 20, 2023		    georan(3m_datapac)
hfncdf(3m_datapac)					    hfncdf(3m_datapac)



NAME
  hfncdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the half-normal
  cumulative distribution function


SYNOPSIS
  SUBROUTINE HFNCDF(X,Cdf) REAL(kind=wp),intent(in) :: X
  REAL(kind=wp),intent(out) :: Cdf

DESCRIPTION
  HFNCDF(3f) computes the cumulative distribution function value for the
  halfnormal distribution.

  The halfnormal distribution used herein has mean = sqrt(2/pi) = 0.79788456
  and standard deviation = 1.

  This distribution is defined for all non-negative x and has the probability
  density function

  f(X) = (2/sqrt(2*pi)) * exp(-X*X/2).

  The halfnormal distribution used herein is the distribution of the variate X
  = abs(z) where the variate z is normally distributed with mean = 0 and
  standard deviation = 1.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is

    to be evaluated.
      X should be non-negative.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.  for the halfnormal
    distribution

EXAMPLES
  Sample program:

     program demo_hfncdf
     !@(#) line plotter graph of cumulative distribution function
     !@(#) for the halfnormal distribution
     use M_datapac, only : hfncdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('hfncdf')
	x=[(real(i),i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call hfncdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_hfncdf
  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -							X
       0.9583334E+02 I							X
       0.9166666E+02 I							X
       0.8750000E+02 I							X
       0.8333334E+02 I							X
       0.7916667E+02 I							X
       0.7500000E+02 -							X
       0.7083334E+02 I							X
       0.6666667E+02 I							X
       0.6250000E+02 I							X
       0.5833334E+02 I							X
       0.5416667E+02 I							X
       0.5000000E+02 -							X
       0.4583334E+02 I							X
       0.4166667E+02 I							X
       0.3750000E+02 I							X
       0.3333334E+02 I							X
       0.2916667E+02 I							X
       0.2500000E+02 -						       XX
       0.2083334E+02 I						     XXX
       0.1666667E+02 I						  XXXX
       0.1250000E+02 I					   X X XX
       0.8333336E+01 I				 X  X X  X
       0.4166672E+01 I		   X   X  X   X
       0.0000000E+00 -	X   X	X
			I-----------I-----------I-----------I-----------I
		-0.1192E-06  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01
  ================================================================================

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages 53,
     59, 81, 83.

  •  Daniel, 'Use of Half-Normal Plots in Interpreting Factorial Two-level
     Experiments', Technometrics, 1959, pages 311-341.



				 July 20, 2023		    hfncdf(3m_datapac)
hfnplt(3m_datapac)					    hfnplt(3m_datapac)



NAME
  hfnplt(3f) - [M_datapac:LINE_PLOT] generate a half-normal probability plot


SYNOPSIS
  SUBROUTINE HFNPLT(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  HFNPLT(3f) generates a halfnormal probability plot.

  The prototype halfnormal distribution used herein has mean = sqrt(2/pi) =
  0.79788456 and standard deviation = 1.

  This distribution is defined for all non-negative X and has the probability
  density function

	 f(X) = (2/sqrt(2*pi)) * exp(-X*X/2)

  The prototype halfnormal distribution used herein is the distribution of the
  variate X = abs(Z) where the variate Z is normally distributed with mean = 0
  and standard deviation = 1.

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The halfnormal probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the halfnormal distribution.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

OUTPUT
  A one-page halfnormal probability plot.

EXAMPLES
  Sample program:

     program demo_hfnplt
     use M_datapac, only : hfnplt
     implicit none
     ! call hfnplt(x,y)
     end program demo_hfnplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Daniel, 'Use of Half-Normal Plots in Interpreting Factorial Two-Level
     Experiments', Technometrics, 1959, pages 311-341.

  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn anD Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages 53,
     59, 81, 83.



				 July 20, 2023		    hfnplt(3m_datapac)
hfnppf(3m_datapac)					    hfnppf(3m_datapac)



NAME
  hfnppf(3f) - [M_datapac:PERCENT_POINT] compute the half-normal percent point
  function


SYNOPSIS
  SUBROUTINE HFNPPF(P,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  HFNPPF(3f) computes the percent point function value for the halfnormal
  distribution.

  The halfnormal distribution used herein has mean = sqrt(2/pi) = 0.79788456
  and standard deviation = 1. this distribution is defined for all non-
  negative X and has the probability density function

  f(X) = (2/sqrt(2*pi)) * exp(-X*X/2).

  The halfnormal distribution used herein is the distribution of the variate X
  = abs(Z) where the variate Z is normally distributed with mean = 0 and
  standard deviation = 1.

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The  value (between 0.0 (inclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

OUTPUT ARGUMENTS
  PPF
    The  percent point function value for the halfnormal distribution

EXAMPLES
  Sample program:

     program demo_hfnppf
     use M_datapac, only : hfnppf
     implicit none
     ! call hfnppf(x,y)
     end program demo_hfnppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages 53,
     59, 81, 83.

  •  Daniel, 'Use of Half-Normal Plots in Interpreting Factorial Two-Level
     Experiments', Technometrics, 1959, pages 311-341.



				 July 20, 2023		    hfnppf(3m_datapac)
hfnran(3m_datapac)					    hfnran(3m_datapac)



NAME
  hfnran(3f) - [M_datapac:RANDOM] generate half-normal random numbers


SYNOPSIS
  SUBROUTINE HFNRAN(N,Iseed,X)

	 INTEGER,intent(in)	    :: N
	 INTEGER,intent(inout)	    :: Iseed
	 REAL(kind=wp),intent(out)  :: X(:)


DESCRIPTION
  HFNRAN(3f) generates a random sample of size n from the halfnormal
  distribution.

  The prototype halfnormal distribution used herein has mean = sqrt(2/pi) =
  0.79788456 and standard deviation = 1. this distribution is defined for all
  non-negative X and has the probability density function

	 f(X) = (2/sqrt(2*pi)) * exp(-X*X/2).

  The prototype halfnormal distribution used herein is the distribution of the
  variate X = abs(Z) where the variate Z is normally distributed with mean = 0
  and standard deviation = 1.

INPUT ARGUMENTS
  N = The desired integer number of random numbers to be generated.

  ISEED
    An integer iseed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X = A  vector (of dimension at least N) into which the generated random
    sample from the halfnormal distribution will be placed.

EXAMPLES
  Sample program:

     program demo_hfnran
     use M_datapac, only : hfnran
     implicit none
     ! call hfnran(x,y)
     end program demo_hfnran

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  TOCHER, THE ART OF SIMULATION, 1963, pages 14-15.

  •  HAMMERSLEY AND HANDSCOMB, MONTE CARLO METHODS, 1964, page 36.

  •  JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages 53,
     59, 81, 83.



				 July 20, 2023		    hfnran(3m_datapac)
hist(3m_datapac)					      hist(3m_datapac)



NAME
  hist(3f) - [M_datapac:STATISTICS] generates histograms based on two
  different class widths


SYNOPSIS
  SUBROUTINE HIST(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  HIST(3f) produces 2 histograms (with differing class widths) of the data in
  the input vector X.

  The first histogram has class width = 0.1 sample standard deviations; the
  second histogram has class width = 0.2 sample standard deviations.

  Two histograms of the same data set are printed out so as to give the data
  analyst some feel for how dependent the histogram shape is as a function of
  the class width and number of classes.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

OUTPUT
  One page of automatic printout consisting of 2 half-page histograms (with
  class widths = 0.1 and 0.2 sAmple standard deviations, respectively) of the
  data in the input vector X.

EXAMPLES
  Sample program:

     program demo_hist
     use M_datapac, only : hist
     implicit none
     real,allocatable :: x(:)
     integer :: i
     integer :: n
	x=[(real(i),i=1,100)]
	n=size(x)
	call hist(x,n)
     end program demo_hist

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, page 4.



				 July 20, 2023		      hist(3m_datapac)
lamcdf(3m_datapac)					    lamcdf(3m_datapac)



NAME
  lamcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Tukey-Lambda
  cumulative distribution function


SYNOPSIS
  SUBROUTINE LAMCDF(X,Alamba,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(in)  :: Alamba
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  LAMCDF(3f) computes the cumulative distribution function value for the
  (Tukey) lambda distribution with tail length parameter value = ALAMBA.  In
  general, the probability density function for this distribution is not
  simple.

  The percent point function for this distribution is

	 g(P) = ((P**ALAMBA)-((1-P)**ALAMBA))/ALAMBA


INPUT ARGUMENTS
  X The  value at which the cumulative distribution function is to be
    evaluated.

    For ALAMBA non-positive, no restrictions on X.  For ALAMBA positive, X
    should be between (-1/ALAMBA) and (+1/ALAMBA), inclusively.

  ALAMBA
    The value of lambda (the tail length parameter).

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the Tukey lambda
    distribution.

EXAMPLES
  Sample program:

     program demo_lamcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : lamcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     real	       :: alamba
     integer	       :: i
	call label('lamcdf')
	alamba=4.0
	x=[(real(i)/100.0/alamba,i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call lamcdf(X(i),Alamba,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_lamcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.2500000E+00 -							X
       0.2291667E+00 I						      XX
       0.2083333E+00 I						     XX
       0.1875000E+00 I						    XX
       0.1666667E+00 I						   XX
       0.1458333E+00 I						 XXX
       0.1250000E+00 -						XX
       0.1041667E+00 I					      XX
       0.8333333E-01 I					    XX
       0.6250000E-01 I					 XXX
       0.4166666E-01 I				      XXXX
       0.2083333E-01 I				  XXXX
       0.0000000E+00 -			      XXXXX
      -0.2083334E-01 I			   XXXX
      -0.4166669E-01 I		       XXXX
      -0.6250000E-01 I		     XXX
      -0.8333334E-01 I		   XX
      -0.1041667E+00 I		 XX
      -0.1250000E+00 -	       XX
      -0.1458333E+00 I	     XXX
      -0.1666667E+00 I	    XX
      -0.1875000E+00 I	   XX
      -0.2083333E+00 I	  XX
      -0.2291667E+00 I	 XX
      -0.2500000E+00 -	X
			I-----------I-----------I-----------I-----------I
		 0.0000E+00  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Hastings, Mosteller, Tukey, and windsor, 'Low MOments for Small

     Samples:
       A Comparative Study of Order Statistics', Annals of Mathematical
       Statistics, 18, 1947, pages 413-426.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 42-44, 53-58.



				 July 20, 2023		    lamcdf(3m_datapac)
lampdf(3m_datapac)					    lampdf(3m_datapac)



NAME
  lampdf(3f) - [M_datapac:PROBABILITY_DENSITY] compute the Tukey-Lambda
  probability density function


SYNOPSIS
  SUBROUTINE LAMPDF(X,Alamba,Pdf)

	 REAL(kind=wp) :: X
	 REAL(kind=wp) :: Alamba


DESCRIPTION
  LAMPDF(3f) computes the probability density function value for the (tukey)
  lambda distribution with tail length parameter value = alamba.

  In general, the probability density function for this distribution is not
  simple.

  The percent point function for this distribution is

	g(p) = ((p**alamba)-((1-p)**alamba))/alamba


INPUT ARGUMENTS
  X The REAL value at which the probability density function is to be
    evaluated.

    For ALAMBA non-positive, no restrictions on X.

    For ALAMBA positive, X should be between (-1/ALAMBA) and (+1/ALAMBA),
    inclusively.

  ALAMBA
    The REAL value of lambda (the tail length parameter).

OUTPUT ARGUMENTS
  PDF
    The probability density function value for the Tukey Lambda distribution

OUTPUT
EXAMPLES
  Sample program:

     program demo_lampdf
     !@(#) line plotter graph of probability density function
     use M_datapac, only : lampdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     real	       :: alamba
     integer	       :: i
	call label('lampdf')
	alamba=0.0
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call LAMPDF(X(i)/100.0,Alamba,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_lampdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -	XXXX
       0.9166666E+02 I	    XXXXXXX
       0.8333334E+02 I		  XXXXXXX
       0.7500000E+02 I			XXXXXXX
       0.6666667E+02 I			       XXXXX
       0.5833334E+02 I				    XXXXX
       0.5000000E+02 -					XXXXXX
       0.4166667E+02 I					     XXXX
       0.3333334E+02 I						XXXX
       0.2500000E+02 I						   XXXX
       0.1666667E+02 I						      XX
       0.8333336E+01 I						       XX
       0.0000000E+00 -							X
      -0.8333328E+01 I						       XX
      -0.1666666E+02 I						      XX
      -0.2499999E+02 I						   XXXX
      -0.3333333E+02 I						XXXX
      -0.4166666E+02 I					     XXXX
      -0.5000000E+02 -					XXXXXX
      -0.5833333E+02 I				    XXXXX
      -0.6666666E+02 I			       XXXXX
      -0.7500000E+02 I			XXXXXXX
      -0.8333333E+02 I		  XXXXXXX
      -0.9166666E+02 I	    XXXXXXX
      -0.1000000E+03 -	XXXX
			I-----------I-----------I-----------I-----------I
		 0.1966E+00  0.2100E+00  0.2233E+00  0.2367E+00  0.2500E+00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Hastings, Mosteller, Tukey, and Windsor, 'Low Moments for Small

     Samples:
       A Comparative Study of Order Statistics', Annals of MAthematical
       Statistics, 18, 1947, pages 413-426.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 42-44, 53-58.



				 July 20, 2023		    lampdf(3m_datapac)
autoco(3m_datapac)					    autoco(3m_datapac)



NAME
  autoco(3f) - [M_datapac:STATISTICS] compute the sample autocorrelation
  coefficient


SYNOPSIS
  SUBROUTINE AUTOCO(X,N,Iwrite,Xautoc)

       Real(kind=wp), Intent (InOut) ::  X(:)
       Integer,       Intent (In)    ::  Iwrite
       Real(kind=wp), Intent (In)    ::  Xautoc


DESCRIPTION
  AUTOCO(3f) computes the sample autocorrelation coefficient of the data in
  the input vector X. The sample autocorrelation coefficient equals the
  correlation between X(I) and X(I+1) over the entire sample.  The
  autocorrelation coefficient coefficient will be a REAL value between -1.0
  and 1.0 (inclusively).

INPUT ARGUMENTS
  X The REAL vector of (unsorted) observations.

  N The integer number of observations in the vector x.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample autocorrelation coefficient as it is computed; or (if set to some
    integer value not equal to 0), like, say, 1) will cause the printing of
    the sample autocorrelation coefficient at the time it is computed.

OUTPUT ARGUMENTS
  XAUTOC
    The REAL value of the computed sample autocorrelation coefficient.	This
    REAL value will be between -1.0 and 1.0 (inclusively).

EXAMPLES
  Sample program:

     program demo_autoco
     use M_datapac, only : autoco, label
     implicit none
     real ::  x(100)
     call label('autoco')
     !call   call autoco(x,size(x),1,xautoc)
     end program demo_autoco

  Results:

REFERENCES
  Jenkins and Watts, Spectral Analysis and its Applications, 1968, pages 5,
  182.

AUTHOR
  The original DATAPAC library was written by James J. Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		    autoco(3m_datapac)
bincdf(3m_datapac)					    bincdf(3m_datapac)



NAME
  bincdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the binomial
  cumulative distribution function


SYNOPSIS
  SUBROUTINE BINCDF(X,P,N,Cdf)

	 REAL(kind=wp) :: X
	 REAL(kind=wp) :: P
	 INTEGER       :: N
	 REAL(kind=wp) :: Cdf


DESCRIPTION
  BINCDF(3f) computes the cumulative distribution function value at the double
  precision value X for the binomial distribution with double precision
  'Bernoulli probability' parameter = P, and integer 'number of Bernoulli
  trials' parameter = N.

  The binomial distribution used herein has mean = N*P and standard deviation
  = sqrt(N*P*(1-P)).

  This distribution is defined for all discrete integer X between 0
  (inclusively) and N (inclusively).

  This distribution has the probability function

	 f(X) = c(N,X) * P**X * (1-P)**(N-X)

  where c(N,X) is the combinatorial function equaling the number of
  combinations of N items taken X at a time.

  The binomial distribution is the distribution of the number of successes in
  N Bernoulli (0,1) trials where the probability of success in a precision
  trial = P.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be integral-valued, and between 0.0 (inclusively) and
    N (inclusively).

  P The value of the 'Bernoulli probability' parameter for the binomial
    distribution.  P should be between 0.0 (exclusively) and 1.0
    (exclusively).

  N The integer value of the 'number of Bernoulli trials' parameter. N should
    be a positive integer.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the binomial distribution.

EXAMPLES
  Sample program:

     program demo_bincdf
     use M_datapac, only : bincdf
     implicit none
     !call BINCDF(X,P,N,Cdf)
     end program demo_bincdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 38.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     945, Formulae 26.5.24 and 26.5.28, and page 929.

  •  Johnson and Kotz, Discrete Distributions, 1969, pages 50-86, especially
     pages 63-64.

  •  Feller, An Introduction to Probability Theory and its Applications,
     Volume 1, Edition 2, 1957, pages 135-142.

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 120-125.

  •  Mood and Grable, Introduction to the Theory of Statistics, Edition 2,
     1963, pages 64-69.

  •  Owen, Handbook of Statistical Tables, 1962, pages 264-272.



				 July 20, 2023		    bincdf(3m_datapac)
binppf(3m_datapac)					    binppf(3m_datapac)



NAME
  binppf(3f) - [M_datapac:PERCENT_POINT] compute the binomial percent point
  function


SYNOPSIS
  SUBROUTINE BINPPF(P,Ppar,N,Ppf)

	 REAL(kind=wp) :: P
	 REAL(kind=wp) :: Ppar
	 REAL(kind=wp) :: Ppf
	 INTEGER :: N


DESCRIPTION
  BINPPF(3f) computes the percent point function value at the precision
  precision value P for the binomial distribution with REAL Bernoulli trials'
  parameter = N.

  The binomial distribution used herein has mean = N*PPAR and standard
  deviation = sqrt(N*PPAR*(1-PPAR)).

  This distribution is defined for all discrete integer X between 0
  (inclusively) and N (inclusively).

  This distribution has the probability function

	f(X) = c(N,X) * PPAR**X * (1-PPAR)**(N-X).

  where c(N,X) is the combinatorial function equaling the number of
  combinations of N items taken X at a time.

  The binomial distribution is the distribution of the number of successes in
  N Bernoulli (0,1) trials where the probability of success in a precision
  trial = PPAR.

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (inclusively) and 1.0 (inclusively)) at which the
    percent point function is to be evaluated.

  PPAR
    The value of the 'Bernoulli probability' parameter for the binomial
    distribution. PPAR should be between 0.0 (exclusively) and 1.0
    (exclusively).

  N The integer value of the 'number of Bernoulli trials' parameter.  N should
    be a positive integer.

OUTPUT ARGUMENTS
  PPF
    The percent point function value.

EXAMPLES
  Sample program:

     program demo_binppf
     use M_datapac, only : binppf
     implicit none
     ! call binppf(x,y)
     end program demo_binppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Discrete Distributions, 1969, pages 50-86, especially
     page 64, Formula 36.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 36-41.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     929.

  •  Feller, An Introduction to Probability Theory and Its Applications,
     Volume 1, Edition 2, 1957, pages 135-142.

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 120-125.

  •  Mood and Grable, Introduction to the Theory of Statistics, Edition 2,
     1963, pages 64-69.

  •  Owen, Handbook of Statistical Tables, 1962, pages 264-272.



				 July 20, 2023		    binppf(3m_datapac)
parcdf(3m_datapac)					    parcdf(3m_datapac)



NAME
  parcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Pareto
  cumulative distribution function


SYNOPSIS
  SUBROUTINE PARCDF(X,Gamma,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  PARCDF(3f) computes the cumulative distribution function value for the
  Pareto distribution with REAL tail length parameter = GAMMA.

  The Pareto distribution used herein is defined for all X greater than or
  equal to 1, and has the probability density function

	 f(X) = GAMMA / (X**(GAMMA+1))


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be greater than or equal to 1.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the Pareto distribution

EXAMPLES
  Sample program:

     program demo_parcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : parcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     real	       :: gamma
     integer	       :: i
	call label('parcdf')
	x=[(real(i)/10.0+1.0,i=1,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	gamma=0.3
	do i=1,size(x)
	   call parcdf(X(i),Gamma,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_parcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1100000E+02 -							X
       0.1058750E+02 I						       XX
       0.1017500E+02 I						       X
       0.9762500E+01 I						      X
       0.9350000E+01 I						     XX
       0.8937500E+01 I						     X
       0.8525000E+01 -						    X
       0.8112500E+01 I						   XX
       0.7700000E+01 I						  XX
       0.7287500E+01 I						 XX
       0.6875000E+01 I						XX
       0.6462500E+01 I					       XX
       0.6050000E+01 -					      XX
       0.5637500E+01 I					     XX
       0.5225000E+01 I					   XXX
       0.4812500E+01 I					  XX
       0.4400000E+01 I					XXX
       0.3987500E+01 I				      XX
       0.3575000E+01 -				    XX
       0.3162500E+01 I				 XXX
       0.2750000E+01 I			      XXX
       0.2337501E+01 I			  XXXX
       0.1925000E+01 I		     X XXX
       0.1512500E+01 I	       X XX X
       0.1100000E+01 -	X X  X
			I-----------I-----------I-----------I-----------I
		 0.2819E-01  0.1494E+00  0.2706E+00  0.3918E+00  0.5129E+00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     233-249.

  •  hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 102.



				 July 20, 2023		    parcdf(3m_datapac)
parplt(3m_datapac)					    parplt(3m_datapac)



NAME
  parplt(3f) - [M_datapac:LINE_PLOT] generate a Pareto probability plot


SYNOPSIS
  SUBROUTINE PARPLT(X,N,Gamma)

DESCRIPTION
  PARPLT(3f) generates a Pareto probability plot (with tail length parameter
  value = GAMMA).

  The prototype pareto distribution used herein is defined for all X equal to
  or greater than 1, and has the probability density function

	 f(X) = GAMMA / (X**(GAMMA+1)).

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The Pareto probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the pareto distribution with tail length parameter value = gamma.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_parplt
     use M_datapac, only : parplt
     implicit none
     ! call parplt(x,y)
     end program demo_parplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     233-249.



				 July 20, 2023		    parplt(3m_datapac)
parppf(3m_datapac)					    parppf(3m_datapac)



NAME
  parppf(3f) - [M_datapac:PERCENT_POINT] compute the Pareto percent point
  function


SYNOPSIS
  SUBROUTINE PARPPF(P,Gamma,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  PARPPF(3f) computes the percent point function value for the Pareto
  distribution with REAL tail length parameter = GAMMA.

  The Pareto distribution used herein is defined for all X greater than or
  equal to 1, and has the probability density function

	 f(X) = GAMMA / (X**(GAMMA+1))

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (inclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  PPF
    The percent point function value for the Pareto distribution

EXAMPLES
  Sample program:

     program demo_parppf
     use M_datapac, only : parppf
     implicit none
     ! call parppf(x,y)
     end program demo_parppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     233-249.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 102.



				 July 20, 2023		    parppf(3m_datapac)
parran(3m_datapac)					    parran(3m_datapac)



NAME
  parran(3f) - [M_datapac:RANDOM] generate Pareto random numbers


SYNOPSIS
  SUBROUTINE PARRAN(N,Gamma,Iseed,X)

	 INTEGER       :: N
	 REAL(kind=wp) :: Gamma
	 INTEGER       :: Iseed
	 REAL(kind=wp) :: X(:)


DESCRIPTION
  PARRAN(3f) generates a random sample of size N from the Pareto distribution
  with tail length parameter value = GAMMA.

  The prototype Pareto distribution used herein is defined for all X greater
  than or equal to 1, and has the probability density function

	 f(X) = GAMMA / (X**(GAMMA+1))


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  GAMMA
    The  value of the tail length parameter. GAMMA should be positive.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    from the Pareto distribution will be placed.

EXAMPLES
  Sample program:

     program demo_parran
     use m_datapac, only : parran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=4000
     real :: x(n)
     integer :: iseed
     real :: gamma
	call label('parran')
	gamma=3.4
	iseed=12345
	call parran(n,gamma,iseed,x)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_parran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1956372E+02 -	 X
       0.1879024E+02 I
       0.1801675E+02 I
       0.1724326E+02 I
       0.1646978E+02 I
       0.1569629E+02 I
       0.1492280E+02 -
       0.1414931E+02 I
       0.1337583E+02 I
       0.1260234E+02 I
       0.1182885E+02 I
       0.1105537E+02 I			 X
       0.1028188E+02 -
       0.9508391E+01 I
       0.8734904E+01 I				X
       0.7961417E+01 I					  X
       0.7187930E+01 I
       0.6414443E+01 I			X X		    X  XX
       0.5640956E+01 -		 X		    XX		XX
       0.4867469E+01 I	 X	  X X X XX X	      X 	X X
       0.4093982E+01 I	  X X		  X    XX X XX	 X   X	X    X X
       0.3320494E+01 I	X X XX XXXXXX X XXX XXX XXX XXXXX XXX XXX X XXXXX
       0.2547007E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1773520E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1000033E+01 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1956372E+02 -							X
       0.1879024E+02 I
       0.1801675E+02 I
       0.1724326E+02 I
       0.1646978E+02 I
       0.1569629E+02 I
       0.1492280E+02 -
       0.1414931E+02 I
       0.1337583E+02 I
       0.1260234E+02 I
       0.1182885E+02 I
       0.1105537E+02 I							X
       0.1028188E+02 -
       0.9508391E+01 I
       0.8734904E+01 I							X
       0.7961417E+01 I							X
       0.7187930E+01 I
       0.6414443E+01 I							X
       0.5640956E+01 -							X
       0.4867469E+01 I							X
       0.4093982E+01 I						       XX
       0.3320494E+01 I						       X
       0.2547007E+01 I						    XXXX
       0.1773520E+01 I					XXXXXXXXXXXXX
       0.1000033E+01 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     233-249.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 104.



				 July 20, 2023		    parran(3m_datapac)
plot10(3m_datapac)					    plot10(3m_datapac)



NAME
  plot10(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot with
  special plot characters


SYNOPSIS
  SUBROUTINE PLOT10( & &
  Y,X,Char,N,Ymin,Ymax,Xmin,Xmax,D,Dmin,Dmax,Yaxid,Xaxid,Plchid)

	 REAL(kind=wp) :: Y(:)
	 REAL(kind=wp) :: X(:)
	 REAL(kind=wp) :: Char(:)
	 INTEGER       :: N
	 REAL(kind=wp) :: Ymin, Ymax
	 REAL(kind=wp) :: Xmin, Xmax
	 REAL(kind=wp) :: D(:)
	 REAL(kind=wp) :: Dmin, Dmax
	 REAL(kind=wp) :: Yaxid, Xaxid
	 REAL(kind=wp) :: Plchid


DESCRIPTION
  PLOT10(3f) yields a one-page printer plot of y(i) versus x(i):

    1.	with special plot characters;

    2.	with the vertical (y) axis min and max and the horizontal (x) axis min
	and max values specified by the data analyst;

    3.	with only those points (x(i),y(i)) plotted for which the corresponding
	value of d(i) is between the specified values of dmin and dmax; and

    4.	with hollerith labels (at most 6 characters) for the vertical axis
	variable, the horizontal axis variable, and the plotting character
	variable also being provided by the data analyst.

  The 'special plotting character' capability allows the data analyst to
  incorporate information from a third variable (aside from y and x) into the
  plot.

  The plot character used at the i-th plotting position (that is, at the
  coordinate (x(i),y(i))) will be

    1 if char(i) is between
      0.5 and  1.5

    2 if char(i) is between
      1.5 and  2.5 .  .  .

    9 if char(i) is between
      8.5 and  9.5

    0 if char(i) is between
      9.5 and 10.5 a if char(i) is between 10.5 and 11.5 b if char(i) is
      between 11.5 and 12.5 c if char(i) is between 12.5 and 13.5 .  .	.  w
      if char(i) is between 32.5 and 33.5 x if char(i) is between 33.5 and
      34.5 y if char(i) is between 34.5 and 35.5 z if char(i) is between 35.5
      and 36.5

    x if char(i) is any value outside the range 0.5 to
      36.5.

  The use of the ymin, ymax, xmin, and xmax specifications allows the data
  analyst to control fully the plot axis limits, so as, for example, to zero-
  in on an interesting sub-region of a previous plot.

  The use of the subset definition vector d gives the data analyst the
  capability of plotting subsets of the data, where the subset is defined by
  values in the vector d.

  The use of hollerith identifying labels allows the data analyst to
  automatically have the plots labeled. this is particularly useful in a large
  analysis when many plots are being generated.

  Values in the vertical axis vector (Y) which are smaller than YMIN or larger
  than YMAX, or values in the horizontal axis vector (X) which are smaller
  than XMIN or larger than XMAX will not be plotted.

  For a given dummy index I, if D(I) is smaller than DMIN or larger than DMAX,
  then the corresponding point (X(I),Y(I)) will not be plotted.

  Values in the vertical axis vector (Y), the horizontal axis vector (X), or
  the plot character vector (CHAR) which are equal to or in excess of 10.0**10
  will not be plotted.

  This convention greatly simplifies the problem of plotting when some
  elements in the vector Y (or X, or CHAR) are 'missing data', or when we
  purposely want to ignore certain elements in the vector Y (or X, or CHAR)
  for plotting purposes (that is, we do not want certain elements in Y (or X,
  or CHAR) to be plotted).

  to cause specific elements in Y (or X, or CHAR) to be ignored, we replace
  the elements beforehand (by, for example, use of the REPLAC(3f) subroutine)
  by some large value (like, say, 10.0**10) and they will subsequently be
  ignored in the PLOTC(3f) subroutine.

INPUT ARGUMENTS
  Y The vector of (unsorted or sorted) observations to be plotted vertically.

  X The vector of (unsorted or sorted) observations to be plotted
    horizontally.

  CHAR
    The vector of observations which control the value of each individual plot
    character.

  N The integer number of observations in the vector y.  There is no
    restriction on the maximum value of n for this subroutine.

  YMIN
    The value of desired minimum for the vertical axis.

  YMAX
    The value of desired maximum for the vertical axis.

  XMIN
    The value of desired minimum for the horizontal axis.

  XMAX
    The value of desired maximum for the horizontal axis.

  D The vector which 'defines' the various possible subsets.

  DMIN
    The value which defines the lower bound (inclusively) of The particular
    subset of interest to be plotted.

  DMAX
    The value which defines the upper bound (inclusively) of The particular
    subset of interest to be plotted.

  YAXID
    The hollerith value (at most 6 characters) of the desired label for the
    vertical axis variable.

  XAXID
    The hollerith value (at most 6 characters) of the desired label for the
    horizontal axis variable.

  PLCHID
    The hollerith value (at most 6 characters) of the desired label for the
    plotting character variable.

OUTPUT
  A one-page printer plot of Y(I) versus X(I), with special plot characters,
  with specified axis limits, for only of a specified subset of the data, and
  with specified labels.

EXAMPLES
  Sample program:

     program demo_plot10
     use M_datapac, only : plot10
     implicit none
     ! call plot10(x,y)
     end program demo_plot10

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Statistical Analysis of Interlab Fatigue Time Data',
     Unpublished Manuscript (available from Author) Presented at the American
     Statistical Association, New York City, December 27-30, 1973.



				 July 20, 2023		    plot10(3m_datapac)
plot(3m_datapac)					      plot(3m_datapac)



NAME
  plot(3f) - [M_datapac:GENERIC_LINE_PLOT] yields a one-page printer plot of
  Y(I) versus X(I)


SYNOPSIS
  Subroutine plot (X, Y, N)

  Real(kind=wp) :: (In) ::
    X(:)

    Real(kind=wp) :: (In) ::
      Y(:)

      Integer, Intent (In) ::

DESCRIPTION
  This subroutine yields a one-page printer plot of Y(I) versus X(I).

  Values in the vertical axis vector (Y) or the horizontal axis vector (X)
  which are equal to or in excess of 10.0**10 will not be plotted.

  This convention greatly simplifies the problem of plotting when some
  elements in the vector Y (or X) are 'missing data', or when we purposely
  want to ignore certain elements in the vector Y (or X) for plotting purposes
  (That is, we do not want certain elements in Y (or X) to be plotted). To
  cause specific elements in Y (or X) to be ignored, we replace the elements
  beforehand (by, for example, use of the REPLAC subroutine) by some large
  value (like, say, 10.0**10) and they will subsequently be ignored in the
  plot subroutine.

OPTIONS
  Y The REAL vector of (unsorted or sorted) observations to be plotted
    vertically.

  X The REAL vector of (unsorted or sorted) observations to be plotted
    horizontally.

  N The integer number of observations in the vector Y.

EXAMPLES
  Sample program:

     program demo_plot
     use M_datapac, only : plot
     implicit none
     integer ::  i
     real, allocatable ::  x(:), y(:)
       x=[(real(i),i=1,30)]
       y=0.075*(x**4)-0.525*(x**3)+0.75*(x**2)+2.40
       call plot(x,y,size(x))
       y=[(real(i)/10.0,i=1,30)]
       x=y**3.78-6*y**2.52+9*y**1.26
       call plot(x,y,size(x))
     end program demo_plot

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		      plot(3m_datapac)
plot6(3m_datapac)					     plot6(3m_datapac)



NAME
  plot6(3f) - [M_datapac:GENERIC_LINE_PLOT] generate a line printer plot


SYNOPSIS
  SUBROUTINE PLOT6(Y,X,N,Ymin,Ymax,Xmin,Xmax)

DESCRIPTION
  PLOT6(3f) yields a one-page printer plot of Y(i) versus X(i):

    1.	with the vertical (Y) axis min and max and the horizontal (X) axis min
	and max values specified by the data analyst.

  the use of the YMIN, YMAX, XMIN, and XMAX specifications allows the data
  analyst to control fully the plot axis limits, so as, for example, to zero-
  in on an interesting sub-region of a previous plot.

INPUT ARGUMENTS
  Y the vector of (unsorted or sorted) observations to be plotted vertically.

  X the vector of (unsorted or sorted) observations to be plotted
    horizontally.

  N the integer number of observations in the vector y. there is no
    restriction on the maximum value of n for this subroutine.

  YMIN
    the value of desired minimum for the vertical axis.

  YMAX
    the value of desired maximum for the vertical axis.

  XMIN
    the value of desired minimum for the horizontal axis.

  XMAX
    the value of desired maximum for the horizontal axis.

OUTPUT
  A one-page printer plot of y(i) versus x(i), with specified axis limits.

EXAMPLES
  Sample program:

     program demo_plot6
     use M_datapac, only : plot6
     implicit none
     ! call plot6(x,y)
     end program demo_plot6

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		     plot6(3m_datapac)
lamplt(3m_datapac)					    lamplt(3m_datapac)



NAME
  lamplt(3f) - [M_datapac:LINE_PLOT] generate a Tukey-Lambda probability plot


SYNOPSIS
  SUBROUTINE LAMPLT(X,N,Alamba)

DESCRIPTION
  lamplt(3f) generates a (tukey) lambda distribution probability plot (with
  tail length parameter value = alamba).

  in general, the probability density function for this distribution is not
  simple.

  the percent point function for this distribution is

	 g(p) = ((p**alamba)-((1-p)**alamba)) / alamba

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the lambda probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the lambda distribution with tail length parameter value = alamba.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_lamplt
     use M_datapac, only : lamplt
     implicit none
     ! call lamplt(x,y)
     end program demo_lamplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	FILLIBEN, SIMPLE AND ROBUST LINEAR ESTIMATION OF THE LOCATION
	PARAMETER OF A SYMMETRIC DISTRIBUTION (UNPUBLISHED PH.D. DISSERTATION,
	PRINCETON UNIVERSITY, 1969), pages 21-44, 229-231, pages 53-58.

     •	HASTINGS, MOSTELLER, TUKEY, AND WINDSOR, 'LOW MOMENTS FOR SMALL

	SAMPLES:
	  A COMPARATIVE STUDY OF ORDER STATISTICS', ANNALS OF MATHEMATICAL
	  STATISTICS, 18, 1947, pages 413-426.



				 July 20, 2023		    lamplt(3m_datapac)
lamppf(3m_datapac)					    lamppf(3m_datapac)



NAME
  lamppf(3f) - [M_datapac:PERCENT_POINT] compute the Tukey-Lambda percent
  point function


SYNOPSIS
  SUBROUTINE LAMPPF(P,Alamba,Ppf)

	 REAL(kind=wp),intent(in) :: Alamba
	 REAL(kind=wp),intent(in) :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  LAMPPF(3f) computes the percent point function value for the (Tukey) lambda
  distribution with tail length parameter value = ALAMBA.

  In general, the probability density function for this distribution is not
  simple.

  The percent point function for this distribution is

	 g(P) = ((P**ALAMBA)-((1-P)**ALAMBA))/ALAMBA

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0) at which the percent point function is to
    be evaluated.

    If ALAMBA is positive, then P should be between 0.0 and 1.0, inclusively.

    If ALAMBA is non-positive, then P should be between 0.0 and 1.0,
    exclusively.

  ALAMBA
    The value of lambda (the tail length parameter).

OUTPUT ARGUMENTS
  PPF
    The percent point function value ppf for the Tukey lambda distribution

EXAMPLES
  Sample program:

     program demo_lamppf
     !@(#) line plotter graph of function
     use M_datapac, only : lamppf, plott, label
     implicit none
     integer,parameter :: n=200
     real	       :: x(n), y(n)
     real	       :: alamba
     integer	       :: i
	alamba=3.3333
	call label('lamppf')
	x=[(real(i)/real(n+1),i=1,n)]
	do i=1,n
	   call lamppf(x(i),alamba,y(i))
	enddo
	call plott(x,y,n)
     end program demo_lamppf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.9950249E+00 -						      XXX
       0.9537728E+00 I						    XXX
       0.9125207E+00 I						 XXX
       0.8712686E+00 I					      XXXX
       0.8300166E+00 I					    XXX
       0.7887645E+00 I					  XXX
       0.7475125E+00 -					XXX
       0.7062603E+00 I				      XXX
       0.6650083E+00 I				     XX
       0.6237562E+00 I				    XX
       0.5825042E+00 I				  XX
       0.5412520E+00 I				 XX
       0.5000000E+00 -			       XXX
       0.4587479E+00 I			      XX
       0.4174958E+00 I			     XX
       0.3762438E+00 I			   XX
       0.3349917E+00 I			  XX
       0.2937396E+00 I			XXX
       0.2524875E+00 -		      XXX
       0.2112355E+00 I		    XXX
       0.1699834E+00 I		  XXX
       0.1287313E+00 I	       XXXX
       0.8747923E-01 I	     XXX
       0.4622716E-01 I	  XXX
       0.4975124E-02 -	XXX
			I-----------I-----------I-----------I-----------I
		-0.2951E+00 -0.1475E+00  0.0000E+00  0.1475E+00  0.2951E+00



AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231, pages 53-58.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Hastings, Mosteller, Tukey, and Windsor, 'Low Moments for Small

     Samples:
       A Comparative Study of Order Statistics', Annals of Mathematical
       Statistics, 18, 1947, pages 413-426.



				 July 20, 2023		    lamppf(3m_datapac)
lamran(3m_datapac)					    lamran(3m_datapac)



NAME
  lamran(3f) - [M_datapac:RANDOM] generate Tukey-Lambda random numbers


SYNOPSIS
  SUBROUTINE LAMRAN(N,Alamba,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: Alamba
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  LAMRAN(3f) generates a random sample of size N from the (Tukey) lambda
  distribution with tail length parameter value = ALAMBA.

  In general, the probability density function for this distribution is not
  simple. the percent point function for this distribution is

	 g(P) = ((P**ALAMBA)-((1-P)**ALAMBA))/ALAMBA


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ALAMBA
    The value of LAMBDA (the tail length parameter).

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the (Tukey) lambda distribution will be placed.

EXAMPLES
  Sample program:

     program demo_lamran
     use m_datapac, only : lamran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=400
     real :: x(n)
     integer :: iseed
     real :: gamma
	call label('lamran')
	gamma=3.4
	iseed=12345
	call lamran(n,gamma,iseed,x)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_lamran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.2940770E+00 -		    XX	     X X		     X
       0.2701390E+00 I	 XXX	X	 X		X     X X    X
       0.2462010E+00 I	  X	     XX X X  X		  X
       0.2222630E+00 I		X	 XX X  X X  X	 X X X X
       0.1983251E+00 I	   XX	  XX  XX	 X		      X
       0.1743871E+00 I	    XX X  XX	X  X	  X X X X   X  XX XXXX
       0.1504491E+00 -	     X	  X   XX   X  X        X       XX  X X
       0.1265111E+00 I	X   X XXX    X	X    X	 XX	XX  XX	 X X
       0.1025732E+00 I	  X	   XX  XXX     XX XXXX	XX X  X      XXXX
       0.7863519E-01 I	 X XX XXXXX	  X   X     X  X  XXX	  X X XX
       0.5469720E-01 I	  X	 XXX	 X X	 XX   X X  XX	 X XX X
       0.3075922E-01 I	X  XXX X    XXXX  XXX  XX   XXX    X  XX  XX X
       0.6821245E-02 -	 XXXX X XX   X	X X X	   XX  XX   XX	XX    X X
      -0.1711673E-01 I	   X   X X XX  X   XX XX X     XX X	    X  XX
      -0.4105473E-01 I	      XX    X X   XXXXXX XXXX XX  X  X	 X XXX
      -0.6499270E-01 I		X XX X	X    X XX XXXX	 X    XX  X
      -0.8893067E-01 I	X   X  X	  XX  X    X XX  X X XX   X   X X
      -0.1128686E+00 I	 X     X X X	 X	 X	       X X   XX
      -0.1368066E+00 -	 XX  X		X     X X X  XXX    X  X   X
      -0.1607446E+00 I	     X	  XX	     X	   X	 X  X X  XX X  X
      -0.1846826E+00 I	X  X	 XX XXX X X X	X	  X   X X   X	X
      -0.2086205E+00 I	X  XX X X	 X   X	      X  XX   XXX
      -0.2325585E+00 I	  X  X	       X     X	X    X
      -0.2564965E+00 I		      XX	  X		  X    X
      -0.2804345E+00 -	 X	X X	      X 		X X    X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1008E+03  0.2005E+03  0.3002E+03  0.4000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.2940770E+00 -							X
       0.2701390E+00 I						      XX
       0.2462010E+00 I						     XX
       0.2222630E+00 I						    XX
       0.1983251E+00 I						   XX
       0.1743871E+00 I						XXX
       0.1504491E+00 -					      XXX
       0.1265111E+00 I					    XXX
       0.1025732E+00 I					 XXXX
       0.7863519E-01 I				      XXXX
       0.5469720E-01 I				    XXX
       0.3075922E-01 I				XXXX
       0.6821245E-02 -			     XXXX
      -0.1711673E-01 I			  XXXX
      -0.4105473E-01 I		       XXXX
      -0.6499270E-01 I		     XXX
      -0.8893067E-01 I		   XXX
      -0.1128686E+00 I		  XX
      -0.1368066E+00 -		XXX
      -0.1607446E+00 I	      XXX
      -0.1846826E+00 I	    XXX
      -0.2086205E+00 I	  XXX
      -0.2325585E+00 I	  X
      -0.2564965E+00 I	 X
      -0.2804345E+00 -	XX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1008E+03  0.2005E+03  0.3002E+03  0.4000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 53-58.

  •  Filliben, 'The Percent Point Function', (unpublished manuscript), 1970,
     pages 28-31.



				 July 20, 2023		    lamran(3m_datapac)
lamsf(3m_datapac)					     lamsf(3m_datapac)



NAME
  lamsf(3f) - [M_datapac:SPARSITY] compute the Tukey-Lambda sparsity function


SYNOPSIS
  SUBROUTINE LAMSF(P,Alamba,Sf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(in)  :: Alamba
	 REAL(kind=wp),intent(out) :: Sf


DESCRIPTION
  LAMSF(3f) computes the sparsity function value for the (Tukey) lambda
  distribution with tail length parameter value = ALAMBA.

  In general, the probability density function for this distribution is not
  simple.

  The percent point function for this distribution is

	 g(P) = ((P**ALAMBA)-((1-P)**ALAMBA))/ALAMBA

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of P rather than X).

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0) at which the sparsity function is to be
    evaluated.

  ALAMBA
    The value of Lambda (the Tail Length parameter).

	     If ALAMBA is positive, then P should be between 0.0 and 1.0,
	     inclusively.

	     If ALAMBA is non-positive, then P should be between 0.0 and
	     1.0, exclusively.


OUTPUT ARGUMENTS
  SF
    The sparsity function value for the Tukey Lambda distribution

EXAMPLES
  Sample program:

     program demo_lamsf
     use M_datapac, only : lamsf
     implicit none
     ! call lamsf(x,y)
     end program demo_lamsf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231, pages 53-58.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Hastings, Mosteller, Tukey, and Windsor, 'Low Moments for Small

     Samples:
       A Comparative Study of Order Statistics', Annals of Mathematical
       Statistics, 18, 1947, pages 413-426.



				 July 20, 2023		     lamsf(3m_datapac)
lgncdf(3m_datapac)					    lgncdf(3m_datapac)



NAME
  lgncdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the lognormal
  cumulative distribution function


SYNOPSIS
  SUBROUTINE LGNCDF(X,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  LGNCDF(3f) computes the cumulative distribution function value for the
  lognormal distribution.

  The lognormal distribution used herein has mean = sqrt(e) = 1.64872127 and
  standard deviation = sqrt(e*(e-1)) = 2.16119742. this distribution is
  defined for all positive X and has the probability density function

	 f(X) = (1/(X*sqrt(2*pi))) * exp(-log(X)*log(X)/2)

  The lognormal distribution used herein is the distribution of the variate X
  = exp(z) where the variate z is normally distributed with mean = 0 and
  standard deviation = 1.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be positive.

OUTPUT ARGUMENTS
  Cdf
    The cumulative distribution function value for the lognormal distribution

EXAMPLES
  Sample program:

     program demo_lgncdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : lgncdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('lgncdf')
	x=[((real(i)+epsilon(0.0))/10.0,i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call lgncdf(x(i),y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_lgncdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+02 -							X
       0.9583333E+01 I							X
       0.9166667E+01 I							X
       0.8750000E+01 I							X
       0.8333333E+01 I							X
       0.7916667E+01 I							X
       0.7500000E+01 -						       XX
       0.7083333E+01 I						       X
       0.6666667E+01 I						       X
       0.6250000E+01 I						       X
       0.5833333E+01 I						       X
       0.5416667E+01 I						      X
       0.5000000E+01 -						      X
       0.4583333E+01 I						     XX
       0.4166667E+01 I						    XX
       0.3750000E+01 I						    X
       0.3333333E+01 I						   X
       0.2916667E+01 I						 XX
       0.2500000E+01 -					       XXX
       0.2083333E+01 I					    XXX
       0.1666667E+01 I					XXXX
       0.1250000E+01 I				  X XX X
       0.8333340E+00 I			 X  X X X
       0.4166670E+00 I	      X  X  X  X
       0.1192093E-07 -	XX X
			I-----------I-----------I-----------I-----------I
		 0.0000E+00  0.2473E+00  0.4947E+00  0.7420E+00  0.9893E+00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     112-136.

  •  Cramer, Mathematical Methods of Statistics, 1946, pages 219-220.



				 July 20, 2023		    lgncdf(3m_datapac)
lgnplt(3m_datapac)					    lgnplt(3m_datapac)



NAME
  lgnplt(3f) - [M_datapac:LINE_PLOT] generates a lognormal probability plot


SYNOPSIS
  SUBROUTINE LGNPLT(X,N)

DESCRIPTION
  lgnplt(3f) generates a lognormal probability plot.

  the prototype lognormal distribution used herein has mean = sqrt(e) =
  1.64872127 and standard deviation = sqrt(e*(e-1)) = 2.16119742.  this
  distribution is defined for all positive x and has the probability density
  function

	 f(x) = (1/(x*sqrt(2*pi))) * exp(-log(x)*log(x)/2)

  the prototype lognormal distribution used herein is the distribution of the
  variate x = exp(z) where the variate z is normally distributed with mean = 0
  and standard deviation = 1.

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the lognormal probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the lognormal distribution.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_lgnplt
     use M_datapac, only : lgnplt
     implicit none
     ! call lgnplt(x,y)
     end program demo_lgnplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
	112-136.

     •	CRAMER, MATHEMATICAL METHODS OF STATISTICS, 1946, pages 219-220.



				 July 20, 2023		    lgnplt(3m_datapac)
lgnppf(3m_datapac)					    lgnppf(3m_datapac)



NAME
  lgnppf(3f) - [M_datapac:PERCENT_POINT] compute the lognormal percent point
  function


SYNOPSIS
  SUBROUTINE LGNPPF(P,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  LGNPPF(3f) computes the percent point function value for the lognormal
  distribution.

  The lognormal distribution used herein has mean = sqrt(e) = 1.64872127 and
  standard deviation = sqrt(e*(e-1)) = 2.16119742. This distribution is
  defined for all positive X and has the probability density function

	 f(X) = (1/(X*sqrt(2*pi))) * exp(-log(X)*log(X)/2)

  The lognormal distribution used herein is the distribution of the variate x
  = exp(z) where the variate z is normally distributed with mean = 0 and
  standard deviation = 1.

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (exclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

OUTPUT ARGUMENTS
  PPF
    The percent point function value for the lognormal distribution

EXAMPLES
  Sample program:

     program demo_lgnppf
     !@(#) line plotter graph of function
     use M_datapac, only : lgnppf, plott, label
     implicit none
     integer,parameter :: n=200
     real	       :: x(n), y(n)
     integer	       :: i
	call label('lgnppf')
	x=[(real(i)/real(n+1),i=1,n)]
	do i=1,n
	   call lgnppf(x(i),y(i))
	enddo
	call plott(x,y,n)
     end program demo_lgnppf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.9950249E+00 -				  X X	X    X		X
       0.9537728E+00 I			XXXXXXX X
       0.9125207E+00 I		     XXXX
       0.8712686E+00 I		  XXX
       0.8300166E+00 I		 XX
       0.7887645E+00 I	       XX
       0.7475125E+00 -	       X
       0.7062603E+00 I	      X
       0.6650083E+00 I	     XX
       0.6237562E+00 I	     X
       0.5825042E+00 I	    X
       0.5412520E+00 I	    X
       0.5000000E+00 -	   XX
       0.4587479E+00 I	   X
       0.4174958E+00 I	   X
       0.3762438E+00 I	  XX
       0.3349917E+00 I	  X
       0.2937396E+00 I	  X
       0.2524875E+00 -	 XX
       0.2112355E+00 I	 X
       0.1699834E+00 I	 X
       0.1287313E+00 I	 X
       0.8747923E-01 I	 X
       0.4622716E-01 I	XX
       0.4975124E-02 -	X
			I-----------I-----------I-----------I-----------I
		 0.7596E-01  0.3348E+01  0.6620E+01  0.9893E+01  0.1316E+02


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     112-136.

  •  Cramer, Mathematical Methods of Statistics, 1946, pages 219-220.



				 July 20, 2023		    lgnppf(3m_datapac)
lgnran(3m_datapac)					    lgnran(3m_datapac)



NAME
  lgnran(3f) - [M_datapac:RANDOM] generate lognormal random numbers


SYNOPSIS
  SUBROUTINE LGNRAN(N,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  LGNRAN(3f) generates a random sample of size N from the lognormal
  distribution.

  The prototype lognormal distribution used herein has mean = sqrt(e) =
  1.64872127 and standard deviation = sqrt(e*(e-1)) = 2.16119742.  this
  distribution is defined for all positive X and has the probability density
  function

	 f(X) = (1/(X*sqrt(2*pi))) * exp(-log(X)*log(X)/2)

  The prototype lognormal distribution used herein is the distribution of the
  variate X = exp(z) where the variate z is normally distributed with mean = 0
  and standard deviation = 1.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the lognormal distribution will be placed.

EXAMPLES
  Sample program:

     program demo_lgnran
     use m_datapac, only : lgnran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=500
     real :: x(n)
     integer :: iseed
	call label('lgnran')
	iseed=12345
	call lgnran(N,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_lgnran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.2626150E+02 -						      X
       0.2516970E+02 I
       0.2407790E+02 I
       0.2298611E+02 I
       0.2189431E+02 I
       0.2080252E+02 I
       0.1971072E+02 -
       0.1861893E+02 I
       0.1752713E+02 I	 X
       0.1643533E+02 I						     X
       0.1534354E+02 I
       0.1425174E+02 I
       0.1315995E+02 -					      X
       0.1206815E+02 I
       0.1097635E+02 I					  X
       0.9884558E+01 I			 X				X
       0.8792763E+01 I					       XXX
       0.7700968E+01 I		X
       0.6609171E+01 -		      X 	       X      X X	X
       0.5517376E+01 I		    XX	 X X X	      XX X	  X
       0.4425579E+01 I		XX X	 X X XXXX  XX X   X	   XX  X
       0.3333784E+01 I	 X  XXX   X  XX   XX   XXX X XXXX  X X	  X  X
       0.2241987E+01 I	X XXXXXX XX  XXXX XXXXXXXXXX X XXXXXX XXX XXXXXXX
       0.1150192E+01 I	XXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5839747E-01 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1258E+03  0.2505E+03  0.3752E+03  0.5000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.2626150E+02 -							X
       0.2516970E+02 I
       0.2407790E+02 I
       0.2298611E+02 I
       0.2189431E+02 I
       0.2080252E+02 I
       0.1971072E+02 -
       0.1861893E+02 I
       0.1752713E+02 I							X
       0.1643533E+02 I							X
       0.1534354E+02 I
       0.1425174E+02 I
       0.1315995E+02 -							X
       0.1206815E+02 I
       0.1097635E+02 I							X
       0.9884558E+01 I						       XX
       0.8792763E+01 I						       X
       0.7700968E+01 I						       X
       0.6609171E+01 -						      XX
       0.5517376E+01 I						      X
       0.4425579E+01 I						    XX
       0.3333784E+01 I						 XXX
       0.2241987E+01 I					  XXXXXXXX
       0.1150192E+01 I		       XXXXXXXXXXXXXXXXXXXX
       0.5839747E-01 -	XXXXXXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1258E+03  0.2505E+03  0.3752E+03  0.5000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Cramer, Mathematical Methods of Statistics, 1946, pages 219-220.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     112-136.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 88.



				 July 20, 2023		    lgnran(3m_datapac)
loc(3m_datapac) 					       loc(3m_datapac)



NAME
  loc(3f) - [M_datapac:STATISTICS] print the sample mean, midrange, midmean,
  and median


SYNOPSIS
  SUBROUTINE LOC(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in) :: N


DESCRIPTION
  LOC(3f) computes 4 estimates of the location (typical value, measure of
  central tendency) of the data in the input vector X.

  the 4 estimators employed are--

    1.	the sample midrange;

    2.	the sample mean;

    3.	the sample midmean; and

    4.	the sample median.

  The above 4 estimators are near-optimal estimators of location for shorter-
  tailed symmetric distributions, moderate-tailed distributions, moderate-
  long-tailed distributions, and long-tailed distributions, respectively.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

OUTPUT
  1/4 page of automatic output consisting of the following 4 estimates of
  location for the data in the input vector X

    1.	The sample midrange;

    2.	The sample mean;

    3.	The sample midmean; and

    4.	The sample median.

EXAMPLES
  Sample program:

       program demo_loc
       use M_datapac, only : loc, label
       implicit none
       integer ::  i
       real, allocatable ::  x(:), y(:)
	  call label('loc')
	  y=[(real(i)/10.0,i=1,20000)]
	  x=y**3.78-6*y**2.52+9*y**1.26
	  call loc(y,size(y))
       end program demo_loc

  Results:

				    Estimates of the Location Parameter

					(The sample size N =	30)



    The sample midrange is
      0.15500000E+01

    The sample mean is
      0.15500000E+01

    The sample 25 percent trimmed mean is
      0.15500001E+01

    The sample median is
      0.15500000E+01

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Dixon and Massey, pages 14, 70, and 71

  •  Crow, Journal of the American Statistical Association, pages 357 and 387

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, page 8.



				 July 20, 2023		       loc(3m_datapac)
logcdf(3m_datapac)					    logcdf(3m_datapac)



NAME
  logcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the logistic
  cumulative distribution function


SYNOPSIS
  SUBROUTINE LOGCDF(X,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  LOGCDF(3f) computes the cumulative distribution function value for the
  logistic distribution with mean = 0 and standard deviation = pi/sqrt(3).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = exp(X)/(1+exp(X))


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_logcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : logcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('logcdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call logcdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_logcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -							X
       0.9166666E+02 I							X
       0.8333334E+02 I							X
       0.7500000E+02 I							X
       0.6666667E+02 I							X
       0.5833334E+02 I							X
       0.5000000E+02 -							X
       0.4166667E+02 I						       X
       0.3333334E+02 I						      XX
       0.2500000E+02 I						   XXX
       0.1666667E+02 I					      XXXXX
       0.8333336E+01 I				      XXXXXXXX
       0.0000000E+00 -			   XX XXXXX XX
      -0.8333328E+01 I		   XXXXXXXX
      -0.1666666E+02 I	      XXXXX
      -0.2499999E+02 I	   XXX
      -0.3333333E+02 I	 XX
      -0.4166666E+02 I	 X
      -0.5000000E+02 -	X
      -0.5833333E+02 I	X
      -0.6666666E+02 I	X
      -0.7500000E+02 I	X
      -0.8333333E+02 I	X
      -0.9166666E+02 I	X
      -0.1000000E+03 -	X
			I-----------I-----------I-----------I-----------I
		 0.4540E-04  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     1-21.



				 July 20, 2023		    logcdf(3m_datapac)
logpdf(3m_datapac)					    logpdf(3m_datapac)



NAME
  logpdf(3f) - [M_datapac:PROBABILITY_DENSITY] compute the logistic
  probability density function


SYNOPSIS
  SUBROUTINE LOGPDF(X,Pdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Pdf


DESCRIPTION
  LOGPDF(3f) computes the probability density function value for the logistic
  distribution with mean = 0 and standard deviation = pi/sqrt(3).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = exp(X)/(1+exp(X))


INPUT ARGUMENTS
  X The value at which the probability density function is to be evaluated.

OUTPUT ARGUMENTS
  PDF
    the probability density function value.

EXAMPLES
  Sample program:

     program demo_logpdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : logpdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('logpdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call logpdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_logpdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -	X
       0.9166666E+02 I	X
       0.8333334E+02 I	X
       0.7500000E+02 I	X
       0.6666667E+02 I	X
       0.5833334E+02 I	XX
       0.5000000E+02 -	 XX
       0.4166667E+02 I	  XXX
       0.3333334E+02 I	     XXXXX
       0.2500000E+02 I		 XXXXX XXX X
       0.1666667E+02 I			    X XX X X XX X
       0.8333336E+01 I					  X X XX X XXX
       0.0000000E+00 -						      XXX
      -0.8333328E+01 I					  X X XX X XXX
      -0.1666666E+02 I			    X XX X X XX X
      -0.2499999E+02 I		 XXXXX XXX X
      -0.3333333E+02 I	     XXXXX
      -0.4166666E+02 I	  XXX
      -0.5000000E+02 -	 XX
      -0.5833333E+02 I	XX
      -0.6666666E+02 I	X
      -0.7500000E+02 I	X
      -0.8333333E+02 I	X
      -0.9166666E+02 I	X
      -0.1000000E+03 -	X
			I-----------I-----------I-----------I-----------I
		 0.4540E-04  0.6253E-01  0.1250E+00  0.1875E+00  0.2500E+00

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     1-21.



				 July 20, 2023		    logpdf(3m_datapac)
logplt(3m_datapac)					    logplt(3m_datapac)



NAME
  logplt(3f) - [M_datapac:LINE_PLOT] generate a logistic probability plot


SYNOPSIS
  SUBROUTINE LOGPLT(X,N)

	 INTEGER,intent(in) :: N
	 REAL(kind=wp),intent(in) :: X(:)


DESCRIPTION
  LOGPLT(3f) generates a logistic probability plot.

  The prototype logistic distribution used herein has mean = 0 and standard
  deviation = pi/sqrt(3). This distribution is defined for all X and has the
  probability density function

	 f(X) = exp(X) / (1+exp(X))

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The logistic probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the logistic distribution.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

OUTPUT
  A one-page logistic probability plot.

EXAMPLES
  Sample program:

     program demo_logplt
     use M_datapac, only : logplt
     implicit none
     ! call logplt(x,y)
     end program demo_logplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     1-21.



				 July 20, 2023		    logplt(3m_datapac)
logppf(3m_datapac)					    logppf(3m_datapac)



NAME
  logppf(3f) - [M_datapac:PERCENT_POINT] compute the logistic percent point
  function


SYNOPSIS
  SUBROUTINE LOGPPF(P,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  LOGPPF(3f) computes the percent point function value for the logistic
  distribution with mean = 0 and standard deviation = pi/sqrt(3).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = exp(X)/(1+exp(X))

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value at which the percent point function is to be evaluated.

    P should be between 0.0 and 1.0, exclusively.

OUTPUT ARGUMENTS
  PPF
    The percent point function value.

EXAMPLES
  Sample program:

     program demo_logppf
     use M_datapac, only : logppf, plott, label
     implicit none
     integer,parameter :: n=40
     real	       :: x(n), y(n)
     integer	       :: i
	call label('logppf')
	x=[(real(i)/real(n+1),i=1,n)]
	do i=1,n
	   call logppf(x(i),y(i))
	enddo
	call plott(x,y,n)
     end program demo_logppf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.9756098E+00 -							X
       0.9359756E+00 I						 X X
       0.8963415E+00 I					     XX
       0.8567073E+00 I					   X
       0.8170732E+00 I					 XX
       0.7774390E+00 I					X
       0.7378049E+00 -				       X
       0.6981707E+00 I				     XX
       0.6585366E+00 I				    X
       0.6189024E+00 I				   XX
       0.5792683E+00 I				  X
       0.5396341E+00 I				 X
       0.5000000E+00 -				X
       0.4603658E+00 I			       X
       0.4207317E+00 I			      X
       0.3810976E+00 I			    XX
       0.3414634E+00 I			    X
       0.3018292E+00 I			  XX
       0.2621951E+00 -			 X
       0.2225609E+00 I			X
       0.1829268E+00 I		      XX
       0.1432927E+00 I		     X
       0.1036585E+00 I		  XX
       0.6402433E-01 I	     X X
       0.2439024E-01 -	X
			I-----------I-----------I-----------I-----------I
		-0.3689E+01 -0.1844E+01  0.4768E-06  0.1844E+01  0.3689E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     1-21.



				 July 20, 2023		    logppf(3m_datapac)
logran(3m_datapac)					    logran(3m_datapac)



NAME
  logran(3f) - [M_datapac:RANDOM] generate logistic random numbers


SYNOPSIS
  SUBROUTINE LOGRAN(N,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  LOGRAN(3f) generates a random sample of size N from the logistic
  distribution with mean = 0 and standard deviation = pi/sqrt(3).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = exp(X)/(1+exp(X))


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the logistic distribution will be placed.

EXAMPLES
  Sample program:

     program demo_logran
     use m_datapac, only : logran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=4000
     integer	       :: iseed
     real	       :: x(n)
	call label('logran')
	iseed=12345
	call logran(N,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_logran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1011046E+02 -	 X
       0.9310020E+01 I
       0.8509579E+01 I			 X
       0.7709137E+01 I				X
       0.6908696E+01 I					  X
       0.6108254E+01 I		 X	X X	     X	    X  XXX
       0.5307813E+01 -	 X	  X X X XX X	    X X 	X X    X
       0.4507371E+01 I	  X X  X      X XXX    XXXX XXX  X X X XX X  X X
       0.3706930E+01 I	XXXXXXXXXXXXX XX XX XXX XXXXXXXXXXXXXXXXX X XXXXX
       0.2906488E+01 I	XXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.2106047E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1305605E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5051632E+00 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.2952785E+00 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.1095719E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.1896161E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.2696603E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXX XXXX XXXXXXXXXXXXXXXXXX
      -0.3497045E+01 I	XX XXXX XXXXX XXXXXXXX	XX XXXX XXXX XXXXXXXXXXXX
      -0.4297486E+01 -	XXX XXXXXXX XX X XXX  XXX XXXX XXXXX   X X XXXX
      -0.5097927E+01 I	     XX X     X X XXX XX X    XXXX	 X   XXX
      -0.5898369E+01 I	      X 	 X   X	XX XXX	X	   X
      -0.6698811E+01 I		     X
      -0.7499252E+01 I			     X
      -0.8299694E+01 I
      -0.9100137E+01 -						X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1011046E+02 -							X
       0.9310020E+01 I
       0.8509579E+01 I							X
       0.7709137E+01 I							X
       0.6908696E+01 I							X
       0.6108254E+01 I							X
       0.5307813E+01 -							X
       0.4507371E+01 I						       XX
       0.3706930E+01 I						      XX
       0.2906488E+01 I						    XXX
       0.2106047E+01 I						XXXXX
       0.1305605E+01 I					 XXXXXXXX
       0.5051632E+00 -				 XXXXXXXXX
      -0.2952785E+00 I			XXXXXXXXXX
      -0.1095719E+01 I		 XXXXXXXX
      -0.1896161E+01 I	    XXXXXX
      -0.2696603E+01 I	  XXX
      -0.3497045E+01 I	 XX
      -0.4297486E+01 -	XX
      -0.5097927E+01 I	X
      -0.5898369E+01 I	X
      -0.6698811E+01 I	X
      -0.7499252E+01 I	X
      -0.8299694E+01 I
      -0.9100137E+01 -	X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, page 230.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     1-21.



				 July 20, 2023		    logran(3m_datapac)
logsf(3m_datapac)					     logsf(3m_datapac)



NAME
  logsf(3f) - [M_datapac:SPARSITY] compute the logistic sparsity function


SYNOPSIS
  SUBROUTINE LOGSF(P,Sf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Sf


DESCRIPTION
  LOGSF(3f) computes the sparsity function value for the logistic distribution
  with mean = 0 and standard deviation = pi/sqrt(3).

  This distribution is defined for all X and has the probability density
  function

	 f(X) = exp(X)/(1+exp(X))

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of P rather than X).

INPUT ARGUMENTS
  P The value at which the sparsity function is to be evaluated.  P should be
    between 0.0 and 1.0, exclusively.

OUTPUT ARGUMENTS
  SF
    The sparsity function value.

EXAMPLES
  Sample program:

     program demo_logsf
     use M_datapac, only : logsf
     implicit none
     ! call logsf(x,y)
     end program demo_logsf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     1-21.



				 July 20, 2023		     logsf(3m_datapac)
max(3m_datapac) 					       max(3m_datapac)



NAME
  max(3f) - [M_datapac:VECTOR_OPERATION] MAX compute the maximum of a data
  vector


SYNOPSIS
  SUBROUTINE MAX(X,N,Iwrite,Xmax)

	 REAL(kind=wp) :: X(:) , Xmax
	 INTEGER :: Iwrite , N


DESCRIPTION
  MAX(3f) computes the sample maximum of the data in the input vector x.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample maximum as it is computed; or (if set to some integer value not
    equal to 0), like, say, 1) will cause the printing of the sample maximum
    at the time it is computed.

OUTPUT ARGUMENTS
  XMAX
    The value of the computed sample maximum.

EXAMPLES
  Sample program:

     program demo_max
     !use M_datapac, only : max, label
     use M_datapac, only : intel_max=>max, label !  ifort (IFORT) 2021.3.0 20210609 bug

     implicit none
     real :: xmax
	call label('max')
	call intel_max([-100.0, 200.0, 0.0, 400.0, -200.0],5,1,xmax)
	!call max([-100.0, 200.0, 0.0, 400.0, -200.0],5,1,xmax)
	write(*,*)xmax
     end program demo_max

  Results:

      THE MAXIMUM OF THE SET OF 5 OBSERVATIONS IS  0.40000000E+03
	400.000000


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  David, Order Statistics, 1970, page 7.



				 July 20, 2023		       max(3m_datapac)
ev1ppf(3m_datapac)					    ev1ppf(3m_datapac)



NAME
  ev1ppf(3f) - [M_datapac:PERCENT_POINT] compute the extreme value type 1
  (Gumbel) percent point function


SYNOPSIS
  SUBROUTINE EV1PPF(P,Ppf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  EV1PPF(3f) computes the percent point function value for the extreme value
  type 1 distribution.

  The extreme value type 1 distribution used herein has mean = Euler's number
  = 0.57721566 and standard deviation = pi/sqrt(6) = 1.28254983.

  This distribution is defined for all x and has the probability density
  function

	 f(x) = (exp(-x)) * (exp(-(exp(-x))))

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0 exclusively) at which the percent point
    function is to be evaluated.

OUTPUT ARGUMENTS
  PPF
    The  percent point function value for the extreme value type 1
    distribution with mean = Euler's number = 0.57721566 and standard
    deviation = pi/sqrt(6) = 1.28254983.

EXAMPLES
  Sample program:

     program demo_ev1ppf
     use M_datapac, only : ev1ppf
     implicit none
     ! call ev1ppf(x,y)
     end program demo_ev1ppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     272-295.



				 July 20, 2023		    ev1ppf(3m_datapac)
ev1ran(3m_datapac)					    ev1ran(3m_datapac)



NAME
  ev1ran(3f) - [M_datapac:RANDOM] generate extreme value type 1 (Gumbel)
  random numbers


SYNOPSIS
  SUBROUTINE EV1RAN(N,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  EV1RAN(3f) generates a random sample of size N from the extreme value type 1
  distribution.

  The prototype extreme value type 1 distribution used herein has mean =
  Euler's number = 0.57721566 and standard deviation = pi/sqrt(6) =
  1.28254983. This distribution is defined for all X and has the probability
  density function

	 f(X) = (exp(-X)) * (exp(-(exp(-X))))


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the extreme value type 1 distribution will be placed.

EXAMPLES
  Sample program:

     program demo_ev1ran
     use m_datapac, only : ev1ran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=4000
     real :: x(n)
     integer :: iseed
	call label('ev1ran')
	iseed=12345
	call ev1ran(n,iseed,x)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_ev1ran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1011052E+02 -	 X
       0.9597239E+01 I
       0.9083955E+01 I
       0.8570670E+01 I
       0.8057385E+01 I			 X
       0.7544101E+01 I				X
       0.7030817E+01 -					  X
       0.6517532E+01 I			X		       X
       0.6004248E+01 I		 X	  X	     X	    X	XX
       0.5490964E+01 I	 X	      X XX X	    X X 	X X
       0.4977679E+01 I	  X X	  X X		X   XXX  X   X	     X X
       0.4464395E+01 I	  X	      X XXX    X XX X X    X   XX X    X
       0.3951111E+01 -	X X XX XXXXXX X   X XXX XXX XXXXX XXX XXX X XXXXX
       0.3437826E+01 I	XXXXXXXXXXXXXX XXXXXXXX XX XX XXXX X X XX  XXXXXX
       0.2924542E+01 I	XXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.2411257E+01 I	XXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXX
       0.1897973E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXX
       0.1384688E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.8714046E+00 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.3581200E+00 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.1551647E+00 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.6684484E+00 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.1181733E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.1695018E+01 I	X   XXX XX  XXXXXXXXXXXXXXXXXXXXXXX    X X XXXXX
      -0.2208302E+01 -			     X			X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1011052E+02 -							X
       0.9597239E+01 I
       0.9083955E+01 I
       0.8570670E+01 I
       0.8057385E+01 I							X
       0.7544101E+01 I							X
       0.7030817E+01 -							X
       0.6517532E+01 I							X
       0.6004248E+01 I							X
       0.5490964E+01 I							X
       0.4977679E+01 I							X
       0.4464395E+01 I						       XX
       0.3951111E+01 -						       X
       0.3437826E+01 I						      XX
       0.2924542E+01 I						     XX
       0.2411257E+01 I						   XXX
       0.1897973E+01 I					       XXXXX
       0.1384688E+01 I					  XXXXXX
       0.8714046E+00 -				   XXXXXXXX
       0.3581200E+00 I			   XXXXXXXXX
      -0.1551647E+00 I		   XXXXXXXXX
      -0.6684484E+00 I	    XXXXXXXX
      -0.1181733E+01 I	 XXXX
      -0.1695018E+01 I	XX
      -0.2208302E+01 -	X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     272-295.



				 July 20, 2023		    ev1ran(3m_datapac)
ev2cdf(3m_datapac)					    ev2cdf(3m_datapac)



NAME
  ev2cdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the extreme value
  type 2 (Frechet) cumulative distribution function


SYNOPSIS
  SUBROUTINE EV2CDF(X,Gamma,Cdf)

	 REAL(kind=wp),intent(in) :: X
	 REAL(kind=wp),intent(in) :: Gamma
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  EV2CDF(3f) computes the cumulative distribution function value for the
  extreme value type 2 distribution with REAL tail length parameter = GAMMA.

  The extreme value type 2 distribution used herein is defined for all non-
  negative X, and has the probability density function

	 f(X) = GAMMA * (X**(-GAMMA-1)) * exp(-(X**(-GAMMA)))


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the extreme value type 2
    distribution with tail length parameter value = GAMMA.

EXAMPLES
  Sample program:

     program demo_ev2cdf
     use M_datapac, only : ev2cdf
     implicit none
     ! call ev2cdf(x,y)
     end program demo_ev2cdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     272-295.



				 July 20, 2023		    ev2cdf(3m_datapac)
ev2plt(3m_datapac)					    ev2plt(3m_datapac)



NAME
  ev2plt(3f) - [M_datapac:LINE_PLOT] generate a extreme value type 2 (Frechet)
  probability plot


SYNOPSIS
  SUBROUTINE EV2PLT(X,N,Gamma)

DESCRIPTION
  ev2plt(3f) generates a extreme value type 2 probability plot (with tail
  length parameter value = gamma).

  the prototype extreme value type 2 distribution used n herein is defined for
  all non-negative x, and has the probability density function

	 f(x) = gamma * (x**(-gamma-1)) * exp(-(x**(-gamma))).

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the extreme value type 2 probability plot is useful in graphically testing
  the composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the extreme value type 2 distribution with tail length
  parameter value = gamma.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_ev2plt
     use M_datapac, only : ev2plt
     implicit none
     ! call ev2plt(x,y)
     end program demo_ev2plt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
	272-295.



				 July 20, 2023		    ev2plt(3m_datapac)
ev2ppf(3m_datapac)					    ev2ppf(3m_datapac)



NAME
  ev2ppf(3f) - [M_datapac:PERCENT_POINT] compute the extreme value type 2
  (Frechet) percent point function


SYNOPSIS
  SUBROUTINE EV2PPF(P,Gamma,Ppf)

	 REAL(kind=wp),intent(in) :: P
	 REAL(kind=wp),intent(in) :: Gamma
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  EV2PPF(3f) computes the percent point function value for the extreme value
  type 2 distribution with REAL tail length parameter = GAMMA.

  The extreme value type 2 distribution used herein is defined for all non-
  negative X, and has the probability density function

	 f(X) = GAMMA * (X**(-GAMMA-1)) * exp(-(X**(-GAMMA)))

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (exclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  PPF
    The percent point function value for the extreme value type 2 distribution
    with tail length parameter value = GAMMA.

EXAMPLES
  Sample program:

     program demo_ev2ppf
     use M_datapac, only : ev2ppf
     implicit none
     ! call ev2ppf(x,y)
     end program demo_ev2ppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     272-295.



				 July 20, 2023		    ev2ppf(3m_datapac)
ev2ran(3m_datapac)					    ev2ran(3m_datapac)



NAME
  ev2ran(3f) - [M_datapac:RANDOM] generate extreme value type 2 (Frechet)
  random numbers


SYNOPSIS
  SUBROUTINE EV2RAN(N,Gamma,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(in)  :: Gamma
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  EV2RAN(3f) generates a random sample of size N from the extreme value type 2
  distribution with tail length parameter value = GAMMA.

  The prototype extreme value type 2 distribution used herein is defined for
  all non-negative X, and has the probability density function

	 f(X) = GAMMA * (X**(-GAMMA-1)) * exp(-(X**(-GAMMA)))


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

  GAMMA
    The value of the tail length parameter. GAMMA should be positive.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the extreme value type 2 distribution will be placed.

EXAMPLES
  Sample program:

     program demo_ev2ran
     use m_datapac, only : ev2ran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=8000
     real :: x(n)
     integer :: iseed
     real :: gamma
	call label('ev2ran')
	gamma=3.4
	iseed=12345
	call ev2ran(N,Gamma,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_ev2ran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1956361E+02 -	 X
       0.1876934E+02 I
       0.1797507E+02 I
       0.1718080E+02 I
       0.1638653E+02 I
       0.1559226E+02 I					 X
       0.1479799E+02 -
       0.1400372E+02 I
       0.1320944E+02 I
       0.1241517E+02 I
       0.1162090E+02 I		X
       0.1082663E+02 I						     X
       0.1003236E+02 -
       0.9238092E+01 I		    X		    X
       0.8443822E+01 I
       0.7649551E+01 I			 X			       X
       0.6855281E+01 I		X	   X		 X
       0.6061010E+01 I	     X	 X    X   X X			 X    X
       0.5266740E+01 -	 X     XXX    XX    X	   X   X X	 X  X  X
       0.4472469E+01 I	 XX  XX     X XX X XXX XX  X  XX X     X X X X X
       0.3678199E+01 I	 XX X  XXX XXXXX XX XX XX XX XXXX  XXXXXXX XXXXXX
       0.2883928E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.2089659E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1295387E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5011185E+00 -	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.2001E+04  0.4000E+04  0.6000E+04  0.8000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.1956361E+02 -							X
       0.1876934E+02 I
       0.1797507E+02 I
       0.1718080E+02 I
       0.1638653E+02 I
       0.1559226E+02 I							X
       0.1479799E+02 -
       0.1400372E+02 I
       0.1320944E+02 I
       0.1241517E+02 I
       0.1162090E+02 I							X
       0.1082663E+02 I							X
       0.1003236E+02 -
       0.9238092E+01 I							X
       0.8443822E+01 I
       0.7649551E+01 I							X
       0.6855281E+01 I							X
       0.6061010E+01 I							X
       0.5266740E+01 -							X
       0.4472469E+01 I							X
       0.3678199E+01 I						       XX
       0.2883928E+01 I						      XX
       0.2089659E+01 I						 XXXXXX
       0.1295387E+01 I		   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5011185E+00 -	XXXXXXXXXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.2001E+04  0.4000E+04  0.6000E+04  0.8000E+04


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14-15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     272-295.



				 July 20, 2023		    ev2ran(3m_datapac)
expcdf(3m_datapac)					    expcdf(3m_datapac)



NAME
  expcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the exponential
  cumulative distribution function


SYNOPSIS
  SUBROUTINE EXPCDF(X,Cdf)

	 REAL(kind=wp),intent(in) :: X
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  EXPCDF(3f) computes the cumulative distribution function value for the
  exponential distribution with mean = 1 and standard deviation = 1.

  This distribution is defined for all non-negative X, and has the probability
  density function

	f(x) = exp(-x)


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_expcdf
     use M_datapac, only : expcdf
     implicit none
     ! call expcdf(x,y)
     end program demo_expcdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     207-232.



				 July 20, 2023		    expcdf(3m_datapac)
exppdf(3m_datapac)					    exppdf(3m_datapac)



NAME
  exppdf(3f) - [M_datapac:PROBABILITY_DENSITY] compute the exponential
  probability density function


SYNOPSIS
  SUBROUTINE EXPPDF(X,Pdf)

	 REAL(kind=wp),intent(in) :: X
	 REAL(kind=wp),intent(out) :: Pdf


DESCRIPTION
  EXPPDF(3f) computes the probability density function value for the
  exponential distribution with mean = 1 and standard deviation = 1.

  This distribution is defined for all non-negative X, and has the probability
  density function

	f(X) = exp(-X)


INPUT ARGUMENTS
  X The value at which the probability density function is to be evaluated.
    Values should be non-negative.

OUTPUT ARGUMENTS
  PDF
    The probability density function value.

EXAMPLES
  Sample program:

     program demo_exppdf
     !@(#) line plotter graph of probability density function
     use M_datapac, only : exppdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('exppdf')
	x=[(real(i),i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call exppdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_exppdf
  ``` Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -	X
       0.9583334E+02 I	X
       0.9166666E+02 I	X
       0.8750000E+02 I	X
       0.8333334E+02 I	X
       0.7916667E+02 I	X
       0.7500000E+02 -	X
       0.7083334E+02 I	X
       0.6666667E+02 I	X
       0.6250000E+02 I	X
       0.5833334E+02 I	X
       0.5416667E+02 I	X
       0.5000000E+02 -	X
       0.4583334E+02 I	XX
       0.4166667E+02 I	 X
       0.3750000E+02 I	 X
       0.3333334E+02 I	 XX
       0.2916667E+02 I	  XX
       0.2500000E+02 -	   XXX
       0.2083334E+02 I	     XXX
       0.1666667E+02 I		XXXX
       0.1250000E+02 I		    XXX X
       0.8333336E+01 I			  X X X X
       0.4166672E+01 I				  X  X	X   X
       0.0000000E+00 -					       X   X	X
			I-----------I-----------I-----------I-----------I
		 0.4540E-04  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     207-232.



				 July 20, 2023		    exppdf(3m_datapac)
betran(3m_datapac)					    betran(3m_datapac)



NAME
  betran(3f) - [M_datapac:RANDOM] generate beta random numbers


SYNOPSIS
  subroutine BETRAN (N,Alpha,Beta,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: Alpha
	 REAL(kind=wp),intent(in)  :: Beta
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  BETRAN(3f) generates a random sample of size N from the beta distribution
  with shape parameters ALPHA and BETA.

  The prototype beta distribution used herein has

	mean = ALPHA/(ALPHA+BETA)

  and

	standard_deviation=sqrt((ALPHA*BETA)/((ALPHA+BETA)**2)*(ALPHA+BETA+1))

  This distribution is defined for all X between 0.0 (inclusively) and 1.0
  (inclusively) and has the probability density function

	f(x) = (1/constant) * x**(alpha-1) * (1.0-x)**(beta-1)

  where the constant = the beta function evaluated at the values ALPHA and
  BETA.

OPTIONS
  N The desired integer number of random numbers to be generated.

  ALPHA
    The value of the first shape parameter.  ALPHA should be greater than or
    equal to 1.0.

  BETA
    The value of the second shape parameter.  BETA should be greater than or
    equal to 1.0.

  ISEED
    An integer iseed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT
  X A random sample of size N from the beta distribution with shape parameter
    values ALPHA and BETA.

    A vector (of dimension at least N) into which the generated random sample
    will be placed.

EXAMPLES
  Sample program:

     program demo_betran
     use M_datapac, only : betran
     implicit none
     ! call betran(x,y)
     end program demo_betran

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Greenwood, 'A Fast Generator for Beta-distributed Random Variables',
     Compstat 1974, Proceedings in Computational Statistics, Vienna,
     September, 1974, pages 19-27.

  •  Tocher, The Art of Simulation, 1963, pages 24-27.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, pages 36-37.

  •  Johnson and Kotz, Continuous Univariate Distributions --2, 1970, pages
     37-56.

  •  Hastings and Peacock, Statistical Distributions--A Handbook For Students
     and Practitioners, 1975, pages 30-35.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     952.



				 July 20, 2023		    betran(3m_datapac)
binran(3m_datapac)					    binran(3m_datapac)



NAME
  binran(3f) - [M_datapac:RANDOM] generate binomial random numbers


SYNOPSIS
  SUBROUTINE BINRAN(N,P,Npar,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: P
	 INTEGER,intent(in)	   :: Npar
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X


DESCRIPTION
  BINRAN(3f) generates a random sample of size N from the binomial
  distribution with 'Bernoulli probability' parameter = P, and integer 'number
  of bernoulli trials' parameter = NPAR.

  The binomial distribution used herein has mean = NPAR*P and standard
  deviation = sqrt(NPAR*P*(1-P)).

  This distribution is defined for all discrete integer X between 0
  (inclusively) and NPAR (inclusively). This distribution has the probability
  function

	 f(X) = c(NPAR,X) * P**X * (1-P)**(NPAR-X)

  Where c(NPAR,X) is the combinatorial function equaling the number of
  combinations of NPAR items taken X at a time.

  The binomial distribution is the distribution of the number of successes in
  NPAR Bernoulli (0,1) trials where the probability of success in a precision
  trial = P.

OPTIONS
INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  P The value of the 'Bernoulli probability' parameter for the binomial
    distribution. P should be between 0.0 (exclusively) and 1.0 (exclusively).

  ISEED
    An integer iseed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

  NPAR
    The integer value of the 'number of Bernoulli trials' parameter. NPAR
    should be a positive integer.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the binomial distribution will be placed; with 'Bernoulli
    probability' parameter = P and 'number of Bernoulli trials' parameter =
    NPAR.

EXAMPLES
  Sample program:

     program demo_binran
     use M_datapac, only : binran
     implicit none
     real :: x(40), P
     integer :: N, Npar, Iseed
	Iseed=0
	P=0.88
	N=size(x)
	Npar=11111
	call BINRAN(N,P,Npar,Iseed,X)
	write(*,*)X
     end program demo_binran

  Results:

	9746.000       9795.000       9855.000	     9805.000	    9787.000
	9746.000       9764.000       9774.000	     9767.000	    9752.000
	9770.000       9784.000       9821.000	     9805.000	    9784.000
	9734.000       9805.000       9813.000	     9792.000	    9785.000
	9784.000       9815.000       9785.000	     9748.000	    9718.000
	9728.000       9824.000       9782.000	     9776.000	    9850.000
	9770.000       9821.000       9819.000	     9724.000	    9783.000
	9789.000       9813.000       9798.000	     9747.000	    9785.000


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Discrete Distributions, 1969, pages 50-86.

  •  Hastings and Peacock, Statistical Distributions, A Handbook for Students
     and Practitioners, 1975, page 41.

  •  Feller, An Introduction to Probability Theory and Its Applications,
     Volume 1, Edition 2, 1957, pages 135-142.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     929.

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 120-125.

  •  Mood and Grable, Introduction to the Theory of Statistics, Edition 2,
     1963, pages 64-69.

  •  Tocher, The Art Of Simulation, 1963, pages 39-40.



				 July 20, 2023		    binran(3m_datapac)
caucdf(3m_datapac)					    caucdf(3m_datapac)



NAME
  caucdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the Cauchy
  cumulative distribution function


SYNOPSIS
  subroutine caucdf(X,Cdf)

	 real(kind=wp),intent(in)  :: X
	 real(kind=wp),intent(out) :: Cdf


DESCRIPTION
  CAUCDF(3f) computes the cumulative distribution function value for the
  Cauchy distribution with median = 0 and 75% point = 1.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/pi)*(1/(1+X*X))


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_caucdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : caucdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('caucdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call caucdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_caucdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -							X
       0.9166666E+02 I							X
       0.8333334E+02 I							X
       0.7500000E+02 I						       XX
       0.6666667E+02 I						       X
       0.5833334E+02 I						       X
       0.5000000E+02 -						      XX
       0.4166667E+02 I						     XX
       0.3333334E+02 I						    XX
       0.2500000E+02 I						  XXX
       0.1666667E+02 I					       XXXX
       0.8333336E+01 I					XXXXXXX
       0.0000000E+00 -			  XX XX X XX XX
      -0.8333328E+01 I		  XXXXXXX
      -0.1666666E+02 I	      XXXX
      -0.2499999E+02 I	    XXX
      -0.3333333E+02 I	   XX
      -0.4166666E+02 I	  XX
      -0.5000000E+02 -	 XX
      -0.5833333E+02 I	 X
      -0.6666666E+02 I	 X
      -0.7500000E+02 I	XX
      -0.8333333E+02 I	X
      -0.9166666E+02 I	X
      -0.1000000E+03 -	X
			I-----------I-----------I-----------I-----------I
		 0.3173E-01  0.2659E+00  0.5000E+00  0.7341E+00  0.9683E+00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions -- 1, 1970, pages
     154-165.



				 July 20, 2023		    caucdf(3m_datapac)
caupdf(3m_datapac)					    caupdf(3m_datapac)



NAME
  caupdf(3f) - [M_datapac:PROBABILITY_DENSITY] compute the Cauchy probability
  density function


SYNOPSIS
  subroutine caupdf(X,Pdf)

	 real(kind=wp),intent(in) :: X
	 real(kind=wp),intent(out):: Pdf


DESCRIPTION
  CAUPDF(3f) computes the probability density function value for the Cauchy
  distribution with median = 0 and 75% point = 1.

  This distribution is defined for all X and has the probability density
  function

	 f(x) = (1/pi)*(1/(1+x*x))


INPUT ARGUMENTS
  X The value at which the probability density function is to be evaluated.

OUTPUT ARGUMENTS
  PDF
    The probability density function value.

EXAMPLES
  Sample program:

      program demo_caupdf
      !@(#) line plotter graph of probability density function
      use M_datapac, only : caupdf, plott, label
      implicit none
      real,allocatable	:: x(:), y(:)
      integer		:: i
	 call label('caupdf')
	 x=[(real(i),i=-100,100,1)]
	 if(allocated(y))deallocate(y)
	 allocate(y(size(x)))
	 do i=1,size(x)
	    call caupdf(x(i)/10.0,y(i))
	 enddo
	 call plott(x,y,size(x))
      end program demo_caupdf

  Results:

      The following is a plot of Y(i) (vertically) versus X(i) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -	X
       0.9166666E+02 I	X
       0.8333334E+02 I	X
       0.7500000E+02 I	X
       0.6666667E+02 I	XX
       0.5833334E+02 I	 X
       0.5000000E+02 -	 XX
       0.4166667E+02 I	  XX
       0.3333334E+02 I	   XX
       0.2500000E+02 I	     XXXX
       0.1666667E+02 I		 XXXXXX X X
       0.8333336E+01 I			   X X	X X  X	X  X  X
       0.0000000E+00 -						 X  X X X
      -0.8333328E+01 I			   X X	X X  X	X  X  X
      -0.1666666E+02 I		 XXXXXX X X
      -0.2499999E+02 I	     XXXX
      -0.3333333E+02 I	   XX
      -0.4166666E+02 I	  XX
      -0.5000000E+02 -	 XX
      -0.5833333E+02 I	 X
      -0.6666666E+02 I	XX
      -0.7500000E+02 I	X
      -0.8333333E+02 I	X
      -0.9166666E+02 I	X
      -0.1000000E+03 -	X
			I-----------I-----------I-----------I-----------I
		 0.3152E-02  0.8194E-01  0.1607E+00  0.2395E+00  0.3183E+00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions -- 1, 1970, pages
     154-165.



				 July 20, 2023		    caupdf(3m_datapac)
causf(3m_datapac)					     causf(3m_datapac)



NAME
  causf(3f) - [M_datapac:SPARSITY] compute the Cauchy sparsity function


SYNOPSIS
  SUBROUTINE CAUSF(P,Sf)

	 REAL(kind=wp) :: P
	 REAL(kind=wp) :: Sf


DESCRIPTION
  CAUSF(3f) computes the sparsity function value for the cauchy distribution
  with median = 0 and 75% point = 1.

  This distribution is defined for all X and has the probability density

	 function f(X) = (1/pi)*(1/(1+X*X))

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of p rather than x).

INPUT ARGUMENTS
  P the value (between 0.0 and 1.0) at which the sparsity function is to be
    evaluated. P should be between 0.0 and 1.0, exclusively.

OUTPUT ARGUMENTS
  SF
    The sparsity function value.

EXAMPLES
  Sample program:

     program demo_causf
     use M_datapac, only : causf
     implicit none
     ! call causf(x,y)
     end program demo_causf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     154-165.



				 July 20, 2023		     causf(3m_datapac)
chscdf(3m_datapac)					    chscdf(3m_datapac)



NAME
  chscdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the chi-square
  cumulative distribution function


SYNOPSIS
  SUBROUTINE CHSCDF(X,Nu,Cdf)

	 REAL(kind=wp),intent(in) :: X
	 REAL(kind=wp),intent(out) :: Cdf
	 INTEGER,intent(in) :: Nu


DESCRIPTION
  CHSCDF(3f) computes the cumulative distribution function value for the chi-
  squared distribution with integer degrees of freedom parameter = NU.

  This distribution is defined for all non-negative X.

  The probability density function is given in the references below.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative.

  NU
    The integer number of degrees of freedom. NU should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_chscdf
     use M_datapac, only : chscdf
     implicit none
     ! call chscdf(x,y)
     end program demo_chscdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     941, Formulae 26.4.4 and 26.4.5.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, page 176,
     Formula 28, and page 180, Formula 33.1.

  •  Owen, Handbook of Statistical Tables, 1962, pages 50-55.

  •  Pearson and Hartley, Biometrika Tables for Statisticians, Volume 1, 1954,
     pages 122-131.



				 July 20, 2023		    chscdf(3m_datapac)
chsplt(3m_datapac)					    chsplt(3m_datapac)



NAME
  chsplt(3f) - [M_datapac:LINE_PLOT] generate a Chi-square probability plot


SYNOPSIS
  SUBROUTINE CHSPLT(X,N,Nu)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in) :: N
	 INTEGER,intent(in) :: Nu


DESCRIPTION
  Chsplt(3f) generates a Chi-squared probability plot (with integer degrees of
  freedom parameter value = NU).

  The prototype Chi-squared distribution used herein is defIned for all non-
  negative X, and its probability density function is given in the references
  below.

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The Chi-squared probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the Chi-squared distribution with degrees of freedom
  parameter value = NU.

  If the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  NU should be
    positive. The maximum allowable value of N for this subroutine is 7500.

  NU
    The integer number of degrees of freedom. NU should be positive.

OUTPUT
  A one-page Chi-squared probability plot.

EXAMPLES
  Sample program:

     program demo_chsplt
     use M_datapac, only : chsplt
     implicit none
     ! call chsplt(x,y)
     end program demo_chsplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Wilk, Gnanadesikan, and Huyett, 'Probability Plots for the Gamma
     Distribution', Technometrics, 1962, pages 1-15.

  •  Filliben, 'Techniques for Tail Length Analysis', Proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     166-206.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 46-51.



				 July 20, 2023		    chsplt(3m_datapac)
chsppf(3m_datapac)					    chsppf(3m_datapac)



NAME
  chsppf(3f) - [M_datapac:PERCENT_POINT] compute the chi-square percent point
  function


SYNOPSIS
  SUBROUTINE CHSPPF(P,Nu,Ppf)

	 REAL(kind=wp) :: P
	 REAL(kind=wp) :: Ppf
	 INTEGER       :: Nu


DESCRIPTION
  CHSPPF(3f) computes the percent point function value for the chi-squared
  distribution with integer degrees of freedom parameter = nu.

  The chi-squared distribution used herein is defined for all non-negative x,
  and its probability density function is given in references 2, 3, and 4
  below.

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 (inclusively) and 1.0 (exclusively)) at which the
    percent point function is to be evaluated.

  NU
    The integer number of degrees of freedom. NU should be positive.

OUTPUT ARGUMENTS
  PPF
    The percent point function value for the chi-squared distribution

ACCURACY
  (On the UNIVAC 1108, EXEC 8 System at NBS) Compared to the known NU = 2
  (exponential) results, agreement was had out to 6 significant

  digits for all tested P in the range P = .001 to P = .999.
    for P = .95 And smaller, The agreement was even better--7 significant
    digits.  (Note that the tabulated values given in the Wilk, Gnanadesikan,
    and Huyett reference below, page 20, are in error for at least the GAMMA =
    1 case-- The worst detected error was agreement to only 3 significant
    digits (in their 8 significant digit table) for P = .999.)

EXAMPLES
  Sample program:

     program demo_chsppf
     use M_datapac, only : chsppf
     implicit none
     ! call chsppf(x,y)
     end program demo_chsppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Wilk, gnanadesikan, and huyett, 'probability plots for the gamma
     Distribution', technometrics, 1962, pages 1-15, especially pages 3-5.

  •  National bureau of standards applied mathematics series 55, 1964, page
     257, formula 6.1.41, and pages 940-943.

  •  Johnson and kotz, continuous univariate distributions--1, 1970, pages
     166-206.

  •  Hastings and peacock, statistical distributions--a handbook for Students
     and practitioners, 1975, pages 46-51.



				 July 20, 2023		    chsppf(3m_datapac)
expplt(3m_datapac)					    expplt(3m_datapac)



NAME
  expplt(3f) - [M_datapac:LINE_PLOT] generate a exponential probability plot


SYNOPSIS
  SUBROUTINE EXPPLT(X,N)

DESCRIPTION
  expplt(3f) generates an exponential probability plot.

  the prototype exponential distribution used herein has mean = 1 and standard
  deviation = 1.

  this distribution is defined for all non-negative x, and has the probability
  density function

	 f(x)=exp(-x).

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  the exponential probability plot is useful in graphically testing the
  composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the exponential distribution.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_expplt
     use M_datapac, only : expplt
     implicit none
     ! call expplt(x,y)
     end program demo_expplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
     260-308.

     •	JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
	207-232.



				 July 20, 2023		    expplt(3m_datapac)
expppf(3m_datapac)					    expppf(3m_datapac)



NAME
  expppf(3f) - [M_datapac:PERCENT_POINT] compute the exponential percent point
  function


SYNOPSIS
  SUBROUTINE EXPPPF(P,Ppf)

	 REAL(kind=wp),intent(in) :: P
	 REAL(kind=wp),intent(out) :: Ppf


DESCRIPTION
  EXPPPF(3f) computes the percent point function value for the exponential
  distribution with mean = 1 and standard deviation = 1.

  This distribution is defined for all non-negative X, and has the probability
  density function

	 f(x) = exp(-x)

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value at which the percent point function is to be evaluated. P Should
    be between 0.0 (inclusively) and 1.0 (exclusively).

OUTPUT ARGUMENTS
  PPF
    The percent point function value.

EXAMPLES
  Sample program:

     program demo_expppf
     use M_datapac, only : expppf
     implicit none
     ! call expppf(x,y)
     end program demo_expppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     207-232.



				 July 20, 2023		    expppf(3m_datapac)
expran(3m_datapac)					    expran(3m_datapac)



NAME
  expran(3f) - [M_datapac:RANDOM] generate exponential random numbers


SYNOPSIS
  SUBROUTINE EXPRAN(N,Iseed,X)

	 INTEGER,intent(in) :: N
	 INTEGER,intent(inout) :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  EXPRAN(3f) generates a random sample of size N from the exponential
  distribution with mean = 1 and standard deviation = 1.

  This distribution is defined for all non-negative X, and has the probability
  density function

	 f(X) = exp(-X)


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the exponential distribution will be placed.

EXAMPLES
  Sample program:

     program demo_expran
     use m_datapac, only : expran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=300
     real :: x(n)
     integer :: iseed
	call label('expran')
	iseed=12345
	call expran(n,iseed,x)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_expran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.4256731E+01 -	 X	   X X
       0.4079369E+01 I				     X
       0.3902006E+01 I
       0.3724644E+01 I	  X
       0.3547282E+01 I			    X
       0.3369920E+01 I			  X		   X
       0.3192558E+01 -
       0.3015196E+01 I
       0.2837834E+01 I					       X
       0.2660472E+01 I	      X 		       X
       0.2483110E+01 I	   X X	X	    X	     X
       0.2305748E+01 I	    X	X X	      XX		XX  X X
       0.2128386E+01 -	X   X	    XX	      X X   X	 X	     X
       0.1951024E+01 I	      X       X X XX	  X X	X
       0.1773661E+01 I		       X      X 	    X	  X  X
       0.1596299E+01 I	  X    X		      X X  X   XX	X
       0.1418937E+01 I	 X	 X X   X       X	  X X
       0.1241575E+01 I	 X   X	 XX		X X  X	   X   XX   X X
       0.1064213E+01 -		      X   X  X X    X XXXX XX XX    X
       0.8868508E+00 I		XXX X	X X	 X XX XX    XX	X XX XX
       0.7094889E+00 I	 XXXXX	XXX X X XX   XX XXX	 X   XX  XXX	X
       0.5321269E+00 I	X XXX XX X  X  X XXX   XXX X   XXX   XXXX      XX
       0.3547647E+00 I	 XXXX XXX XX X XX   XXX X X XXX X XXXXX  XXXX XX
       0.1774025E+00 I	X    XXX XXX XXX X XXXXX XX  X X XX  X X XXXX	X
       0.4065119E-04 -	 X XX	   X   X XX  XX XX XX  X  X  X	  X XXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.7575E+02  0.1505E+03  0.2252E+03  0.3000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.4256731E+01 -							X
       0.4079369E+01 I							X
       0.3902006E+01 I
       0.3724644E+01 I						       X
       0.3547282E+01 I						       X
       0.3369920E+01 I						       X
       0.3192558E+01 -
       0.3015196E+01 I
       0.2837834E+01 I						       X
       0.2660472E+01 I						      XX
       0.2483110E+01 I						     XX
       0.2305748E+01 I						    XX
       0.2128386E+01 -						  XXX
       0.1951024E+01 I						 XX
       0.1773661E+01 I						XX
       0.1596299E+01 I					       XX
       0.1418937E+01 I					     XXX
       0.1241575E+01 I					   XXX
       0.1064213E+01 -					XXXX
       0.8868508E+00 I				     XXXX
       0.7094889E+00 I				 XXXXX
       0.5321269E+00 I			   XXXXXXX
       0.3547647E+00 I		    XXXXXXX
       0.1774025E+00 I	    XXXXXXXX
       0.4065119E-04 -	XXXXX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.7575E+02  0.1505E+03  0.2252E+03  0.3000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 14, 35-36.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Filliben, 'The Percent Point Function', (unpublished manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     207-232.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 58.



				 July 20, 2023		    expran(3m_datapac)
expsf(3m_datapac)					     expsf(3m_datapac)



NAME
  expsf(3f) - [M_datapac:SPARSITY] compute the exponential sparsity function


SYNOPSIS
  SUBROUTINE EXPSF(P,Sf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Sf


DESCRIPTION
  EXPSF(3f) computes the sparsity function value for the exponential
  distribution with mean = 1 and standard deviation = 1.

  This distribution is defined for all non-negative X, and has the probability
  density function

	 f(X) = exp(-X)

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of P rather than X).

INPUT ARGUMENTS
  P The value at which the sparsity function is to be evaluated.  P should be
    between 0.0 (inclusively) and 1.0 (exclusively).

OUTPUT ARGUMENTS
  SF
    The sparsity function value.

EXAMPLES
  Sample program:

     program demo_expsf
     use M_datapac, only : expsf
     implicit none
     ! call expsf(x,y)
     end program demo_expsf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     207-232.



				 July 20, 2023		     expsf(3m_datapac)
extrem(3m_datapac)					    extrem(3m_datapac)



NAME
  extrem(3f) - [M_datapac:STATISTICS] determine whether a type 1 or type 2
  extreme value distribution better fits a given data set


SYNOPSIS
  SUBROUTINE EXTREM(X,N)

DESCRIPTION
  extrem(3f) performs an extreme value analysis on the data in the input
  vector x.

  this analysis consists of determining that particular extreme value type 1
  or extreme value type 2 distribution which best fits the data set.

  the goodness of fit criterion is the maximum probability plot correlation
  coefficient criterion.

  after the best-fit distribution is determined, estimates are computed and
  printed out for the location and scale parameters.

  two probability plots are also printed out-- the best-fit type 2 probability
  plot (if the best fit was in fact a type 2), and the type 1 probability
  plot.

  predicted extremes for various return periods are also computed and printed
  out.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_extrem
     use M_datapac, only : extrem
     implicit none
     ! call extrem(x,y)
     end program demo_extrem

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN (1972), 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS

   OF THE EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY
  RESEARCH AND TESTING, pages 425-450.

  •  FILLIBEN, 'THE PERCENT POINT FUNCTION', UNPUBLISHED MANUSCRIPT.

     •	JOHNSON AND KOTZ (1970), CONTINUOUS UNIVARIATE DISTRIBUTIONS-1, 1970,
	pages 272-295.



				 July 20, 2023		    extrem(3m_datapac)
fcdf(3m_datapac)					      fcdf(3m_datapac)



NAME
  fcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the F cumulative
  distribution function


SYNOPSIS
  SUBROUTINE FCDF(X,Nu1,Nu2,Cdf)

	 REAL(kind=wp)	  :: X
	 INTEGER	  :: Nu1
	 INTEGER	  :: Nu2
	 REAL(kind=wp)	  :: Cdf


DESCRIPTION
  FCDF(3f) computes the cumulative distribution function value for the F
  distribution with integer degrees of freedom parameters = NU1 and NU2.

  This distribution is defined for all non-negative X. The probability density
  function is given in the references below.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative.

  NU1
    The integer degrees of freedom for the numerator of the F ratio. NU1
    should be positive.

  NU2
    The integer degrees of freedom for the denominator of the F ratio. NU2
    should be positive.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the F distribution

EXAMPLES
  Sample program:

     program demo_fcdf
     use M_datapac, only : fcdf
     implicit none
     ! call fcdf(x,y)
     end program demo_fcdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  National Bureau of Standards Applied Mathematics Series 55, 1964, pages
     946-947, Formulae 26.6.4, 26.6.5, 26.6.8, and 26.6.15.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, page 83,
     Formula 20, and page 84, Third formula.

  •  Paulson, An Approximate Normalization of the Analysis of Variance
     Distribution, Annals of Mathematical Statistics, 1942, Number 13, pages
     233-135.

  •  Scheffe and Tukey, A Formula for Sample Sizes for Population Tolerance
     Limits, 1944, Number 15, page 217.



				 July 20, 2023		      fcdf(3m_datapac)
fourie(3m_datapac)					    fourie(3m_datapac)



NAME
  fourie(3f) - [M_datapac:ANALYSIS] perform a Fourier analysis of a data set


SYNOPSIS
  SUBROUTINE FOURIE(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER		  :: N


DESCRIPTION
  FOURIE(3f) performs a Fourier analysis of the data in the input vector X.
  The analysis consists of the following--

    1.	computing (and printing) (for each of the harmonic frequencies 1/n,
	2/n, 3/n, ..., 1/2) the corresponding fourier coefficients, the
	amplitude, the phase, the contribution to the total variance, and the
	relative contribution to the total variance.

    2.	plotting out a fourier line spectrum = the periodogram = the plot of
	relative contribution to total variance (at each fourier frequency)
	versus the fourier frequency.

  In order that the results of the Fourier analysis be valid and properly
  interpreted, the input data in X should be equi-spaced in time (or whatever
  variable corresponds to time).

  The horizontal axis of the spectra produced by fourie(3f) is frequency.
  This frequency is measured in units of cycles per 'data point' or, more
  precisely, in cycles per unit time where 'unit time' is defined as the
  elapsed time between adjacent observations.

  The range of the frequency axis is 0.0 to 0.5.

  Fourier analysis differs from spectral analysis (as, for example, produced
  by the datapac TIMESE(3f) subroutine) in that a Fourier analysis does no
  smoothing on the spectral estimates whereas a spectral analysis does smooth
  the spectral estimates. The net result is that the spectral estimates
  obtained from a Fourier analysis are almost always more variable than those
  obtained in a spectral analysis.

  The practical conclusion is that when the data analyst has a choice of
  whether to perform a Fourier analysis or a spectral analysis, the spectral
  analysis should almost always be preferred.

  the maximum number of Fourier frequencies for which the Fourier coefficients
  is computed (and listed) is N/2 where N is the sample size (length of the
  data record in the vector X). This rule is overridden (for listing purposes
  only) in large data sets and is replaced by the rule that the maximum number
  of lags listed = 800 (which corresponds to an 8-page listing of Fourier
  coefficients.  If more pages are desired, change the value of the variable
  MAXPAG within this subroutine from 8 to whatever is desired.

  If the input observations in X are considered to have been collected 1
  second apart in time, then the frequency axis of the resulting spectra would
  be in units of Hertz (= cycles per second).

  The frequency of 0.0 corresponds to a cycle in the data of infinite (=
  1/(0.0)) length or period. the frequency of 0.5 corresponds to a cycle in
  the data of length = 1/(0.5) = 2 data points.

  Any equi-spaced fourier analysis is intrinsically limited to detecting
  frequencies no larger than 0.5 cycles per data point; this corresponds to
  the fact that the smallest detectable cycle in the data is 2 data points per
  cycle.

INPUT ARGUMENTS
  X The vector of (unsorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 15000.  The sample size N must be
    greater than or equal to 3.

OUTPUT
  2 to 10 pages (depending on the input sample size) of automatic printout--

    1.	a listing of the amplitude, phase, contribution to the total variance,
	and relative contribution to the total variance for each of the
	fourier frequencies (1/n, 2/n, 3/n, ..., 1/2).	this listing may take
	as little as 1 page or as many as n/100 pages (the exact number
	depending on the input sample size n).	this listing is terminated
	after at most 8 computer pages.  if more pages are desired, change the
	value of the variable maxpag within this subroutine from 8 to whatever
	desired.

    2.	a plot of the relative contribution to the total variance versus
	frequency.

EXAMPLES
  Sample program:

     program demo_fourie
     use M_datapac, only : fourie
     implicit none
     ! call fourie(x,y)
     end program demo_fourie

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Jenkins and Watts, especially page 290.



				 July 20, 2023		    fourie(3m_datapac)
fran(3m_datapac)					      fran(3m_datapac)



NAME
  fran(3f) - [M_datapac:RANDOM] generate F random numbers


SYNOPSIS
  SUBROUTINE FRAN(N,Nu1,Nu2,Istart,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(in)	   :: Nu1
	 INTEGER,intent(in)	   :: Nu2
	 INTEGER,intent(inout)	   :: Istart
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  FRAN(3f) generates a random sample of size n from the F distribution with
  integer degrees of freedom parameters = NU1 AND NU2.

  This distribution is defined for all non-negative x.

  The probability density function is given in the references below.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  NU1
    The integer degrees of freedom for the numerator of the F ratio.  nu1
    should be a positive integer variable.

  NU2
    The integer degrees of freedom NU2 should be a positive integer variable
    for the denominator of the F ratio.

  ISTART
    An integer flag code which (if set to 0) will start the generator over and
    hence produce the same random sample over and over again upon successive
    calls to this subroutine within a run; or (if set to some integer value
    not equal to 0, like, say, 1) will allow the generator to continue from
    where it stopped and hence produce different random samples upon
    successive calls to this subroutine within a run.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    will be placed.

EXAMPLES
  Sample program:

     program demo_fran
     use M_datapac, only : fran
     implicit none
     ! call fran(x,y)
     end program demo_fran

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Mood and Grable, Introduction to the Theory of Statistics, 1963, pages
     231-232.

  •  Johnson and Kotz, Continuous Univariate Distributions--2, 1970, pages
     75-93.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 64.



				 July 20, 2023		      fran(3m_datapac)
chsran(3m_datapac)					    chsran(3m_datapac)



NAME
  chsran(3f) - [M_datapac:RANDOM] generate chi-square random numbers


SYNOPSIS
  SUBROUTINE CHSRAN(N,Nu,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(in)	   :: Nu
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  CHSRAN(3f) generates a random sample of size n from the chi-squared
  distribution with integer degrees of freedom parameter = NU.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  NU
    The integer degrees of freedom (parameter) for the chi-squared
    distribution. NU should be a positive integer variable.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  --X
    A vector (of dimension at least N) into which the generated random sample
    of size N from the chi-squared distribution will be placed.

EXAMPLES
  Sample program:

     program demo_chsran
     use m_datapac, only : chsran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=4000
     integer	       :: iseed
     integer	       :: Nu
     real	       :: x(n)
	call label('chsran')
	Nu=8
	iseed=12345
	call chsran(N,Nu,Iseed,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_chsran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.3098298E+02 -							X
       0.2972390E+02 I
       0.2846483E+02 I
       0.2720575E+02 I	       X
       0.2594668E+02 I	      X 		X
       0.2468760E+02 I
       0.2342853E+02 -	    X  X				     X
       0.2216945E+02 I	 X	       X  X	     X		    X  X
       0.2091037E+02 I	   X	 X  X	X X	XX   X	X  XX	    X
       0.1965130E+02 I	  XXX XX X  XX	X XXX  X     XX  X   XX    X
       0.1839222E+02 I	  XXX  X X  XXXXXXX XXX XXX XXXX XX X	X   X XXX
       0.1713315E+02 I	 XX X XXX XX XXXX XXXXX XXXX XXX  XXXXX  XXX XX
       0.1587407E+02 -	XXXXXX XXXXXX XX XXXX XX XXX  X  XX XXXX XX XXXX
       0.1461500E+02 I	 XXXXXXXXX XX XXXXXXXXX XX XXX XXXXXX X XXXXXXXX
       0.1335592E+02 I	X XXXXX XXXXXXX XXX XXX XX XXXXXXX XXXXXXXX XXXX
       0.1209685E+02 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.1083777E+02 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.9578695E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.8319620E+01 -	 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.7060543E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.5801468E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.4542393E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.3283318E+01 I	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.2024242E+01 I	XXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
       0.7651675E+00 -	 X X X	      X      XX  X   XXX X XX	 X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.3098298E+02 -							X
       0.2972390E+02 I
       0.2846483E+02 I
       0.2720575E+02 I							X
       0.2594668E+02 I							X
       0.2468760E+02 I
       0.2342853E+02 -							X
       0.2216945E+02 I							X
       0.2091037E+02 I							X
       0.1965130E+02 I						       XX
       0.1839222E+02 I						       X
       0.1713315E+02 I						      XX
       0.1587407E+02 -						     XX
       0.1461500E+02 I						    XX
       0.1335592E+02 I						  XXX
       0.1209685E+02 I					       XXXX
       0.1083777E+02 I					    XXXX
       0.9578695E+01 I				       XXXXXX
       0.8319620E+01 -				  XXXXXX
       0.7060543E+01 I			   XXXXXXXX
       0.5801468E+01 I		     XXXXXXX
       0.4542393E+01 I	       XXXXXXX
       0.3283318E+01 I	  XXXXXX
       0.2024242E+01 I	XXX
       0.7651675E+00 -	X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.1001E+04  0.2000E+04  0.3000E+04  0.4000E+04


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, pages 34-35.

  •  Mood and Grable, Introduction to the Theory of Statistics, 1963, pages
     226-227.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, page 171.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 48.



				 July 20, 2023		    chsran(3m_datapac)
code(3m_datapac)					      code(3m_datapac)



NAME
  code(3f) - [M_datapac:VECTOR_OPERATIONS] code the elements of a vector (1
  for the minimum, 2 for the next larger value, and so on)


SYNOPSIS
  SUBROUTINE CODE(X,N,Y)

	 REAL(kind=wp),intent(in)  :: X(:)
	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(out) :: Y(:)


DESCRIPTION
  CODE(3f) codes the elements of the input vector X and puts the coded values
  into the output vector Y. This essentially ranks the array elements so they
  can be accessed in ascending order like RANK(3f), but allowing duplicate
  ranks.

  The coding is as follows--

    •  the minimum is coded as 1.0.

    •  the next larger value as 2.0,

    •  the next larger value as 3.0,

    •  etc.

INPUT ARGUMENTS
  X The vector of observations to be coded. The input vector X remains
    unaltered.

  N The integer number of observations in the vector X. The maximum allowable
    value of N for this subroutine is 15000.

OUTPUT ARGUMENTS
  Y The vector Y which will contain the coded values corresponding to the
    observations in the vector X. It must be at least as large as X.

    •  All occurrances of the minimum are coded as 1.0;

    •  All occurances of the next larger value are coded as 2.0;

    •  All occurances of the next larger value are coded as 3.0, etc.

EXAMPLES
  Sample program:

     program demo_code
     use M_datapac, only : code
     implicit none
     integer,parameter		  :: isz=20
     real			  :: vals(isz)
     real			  :: rndx(isz)
     integer			  :: i
	write(*,*)' initializing array with ',isz,' random numbers'
	call random_seed()
	CALL RANDOM_NUMBER(vals)
	vals=vals*450000.0
	! make sure some duplicates
	vals(3)=vals(6)
	vals(4)=vals(15)

	call code(vals,isz,rndx) ! code data
	! check order
	write(*,*)
	write(*,'(2(5x,g0.10,1x))')'Values','Code',(vals(i),nint(rndx(i)),i=1,isz)

     end program demo_code

  Results:

      > initializing array with 	  20  random numbers
      >
      > Output from the code subroutine
      > Number of distinct code values =       18
      >
      > 	Value	  Coded Value
      >    3137.9548340 	 1.
      >   39334.0585938 	 2.
      >   58048.1054688 	 3.
      >   60169.2890625 	 4.
      >   61479.1015625 	 5.
      >   92335.1250000 	 6.
      >  101141.3671875 	 7.
      >  107306.5859375 	 8.
      >  135199.7343750 	 9.
      >  185223.0625000 	10.
      >  214747.2656250 	11.
      >  251820.6718750 	12.
      >  267047.5000000 	13.
      >  277210.9062500 	14.
      >  296296.5625000 	15.
      >  382931.3437500 	16.
      >  414374.2187500 	17.
      >  427620.9375000 	18.
      >
      >    Values      Code
      >    277210.9062	    14
      >    60169.28906	    4
      >    101141.3672	    7
      >    382931.3438	    16
      >    61479.10156	    5
      >    101141.3672	    7
      >    296296.5625	    15
      >    214747.2656	    11
      >    3137.954834	    1
      >    267047.5000	    13
      >    107306.5859	    8
      >    427620.9375	    18
      >    414374.2188	    17
      >    251820.6719	    12
      >    382931.3438	    16
      >    58048.10547	    3
      >    39334.05859	    2
      >    135199.7344	    9
      >    185223.0625	    10
      >    92335.12500	    6


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		      code(3m_datapac)
copy(3m_datapac)					      copy(3m_datapac)



NAME
  copy(3f) - [M_datapac:VECTOR_OPERATION] copy the elements of one vector into
  another vector


SYNOPSIS
  SUBROUTINE COPY(X,N,Y)

	 REAL(kind=wp),intent(in)     :: X(:)
	 INTEGER,intent(in)	      :: N
	 REAL(kind=wp),intent(inout)  :: Y(:)


DESCRIPTION
  COPY(3f) copies the contents of the REAL vector X into the REAL vector Y.

  The first element of X is copied into the first element of Y; the second
  element of X is copied into the second element of Y, etc.

  This pre-f90 procedure can be replaced with modern array syntax and should
  not be required in new code.

INPUT ARGUMENTS
  X The vector of observations to be copied. the input vector X remains
    unaltered.

  N The integer number of observations in the vector X.

OUTPUT ARGUMENTS
  Y The vector into which the copied data values from X will be sequentially
    placed such that Y will have its first N elements identical to the vector
    X.

EXAMPLES
  Sample program:

     program demo_copy
     use M_datapac, only : copy
     implicit none
     character(len=*),parameter :: g='(*(g0.3,1x))'
     real,allocatable :: from(:), to(:)
	from=[1.0,2.0,3.0,4.0,5.0]
	to=[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0]
	call copy(from,3,to)
	write(*,g)to
     end program demo_copy

  Results:

     1.00 2.00 3.00 -1.00 -1.00 -1.00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		      copy(3m_datapac)
corr(3m_datapac)					      corr(3m_datapac)



NAME
  corr(3f) - [M_datapac:STATISTICS] compute the sample correlation coefficient


SYNOPSIS
  SUBROUTINE CORR(X,Y,N,Iwrite,C)

DESCRIPTION
  CORR(3f) computes the sample correlation coefficient between the 2 sets of
  data in the input vectors X and Y. The sample correlation coefficient will
  be a REAL value between -1.0 and 1.0 (inclusively).

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_corr
     use M_datapac, only : corr
     implicit none
     ! call corr(x,y)
     end program demo_corr

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 235-236.

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 2, Edition
     1, 1961, pages 292-293.

  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, pages
     172-198.



				 July 20, 2023		      corr(3m_datapac)
cauppf(3m_datapac)					    cauppf(3m_datapac)



NAME
  cauppf(3f) - [M_datapac:PERCENT_POINT] compute the Cauchy percent point
  function


SYNOPSIS
  SUBROUTINE CAUPPF(P,Ppf)

	 REAL(kind=wp) :: P
	 REAL(kind=wp) :: Ppf
	 REAL(kind=wp) :: arg


DESCRIPTION
  CAUPPF(3f) computes the percent point function value for the cauchy
  distribution with median = 0 and 75% point = 1.

  This distribution is defined for all x and has the probability density
  function

	 f(X) = (1/pi)*(1/(1+X*X))

  Note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

INPUT ARGUMENTS
  P The value (between 0.0 and 1.0) at which the percent point function is to
    be evaluated.

    P should be between 0.0 and 1.0, exclusively.

OUTPUT ARGUMENTS
  PPF
    The percent point function value.

EXAMPLES
  Sample program:

     program demo_cauppf
     use M_datapac, only : cauppf, label
     implicit none
     call label('cauppf')
     ! call cauppf(x,y)
     end program demo_cauppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions -- 1, 1970, pages
     154-165.



				 July 20, 2023		    cauppf(3m_datapac)
cauran(3m_datapac)					    cauran(3m_datapac)



NAME
  cauran(3f) - [M_datapac:RANDOM] generate Cauchy random numbers


SYNOPSIS
  SUBROUTINE CAURAN(N,Iseed,X)

	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(inout)	   :: Iseed
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  CAURAN(3f) generates a random sample of size N from the Cauchy distribution
  with median = 0 and 75% point = 1.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/pi)*(1/(1+X*X))


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N function value for the Cauchy distribution will be placed.

EXAMPLES
  Sample program:

     program demo_cauran
     use m_datapac, only : cauran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=100
     real	       :: x(n)
     integer	       :: iseed
	call label('cauran')
	iseed=12345
	call cauran(n,iseed,x)
	write(*,*)x
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_cauran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.8386762E+02 -						       X
       0.7943768E+02 I
       0.7500773E+02 I
       0.7057778E+02 I
       0.6614783E+02 I
       0.6171789E+02 I
       0.5728794E+02 -
       0.5285799E+02 I
       0.4842804E+02 I
       0.4399810E+02 I
       0.3956815E+02 I
       0.3513820E+02 I
       0.3070825E+02 -
       0.2627831E+02 I
       0.2184836E+02 I
       0.1741841E+02 I
       0.1298846E+02 I	   X	X
       0.8558517E+01 I		  X  X			 X
       0.4128571E+01 -		      X X X  X	      X   X	 XX XX
      -0.3013763E+00 I	XXX XXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXX
      -0.4731323E+01 I	XX	 X  X  X   X   XX      X     X
      -0.9161270E+01 I
      -0.1359122E+02 I	     X
      -0.1802116E+02 I
      -0.2245111E+02 -	   X				X      X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.2575E+02  0.5050E+02  0.7525E+02  0.1000E+03

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.8386762E+02 -							X
       0.7943768E+02 I
       0.7500773E+02 I
       0.7057778E+02 I
       0.6614783E+02 I
       0.6171789E+02 I
       0.5728794E+02 -
       0.5285799E+02 I
       0.4842804E+02 I
       0.4399810E+02 I
       0.3956815E+02 I
       0.3513820E+02 I
       0.3070825E+02 -
       0.2627831E+02 I
       0.2184836E+02 I
       0.1741841E+02 I
       0.1298846E+02 I						       XX
       0.8558517E+01 I						      XX
       0.4128571E+01 -						 XXXXX
      -0.3013763E+00 I	       XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -0.4731323E+01 I	  XXXXXX
      -0.9161270E+01 I
      -0.1359122E+02 I	 X
      -0.1802116E+02 I
      -0.2245111E+02 -	XX
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.2575E+02  0.5050E+02  0.7525E+02  0.1000E+03


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Tocher, The Art of Simulation, 1963, page 15.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 36.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, page 231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     154-165.



				 July 20, 2023		    cauran(3m_datapac)
cauplt(3m_datapac)					    cauplt(3m_datapac)



NAME
  cauplt(3f) - [M_datapac:LINE_PLOT] generate a Cauchy probability plot


SYNOPSIS
  SUBROUTINE CAUPLT(X,N)

	 REAL(kind=wp),intent(in) :: X(:)
	 INTEGER,intent(in)	  :: N


DESCRIPTION
  CAUPLT(3f) generates a one-page Cauchy probability plot.

  The prototype Cauchy distribution used herein has median = 0 and 75% point =
  1.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/pi) * (1/(1+X*X))

  As used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution.

  The Cauchy probability plot is useful in graphically testing the composite
  (that is, location and scale parameters need not be specified) hypothesis
  that the underlying distribution from which the data have been randomly
  drawn is the Cauchy distribution.

  If the hypothesis is true, the probability plot should be near-linear.

  A measure of such linearity is given by the calculated probability plot
  correlation coefficient.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

OUTPUT
  A one-page Cauchy probability plot.

EXAMPLES
  Sample program:

     program demo_cauplt
     use M_datapac, only : cauplt
     implicit none
     ! call cauplt(x,y)
     end program demo_cauplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, 'Techniques for Tail Length Analysis', proceedings of the
     Eighteenth Conference on the Design of Experiments in Army Research
     Development and Testing (Aberdeen, Maryland, October, 1972), pages
     425-450.

  •  Hahn and Shapiro, Statistical Methods in Engineering, 1967, pages
     260-308.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     154-165.



				 July 20, 2023		    cauplt(3m_datapac)
demod(3m_datapac)					     demod(3m_datapac)



NAME
  demod(3f) - [M_datapac:STATISTICS] perform a complex demodulation


SYNOPSIS
  SUBROUTINE DEMOD(X,N,F)

DESCRIPTION
  demod(3f) performs a complex demodulation on the data in the input vector x
  at the input demodulation frequency = f.

  the complex demodulation consists of the following--

    1.	an amplitude versus time plot;

    2.	a phase versus time plot;

    3.	an updated demodulation frequency estimate to assist the analyst in
	determining a more appropriate frequency at which to demodulate in
	case the specified input demodulation frequency f does not flatten
	sufficiently the phase plot.

  the allowable range of the input demodulation frequency f is 0.0 to 0.5
  (exclusively).

  the input demodulation frequency f is measured of in units of cycles per
  'data point' or, more precisely, in cycles per unit time where 'unit time'
  is defined as the elapsed time between adjacent observations.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_demod
     use M_datapac, only : demod
     implicit none
     ! call demod(x,y)
     end program demo_demod

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  granger and hatanaka, pages 170 to 189, especially pages 173, 177, and
     182.



				 July 20, 2023		     demod(3m_datapac)
mean(3m_datapac)					      mean(3m_datapac)



NAME
  mean(3f) - [M_datapac:STATISTICS] compute the sample mean of a data vector


SYNOPSIS
  subroutine mean(X,N,Iwrite,Xmean)

	 real(kind=wp),intent(in)  :: X(:)
	 integer,intent(in)	   :: N
	 integer,intent(in)	   :: Iwrite
	 real(kind=wp),intent(out) :: Xmean


DESCRIPTION
  MEAN(3f) computes the sample mean of the data in the input vector X.

  The sample mean = (sum of the observations)/n.

  For a data set, the arithmetic mean, also known as arithmetic average, is a
  measure of central tendency of a finite set of numbers: specifically, the
  sum of the values divided by the number of values. If the data set were
  based on a series of observations obtained by sampling from a statistical
  population, the arithmetic mean is the sample mean.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample mean as it is computed; or (if set to some integer value not equal
    to 0), like, say, 1) will cause the printing of the sample mean at the
    time it is computed.

OUTPUT ARGUMENTS
  XMEAN
    The value of the computed sample mean.

EXAMPLES
  Sample program:

     program demo_mean
     use M_datapac, only : mean, label
     implicit none
     real :: sp_mean
     double precision :: dp_mean
	call label('mean')
	call mean([4.0, 36.0, 45.0, 50.0, 75.0], 5, 1, sp_mean)
	write(*,*)sp_mean,sp_mean==42.0
	call mean([4.0d0, 36.0d0, 45.0d0, 50.0d0, 75.0d0], 5, 1, dp_mean)
	write(*,*)dp_mean,dp_mean==42.0
     end program demo_mean

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 2, Edition
     1, 1961, page 4.

  •  Mood and Grable, Introduction to the Theory of Statistics, Edition 2,
     1963, page 146.

  •  Dixon and Massey, Introduction to Statistical Analysis, Edition 2, 1957,
     page 14.



				 July 20, 2023		      mean(3m_datapac)
median(3m_datapac)					    median(3m_datapac)



NAME
  median(3f) - [M_datapac:STATISTICS] compute the median of a data vector


SYNOPSIS
  SUBROUTINE MEDIAN(X,N,Iwrite,Xmed)

	 REAL(kind=wp) :: WS , X(:) , Xmed
	 INTEGER :: Iwrite , N


DESCRIPTION
  MEDIAN(3f) computes the sample median of the data in the input vector X.

  The sample median equals that value such that half the data set is below it
  and half above it.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

	      The maximum allowable value of N for this subroutine is 15000.


  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample median as it is computed; or (if set to some integer value not
    equal to 0), like, say, 1) will cause the printing of the sample median at
    the time it is computed.

OUTPUT ARGUMENTS
  XMED
    The value of the computed sample median.

EXAMPLES
  Sample program:

     program demo_median
     use M_datapac, only : median, label
     implicit none
     character(len=*),parameter :: g='(*(g0,1x))'
     real,allocatable :: x(:)
     real :: xmed
     integer :: iwrite , n

	call label('median')
	x=[ -10.0, 10.0, 0.0, 1.0, 2.0 ]
	n=size(x)
	call median(x, n, 1, xmed)
	write(*,g)' median of',x,'is',xmed

	x=[ 10.0, 20.0, 3.0, 40.0 ]
	n=size(x)
	call median(x, n, 1, xmed)
	write(*,g)' median of',x,'is',xmed

     end program demo_median

  Results:

     The sample median of the 5 observations is  0.10000000E+01
     median of	-10.00000 10.00000 .000000 1.000000 2.000000 is  1.000000

     The sample median of the 4 observations is  0.15000000E+02
     median of	10.00000 20.00000 3.000000 40.00000 is	15.00000


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, page 326.

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 2, Edition
     1, 1961, page 49.

  •  David, Order Statistics, 1970, page 139.

  •  Snedecor and Cochran, Statistical Methods, Edition 6, 1967, page 123.

  •  Dixon and Massey, Introduction to Statistical Analysis, Edition 2, 1957,
     page 70.



				 July 20, 2023		    median(3m_datapac)
midm(3m_datapac)					      midm(3m_datapac)



NAME
  midm(3f) - [M_datapac:STATISTICS] compute the midmean of a data vector


SYNOPSIS
  SUBROUTINE MIDM(X,N,Iwrite,Xmidm)

	 REAL(kind=wp) :: X(:)
	 INTEGER       :: N
	 INTEGER       :: Iwrite
	 REAL(kind=wp) :: Xmidm


DESCRIPTION
  MIDM(3f) computes the sample midmean = the sample 25% (on each side) trimmed
  mean of the data in the input vector X.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample midmean as it is computed; or (if set to some integer value not
    equal to 0), like, say, 1) will cause the printing of the sample midmean
    at the time it is computed.

OUTPUT ARGUMENTS
  XMIDM
    The value of the computed sample midmean.

EXAMPLES
  Sample program:

     program demo_midm
     use M_datapac, only : midm, label
     implicit none
     integer :: i
     real :: xmidm
	call label('midm')

	call midm([real :: (i,i=0,100) ],101,1,xmidm)
	write(*,*)merge('GOOD','BAD ',xmidm == 50.0),xmidm

	call midm([real :: (i,i=0,101) ],102,1,xmidm)
	write(*,*)merge('GOOD','BAD ',xmidm == 50.5),xmidm

     end program demo_midm

  Results:

      The sample MIDMEAN of the 101 observations is  0.50000000E+02
	 25.0000 PERCENT (=25 observations) of the data were trimmed from below
	 25.0000 PERCENT (=25 observations) of the data were trimmed from above
	 50.0000 PERCENT (=51 observations) of the data remain in the middle ...
	 after the trimming
      GOOD   50.00000

      The sample MIDMEAN of the 102 observations is  0.50500000E+02
	 25.0000 PERCENT (=25 observations) of the data were trimmed from below
	 25.0000 PERCENT (=25 observations) of the data were trimmed from above
	 50.0000 PERCENT (=52 observations) of the data remain in the middle ...
	 after the trimming
      GOOD   50.50000



AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  David, Order Statistics, 1970, pages 129, 136.

  •  Crow and Siddiqui, 'Robust Estimation of Location', Journal of the
     American Statistical Association, 1967, pages 357, 387.

  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University, 1969).



				 July 20, 2023		      midm(3m_datapac)
midr(3m_datapac)					      midr(3m_datapac)



NAME
  midr(3f) - [M_datapac:STATISTICS] compute the midrange of a data vector


SYNOPSIS
  SUBROUTINE MIDR(X,N,Iwrite,Xmidr)

	 REAL(kind=wp),intent(in)  :: X(:)
	 INTEGER,intent(in)	   :: N
	 INTEGER,intent(in)	   :: Iwrite
	 REAL(kind=wp),intent(out) :: Xmidr


DESCRIPTION
  MIDR(3f) computes the sample midrange of the data in the input vector X.

  The sample midrange = (sample min + sample max)/2.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  IWRITE
    An integer flag code which (if set to 0) will suppress the printing of the
    sample midrange as it is computed; or (if set to some integer value not
    equal to 0), like, say, 1) will cause the printing of the sample midrange
    at the time it is computed.

OUTPUT ARGUMENTS
  XMIDR
    the value of the computed sample midrange.

EXAMPLES
  Sample program:

     program demo_midr
     use M_datapac, only : midr, label
     implicit none
     integer :: i
     real :: xmidr
	call label('midr')

	call midr([real :: (i,i=0,100) ],101,1,xmidr)
	write(*,*)merge('GOOD','BAD ',xmidr == 50.0),xmidr

	call midr([real :: (i,i=0,101) ],102,1,xmidr)
	write(*,*)merge('GOOD','BAD ',xmidr == 50.5),xmidr

     end program demo_midr

  Results:

      The sample MIDRANGE of the 101 observations IS  0.500000000000000E+02
      GOOD   50.00000

      The sample MIDRANGE of the 102 observations is  0.505000000000000E+02
      GOOD   50.50000

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, page 338.

  •  Kendall and Stuart, The Advanced Theory of Statistics, Volume 2, Edition
     1, 1961, page 91.

  •  David, Order Statistics, 1970, page 97.

  •  Dixon and Massey, Introduction to Statistical Analysis, Edition 2, 1957,
     page 71.



				 July 20, 2023		      midr(3m_datapac)
min(3m_datapac) 					       min(3m_datapac)



NAME
  min(3f) - [M_datapac:STATISTICS] compute the minimum of a data vector


SYNOPSIS
  SUBROUTINE MIN(X,N,Iwrite,Xmin)

       real(kind=wp),intent(in)  :: X(:)
       integer,intent(in)	 :: N
       integer,intent(in)	 :: Iwrite
       real(kind=wp),intent(out) :: Xmin


DESCRIPTION
  MIN(3f) computes the sample minimum of the data in the input vector X.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.

  IWRITE
    An integer flag code which (if set to 0) will suppress The printing of the
    sample minimum as it is computed; or (if set to some integer value not
    equal to 0; like, say, 1) will cause The printing of the sample minimum at
    the time it is computed.

OUTPUT ARGUMENTS
  XMIN
    The value of the computed sample minimum.

EXAMPLES
  Sample program:

     program demo_min
     use M_datapac, only : min, label
     implicit none
     real :: xmin
	call label('min')
	call min([-100.0, 200.0, 0.0, 400.0, -200.0],5,1,xmin)
	write(*,*)xmin
     end program demo_min


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  David, Order Statistics, 1970, page 7.



				 July 20, 2023		       min(3m_datapac)
move(3m_datapac)					      move(3m_datapac)



NAME
  move(3f) - [M_datapac:VECTOR_OPERATION] move selected elements of one vector
  into another vector


SYNOPSIS
  SUBROUTINE MOVE(X,M,Ix1,Iy1,Y)

	 REAL(kind=wp),intent(in)  :: X(:)
	 INTEGER,intent(in)	   :: M
	 INTEGER,intent(in)	   :: Ix1
	 INTEGER,intent(in)	   :: Iy1
	 REAL(kind=wp),intent(out) :: Y(:)


DESCRIPTION
  MOVE(3f) moves (copies) M elements of the REAL vector X (starting with
  position Ix1) into the REAL vector Y (starting with position Iy1).

  This allows the data analyst to take any subvector in X and place it
  anywhere in the vector Y.

INPUT ARGUMENTS
  X The vector of observations, part (or all) of which is to be moved (copied)
    over into the vector Y. The input vector X remains unaltered.

  M The integer number of elements in the vector X to be moved.

  IX1
    The integer value which defines the position in the vector X of the first
    element to be moved.

  IY1
    The integer value which defines the position in the vector Y where the
    first element to be moved will be placed.

OUTPUT ARGUMENTS
  Y The vector into which the copied data values from the vector X will be
    sequentially placed, starting in position IY1 of Y.  The m elements in
    positions

		   IY1, IY1+1, ... , IY1+M-1

  will be identical to the M elements in the X vector IN positions

		   IX1, IX1+1, ... , IX1+M-1.


EXAMPLES
  Sample program:

     program demo_move
     use M_datapac, only : move, label
     real,allocatable :: x(:), y(:)
	call label('move')
	x=[10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.0,110.0,120.0]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	y=99.0
	call MOVE(X,4,5,1,Y)
	write(*,*)int(y)
     end program demo_move



AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0



				 July 20, 2023		      move(3m_datapac)
nbcdf(3m_datapac)					     nbcdf(3m_datapac)



NAME
  nbcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the negative
  binomial cumulative distribution function


SYNOPSIS
  SUBROUTINE NBCDF(X,P,N,Cdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(in)  :: P
	 INTEGER		   :: N
	 REAL(kind=wp),intent(out) :: Cdf


DESCRIPTION
  NBCDF(3f) computes the cumulative distribution function value at the REAL
  value X for the negative binomial distribution with REAL 'Bernoulli
  probability' parameter = P, and integer

  The negative binomial distribution used herein has mean = N*(1-P)/P and
  standard deviation = sqrt(N*(1-P)/(P*P))). this distribution is defined for
  all non-negative integer X-- X = 0, 1, 2, ... .  This distribution has the
  probability function

	 f(X) = c(N+X-1,N) * P**N * (1-P)**X

  Where c(N+X-1,N) is the combinatorial function equaling the number of
  combinations of N+X-1 items taken N at a time.

  The negative binomial distribution is the distribution of the number of
  failures before obtaining N successes in an indefinite sequence of Bernoulli
  (0,1) trials where the probability of success in a precision trial = P.

NOTE
  Even though the input to this cumulative distribution function subroutine
  for this discrete distribution should (under normal circumstances) be a
  discrete integer value, the input variable X is REAL in mode.

  X has been specified as REAL so as to conform with the datapac convention
  that all input ****data**** (as opposed to sample size, for example)
  variables to all datapac subroutines are REAL.  This convention is based on
  the belief that

    1.	A mixture of modes (floating point versus integer) is inconsistent and
	an unnecessary complication in a data analysis; and

    2.	Floating point machine arithmetic (as opposed to integer arithmetic)
	is the more natural mode for doing data analysis.

INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated. X should be non-negative and integral-valued.

  P The value of the 'Bernoulli probability' parameter for the negative
    binomial distribution.  P should be between 0.0 (exclusively) and 1.0
    (exclusively).

  N The integer value of the 'number of successes in Bernoulli

    trials' parameter.
      N should be a positive integer.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value for the negative binomial
    distribution

EXAMPLES
  Sample program:

     program demo_nbcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : nbcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     real	       :: p
     integer	       :: i
     integer	       :: n
	call label('nbcdf')
	x=[(real(i),i=0,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	p=0.50
	n=size(x)
	do i=1,size(x)
	   call NBCDF(X(i),P,N,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_nbcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -						   X X	X
       0.9583334E+02 I					X  X X	X
       0.9166666E+02 I			       X X X  X
       0.8750000E+02 I		       XX X X
       0.8333334E+02 I		 XXX X
       0.7916667E+02 I	     XXXX
       0.7500000E+02 -	  XXX
       0.7083334E+02 I	 XX
       0.6666667E+02 I	XX
       0.6250000E+02 I	X
       0.5833334E+02 I	X
       0.5416667E+02 I	X
       0.5000000E+02 -	X
       0.4583334E+02 I	X
       0.4166667E+02 I	X
       0.3750000E+02 I	X
       0.3333334E+02 I	X
       0.2916667E+02 I	X
       0.2500000E+02 -	X
       0.2083334E+02 I	X
       0.1666667E+02 I	X
       0.1250000E+02 I	X
       0.8333336E+01 I	X
       0.4166672E+01 I	X
       0.0000000E+00 -	X
			I-----------I-----------I-----------I-----------I
		-0.1776E-14  0.1250E+00  0.2500E+00  0.3750E+00  0.5000E+00


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     945, Formulae 26.5.24 and 26.5.28, and page 929.

  •  Johnson and Kotz, Discrete Distributions, 1969, pages 122-142, especially
     page 127.

  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, pages 92-95.

  •  Feller, an Introduction to Probability Theory and Its Applications,
     Volume 1, Edition 2, 1957, pages 155-157, 210.

  •  Kendall and Stuart, the Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 130-131.

  •  Williamson and Bretherton, Tables of the Negative Binomial Probability
     Distribution, 1963.

  •  Owen, Handbook of Statistical Tables, 1962, page 304.



				 July 20, 2023		     nbcdf(3m_datapac)
nbppf(3m_datapac)					     nbppf(3m_datapac)



NAME
  nbppf(3f) - [M_datapac:PERCENT_POINT] compute the negative binomial percent
  point function


SYNOPSIS
  SUBROUTINE NBPPF(P,Ppar,N,Ppf)

DESCRIPTION
  nbppf(3f) computes the percent point function value at the precision
  precision value p for the negative binomial distribution with precision
  precision 'bernoulli probability' parameter = ppar, and integer

  the negative binomial distribution used herein has mean = n*(1-ppar)/ppar
  and standard deviation = sqrt(n*(1-ppar)/(ppar*ppar))).  this distribution
  is defined for all non-negative integer x--x = 0, 1, 2, ... .

  this distribution has the probability function

	 f(x) = c(n+x-1,n) * ppar**n * (1-ppar)**x.

  where c(n+x-1,n) is the combinatorial function equaling the number of
  combinations of n+x-1 items taken n at a time.

  the negative binomial distribution is the distribution of the number of
  failures before obtaining n successes in an indefinite sequence of bernoulli
  (0,1) trials where the probability of success in a precision trial = ppar.

  note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_nbppf
     use M_datapac, only : nbppf
     implicit none
     ! call nbppf(x,y)
     end program demo_nbppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  JOHNSON AND KOTZ, DISCRETE DISTRIBUTIONS, 1969, pages 122-142, ESPECIALLY
     page 127, FORMULA 22.

  •  HASTINGS AND PEACOCK, STATISTICAL DISTRIBUTIONS--A HANDBOOK FOR STUDENTS
     AND PRACTITIONERS, 1975, pages 92-95.

  •  NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS SERIES 55, 1964, page
     929.

  •  FELLER, AN INTRODUCTION TO PROBABILITY THEORY AND ITS APPLICATIONS,
     VOLUME 1, EDITION 2, 1957, pages 155-157, 210.

  •  KENDALL AND STUART, THE ADVANCED THEORY OF STATISTICS, VOLUME 1, EDITION
     2, 1963, pages 130-131.

  •  WILLIAMSON AND BRETHERTON, TABLES OF THE NEGATIVE BINOMIAL PROBABILITY
     DISTRIBUTION, 1963.

  •  OWEN, HANDBOOK OF STATISTICAL TABLES, 1962, page 304.



				 July 20, 2023		     nbppf(3m_datapac)
nbran(3m_datapac)					     nbran(3m_datapac)



NAME
  nbran(3f) - [M_datapac:RANDOM] generate negative binomial random numbers


SYNOPSIS
  SUBROUTINE NBRAN(N,P,Npar,Istart,X)

	 INTEGER,intent(in)	   :: N
	 REAL(kind=wp),intent(in)  :: P
	 INTEGER,intent(in)	   :: Npar
	 INTEGER,intent(inout)	   :: Istart
	 REAL(kind=wp),intent(out) :: X(:)


DESCRIPTION
  NBRAN(3f) generates a random sample of size N from the negative binomial
  distribution with precision 'Bernoulli probability' parameter = P, and
  integer 'number of successes in Bernoulli trials' parameter = NPAR. The
  negative binomial distribution used herein has mean = NPAR*(1-P)/P and
  standard deviation = sqrt(NPAR*(1-P)/(P*P))).

  This distribution is defined for all non-negative integer X-- X = 0, 1, 2,
  ... .

  This distribution has the probability function

	 f(X) = c(NPAR+X-1,NPAR) * P**NPAR * (1-P)**X

  Where c(NPAR+X-1,NPAR) is the combinatorial function equaling the number of
  combinations of NPAR+X-1 items taken NPAR at a time.

  The negative binomial distribution is the distribution of the number of
  failures before obtaining NPAR successes in an indefinite sequence of
  Bernoulli (0,1) trials where the probability of success in a precision trial
  = P.

INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  P The value of the 'Bernoulli probability' parameter for the negative
    binomial distribution. P Should be between 0.0 (exclusively) and 1.0
    (exclusively).

  NPAR
    The integer value of the 'number of successes in Bernoulli trials'
    parameter. NPAR should be a positive integer.

  ISTART
    An integer flag code which (if set to 0) will start the generator over and
    hence produce the same random sample over and over again upon successive
    calls to this subroutine within a run; or (if set to some integer value
    not equal to 0, like, say, 1) will allow the generator to continue from
    where it stopped and hence produce different random samples upon
    successive calls to this subroutine within a run.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the negative binomial distribution will be placed.

EXAMPLES
  Sample program:

     program demo_nbran
     use m_datapac, only : nbran, plott, label, plotxt, sort
     implicit none
     integer,parameter :: n=400
     real	       :: p
     integer	       :: Npar
     integer	       :: Istart
     real	       :: x(n)
	call label('nbran')
	p=0.4
	Npar=3
	istart=12345
	call nbran(N,P,Npar,Istart,X)
	call plotxt(x,n)
	call sort(x,n,x) ! sort to show distribution
	call plotxt(x,n)
     end program demo_nbran

  Results:

  The following is a plot of X(I) (vertically) versus I (horizontally)
  I-----------I-----------I-----------I-----------I

    0.2700000E+02 -
      0.2600000E+02 I 0.2500000E+02 I

    0.2400000E+02 I
      0.2300000E+02 I 0.2200000E+02 I 0.2100000E+02 -

    0.2000000E+02 I
      0.1900000E+02 I

    0.1800000E+02 I
      X 			 X X X

    0.1700000E+02 I

    0.1600000E+02 I
      X 			   X

    0.1500000E+02 -
      X      X X	   X	      X

    0.1400000E+02 I
      X  X	   X	    X  X       X

    0.1300000E+02 I
      X    X X	  X  X	XX	X  X XXXX

    0.1200000E+02 I
      X     X	 X    X 	 X		X

    0.1100000E+02 I
      XX   X X	  X   XX   X	  XXX	XXXXX XX   XX

    0.1000000E+02 I
      X XX   XXXX   X	 XXX   X  XX	X  X	 X

    0.9000000E+01 -
      XX    XXXX XX   X  XX XX X   X X	  X  X XX  X

    0.8000000E+01 I
      XXXX XX  XXX  XX XXXXXXX X XX    X XXX   XXXX X X

    0.7000000E+01 I
      XX XXXXXX XXXXX X    XXXX  X XXX	X XXX XXXXX

    0.6000000E+01 I
      X XXX X X XXXXXX X  X  XXX X XXXX X XXXXX XXXX X

    0.5000000E+01 I
      XXXXXXXXXX XXXXXX XX XX XXX XXXX X XXXXXXXXXXX  X

    0.4000000E+01 I
      XX X X XXXX  XXXX XXXX XX X  XXXX XX XX	XX   X

    0.3000000E+01 -
      X XXX    XX  X XXX  XX XXX    X XX XX	XX X
      I-----------I-----------I-----------I-----------I

      0.1000E+01
	0.1008E+03  0.2005E+03	0.3002E+03  0.4000E+03

  The following is a plot of X(I) (vertically) versus I (horizontally)
  I-----------I-----------I-----------I-----------I

    0.2700000E+02 -
      0.2600000E+02 I 0.2500000E+02 I

    0.2400000E+02 I
      0.2300000E+02 I 0.2200000E+02 I 0.2100000E+02 -

    0.2000000E+02 I
      0.1900000E+02 I

    0.1800000E+02 I
      XX

    0.1700000E+02 I

    0.1600000E+02 I

    0.1500000E+02 -
      XX

    0.1400000E+02 I
      XX

    0.1300000E+02 I
      XX

    0.1200000E+02 I
      XX

    0.1100000E+02 I
      XXXX

    0.1000000E+02 I
      XXXX

    0.9000000E+01 -
      XXXX

    0.8000000E+01 I
      XXXXXXX

    0.7000000E+01 I
      XXXXXXX

    0.6000000E+01 I
      XXXXXXX

    0.5000000E+01 I
      XXXXXXXX

    0.4000000E+01 I
      XXXXXX

    0.3000000E+01 -
      XXXX I-----------I-----------I-----------I-----------I

      0.1000E+01
	0.1008E+03  0.2005E+03	0.3002E+03  0.4000E+03

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Hastings and Peacock, Statistical Distributions--A Handbook for Students
     and Practitioners, 1975, page 95.

  •  Johnson and Kotz, Discrete Distributions, 1969, pages 122-142.

  •  Feller, an Introduction to Probability Theory and its Applications,
     Volume 1, Edition 2, 1957, pages 155-157, 210.

  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     929.

  •  Kendall and Stuart, the Advanced Theory of Statistics, Volume 1, Edition
     2, 1963, pages 130-131.



				 July 20, 2023		     nbran(3m_datapac)
norcdf(3m_datapac)					    norcdf(3m_datapac)



NAME
  norcdf(3f) - [M_datapac:CUMULATIVE_DISTRIBUTION] compute the normal
  cumulative distribution function


SYNOPSIS
  SUBROUTINE NORCDF(X,Cdf)

	 REAL(kind=wp),intent(out) :: Cdf
	 REAL(kind=wp),intent(in)  :: X


DESCRIPTION
  NORCDF(3f) computes the cumulative distribution function value for the
  normal (Gaussian) distribution with mean = 0 and standard deviation = 1.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/sqrt(2*pi))*exp(-X*X/2)


INPUT ARGUMENTS
  X The value at which the cumulative distribution function is to be
    evaluated.

OUTPUT ARGUMENTS
  CDF
    The cumulative distribution function value.

EXAMPLES
  Sample program:

     program demo_norcdf
     !@(#) line plotter graph of cumulative distribution function
     use M_datapac, only : norcdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('norcdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call norcdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_norcdf

  Results:

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.1000000E+03 -							X
       0.9166666E+02 I							X
       0.8333334E+02 I							X
       0.7500000E+02 I							X
       0.6666667E+02 I							X
       0.5833334E+02 I							X
       0.5000000E+02 -							X
       0.4166667E+02 I							X
       0.3333334E+02 I							X
       0.2500000E+02 I						       XX
       0.1666667E+02 I						   XXXXX
       0.8333336E+01 I					 X XX XXXXX
       0.0000000E+00 -			 XX X X X X X XX
      -0.8333328E+01 I	      XXXXX XX X
      -0.1666666E+02 I	 XXXXX
      -0.2499999E+02 I	XX
      -0.3333333E+02 I	X
      -0.4166666E+02 I	X
      -0.5000000E+02 -	X
      -0.5833333E+02 I	X
      -0.6666666E+02 I	X
      -0.7500000E+02 I	X
      -0.8333333E+02 I	X
      -0.9166666E+02 I	X
      -0.1000000E+03 -	X
			I-----------I-----------I-----------I-----------I
		 0.0000E+00  0.2500E+00  0.5000E+00  0.7500E+00  0.1000E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  National Bureau of Standards Applied Mathematics Series 55, 1964, page
     932, Formula 26.2.17.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     40-111.



				 July 20, 2023		    norcdf(3m_datapac)
norout(3m_datapac)					    norout(3m_datapac)



NAME
  norout(3f) - [M_datapac:ANALYSIS] Performs a normal outlier analysis on the
  data in the input vector X.


SYNOPSIS
  SUBROUTINE NOROUT(X,N)

	 real(kind=wp),intent(in) :: X(:)
	 integer,intent(in) :: N


DESCRIPTION
  NOROUT(3f) performs a normal outlier analysis on the data in the input
  vector X.

  This analysis consists of--

    1.	various normal outlier statistics;

    2.	various partial sample means

    3.	various partial sample standard deviations;

    4.	the first 40 and last 40 ordered observations;

    5.	a line plot; and

    6.	a normal probability plot.

  When the first 40 and last 40 ordered observations are printed out, also
  included for each of the 40+40 = 80 listed data values is the corresponding
  residual about the (full) sample mean, the standardized residual, the normal
  n(0,1) value for the standardized residual, and the position number in the
  original data vector X.

  This last piece of information allows the data analyst to easily locate back
  in the original data vector. A suspected outlier or otherwise interesting
  observation.

INPUT ARGUMENTS
  X The vector of (unsorted or sorted) observations.

  N The integer number of observations in the vector X.  The maximum allowable
    value of N for this subroutine is 7500.

OUTPUT
  4 pages of automatic printout as described in the description above.

EXAMPLES
  Sample program:

     program demo_norout
     use M_datapac, only : norout
     implicit none
     ! call norout(x,y)
     end program demo_norout

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Grubbs, Technometrics, 1969, pages 1-21



				 July 20, 2023		    norout(3m_datapac)
norpdf(3m_datapac)					    norpdf(3m_datapac)



NAME
  norpdf(3f) - [M_datapac:PROBABILITY_DENSITY] compute the normal probability
  density function


SYNOPSIS
  SUBROUTINE NORPDF(X,Pdf)

	 REAL(kind=wp),intent(in)  :: X
	 REAL(kind=wp),intent(out) :: Pdf


DESCRIPTION
  NORPDF(3f) computes the probability density function value for the normal
  (Gaussian) distribution with mean = 0 and standard deviation = 1.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/sqrt(2*pi))*exp(-X*X/2)


INPUT ARGUMENTS
  X The value at which the probability density function is to be evaluated.

OUTPUT ARGUMENTS
  PDF
    The probability density function value.

EXAMPLES
  Sample program:

     program demo_norpdf
     !@(#) line plotter graph of probability density function
     use M_datapac, only : norpdf, plott, label
     implicit none
     real,allocatable  :: x(:), y(:)
     integer	       :: i
	call label('norpdf')
	x=[(real(i),i=-100,100,1)]
	if(allocated(y))deallocate(y)
	allocate(y(size(x)))
	do i=1,size(x)
	   call norpdf(x(i)/10.0,y(i))
	enddo
	call plott(x,y,size(x))
     end program demo_norpdf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     40-111.



				 July 20, 2023		    norpdf(3m_datapac)
norplt(3m_datapac)					    norplt(3m_datapac)



NAME
  norplt(3f) - [M_datapac:LINE_PLOT] generate a normal probability plot


SYNOPSIS
  SUBROUTINE NORPLT(X,N)

DESCRIPTION
  norplt(3f) generates a normal (gaussian) probability plot.

  the prototype normal distribution used herein has mean = 0 and standard
  deviation = 1. this distribution is defined for all x and has the
  probability density function

	 f(x) = (1/sqrt(2*pi)) * exp(-x*x/2).

  as used herein, a probability plot for a distribution is a plot of the
  ordered observations versus the order statistic medians for that
  distribution. the normal probability plot is useful in graphically testing
  the composite (that is, location and scale parameters need not be specified)
  hypothesis that the underlying distribution from which the data have been
  randomly drawn is the normal distribution.

  if the hypothesis is true, the probability plot should be near-linear.

  a measure of such linearity is given by the calculated probability plot
  correlation coefficient.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_norplt
     use M_datapac, only : norplt
     implicit none
     ! call norplt(x,y)
     end program demo_norplt

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  FILLIBEN, 'TECHNIQUES FOR TAIL LENGTH ANALYSIS', PROCEEDINGS OF THE

   EIGHTEENTH CONFERENCE ON THE DESIGN OF EXPERIMENTS IN ARMY RESEARCH
  DEVELOPMENT AND TESTING (ABERDEEN, MARYLAND, OCTOBER, 1972), pages 425-450.

  •  FILLIBEN, 'THE PROBABILITY PLOT CORRELATION COEFFICIENT TEST FOR
     NORMALITY', TECHNOMETRICS, 1975, pages 111-117.

     •	RYAN AND JOINER, 'NORMAL PROBABILITY PLOTS AND TESTS FOR NORMALITY'
	PENNSYLVANIA STATE UNIVERSITY REPORT.

     •	HAHN AND SHAPIRO, STATISTICAL METHODS IN ENGINEERING, 1967, pages
	260-308.

     •	JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
	40-111.



				 July 20, 2023		    norplt(3m_datapac)
norppf(3m_datapac)					    norppf(3m_datapac)



NAME
  norppf(3f) - [M_datapac:PERCENT_POINT] compute the normal percent point
  function


SYNOPSIS
  SUBROUTINE NORPPF(P,Ppf)

DESCRIPTION
  norppf(3f) computes the percent point function value for the normal
  (gaussian) distribution with mean = 0 and standard deviation = 1.

  this distribution is defined for all x and has the probability density
  function

	 f(x) = (1/sqrt(2*pi))*exp(-x*x/2).

  note that the percent point function of a distribution is identically the
  same as the inverse cumulative distribution function of the distribution.

OPTIONS
  X description of parameter

  Y description of parameter

EXAMPLES
  Sample program:

     program demo_norppf
     use M_datapac, only : norppf
     implicit none
     ! call norppf(x,y)
     end program demo_norppf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  ODEH AND EVANS, THE PERCENTAGE POINTS OF THE NORMAL DISTRIBUTION,
     ALGORITHM 70, APPLIED STATISTICS, 1974, pages 96-97.

  •  EVANS, ALGORITHMS FOR MINIMAL DEGREE POLYNOMIAL AND RATIONAL
     APPROXIMATION, M. SC. THESIS, 1972, UNIVERSITY OF VICTORIA, B. C.,
     CANADA.

  •  HASTINGS, APPROXIMATIONS FOR DIGITAL COMPUTERS, 1955, pages 113, 191,
     192.

  •  NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS SERIES 55, 1964, page
     933, FORMULA 26.2.23.

  •  FILLIBEN, SIMPLE AND ROBUST LINEAR ESTIMATION OF THE LOCATION PARAMETER
     OF A SYMMETRIC DISTRIBUTION (UNPUBLISHED PH.D. DISSERTATION, PRINCETON
     UNIVERSITY), 1969, pages 21-44, 229-231.

  •  FILLIBEN, 'THE PERCENT POINT FUNCTION', (UNPUBLISHED MANUSCRIPT), 1970,
     pages 28-31.

  •  JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970, pages
     40-111.

  •  THE KELLEY STATISTICAL TABLES, 1948.

  •  OWEN, HANDBOOK OF STATISTICAL TABLES, 1962, pages 3-16.

  •  PEARSON AND HARTLEY, BIOMETRIKA TABLES FOR STATISTICIANS, VOLUME 1, 1954,
     pages 104-113.



				 July 20, 2023		    norppf(3m_datapac)
norran(3m_datapac)					    norran(3m_datapac)



NAME
  norran(3f) - [M_datapac:RANDOM] generate normal random numbers


SYNOPSIS
  SUBROUTINE NORRAN(N,Iseed,X)

	 INTEGER,integer(in)	    :: N
	 INTEGER,integer(inout)     :: Iseed
	 REAL(kind=wp),integer(out) :: X(:)


DESCRIPTION
  NORRAN(3f) generates a random sample of size N from the normal (Gaussian)
  distribution with mean = 0 and standard deviation = 1.

  Internally, it uses the Box-Muller algorithm.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/sqrt(2*pi))*exp(-X*X/2)


INPUT ARGUMENTS
  N The desired integer number of random numbers to be generated.

  ISEED
    An integer seed value. Should be set to a non-negative value to start a
    new sequence of values. Will be set to -1 on return to indicate the next
    call should continue the current random sequence walk.

OUTPUT ARGUMENTS
  X A vector (of dimension at least N) into which the generated random sample
    of size N from the normal distribution with mean = 0 and standard
    deviation = 1 will be placed.

EXAMPLES
  Sample program:

     program demo_norran
     use M_datapac, only : norran, label, plotxt, sort, norplt, plott
     implicit none
     integer,parameter :: N=300
     real	       :: x(N), y(N)
     real	       :: mu, sigma
     integer	       :: Iseed
     integer	       :: i
	Iseed=1234
	sigma=1.00000
	mu=0.0
	call label('norran')
	call norran(N,Iseed,x)
	x = sigma*x
	x = x + mu
	call plotxt(x,n)
	call sort(x,n,y) ! sort and replot to better discern distribution
	call plott([(real(i),i=1,n)],y,n)
     end program demo_norran

  Results:

      THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
			I-----------I-----------I-----------I-----------I
       0.3016713E+01 -						     X
       0.2787551E+01 I
       0.2558388E+01 I
       0.2329226E+01 I	   X
       0.2100063E+01 I
       0.1870901E+01 I	   X   X XX	 X XX	   XX X
       0.1641738E+01 -	       X    X	      X
       0.1412575E+01 I	  X	   X X X  XX	   X  X X	  X
       0.1183413E+01 I			   X X	      XX    X XXX   XX
       0.9542503E+00 I	  X   XX	  X		X    X	XX X X
       0.7250879E+00 I	 X  XX X      X  X	  XXX	   XX	  X X X
       0.4959254E+00 I	   XX X  XXX   XXXXX   X  XX	X    X XX  XX  X
       0.2667627E+00 -	  X XX	XXX X	XXX X X XX   X XXXX X  X     XX
       0.3760028E-01 I	 X X	X   XX XXX  X	XXX X  X XXXX XX XX X  XX
      -0.1915622E+00 I	XX  X	X  X   X   X X X  X XXXX XX  XX X  X   X
      -0.4207249E+00 I	XX  XX	 XX XXXX X   XX XX   X XXXX X X XXX XXX
      -0.6498873E+00 I	      X XXX  XX  XX    XXXXXX	 X XX	 X     XX
      -0.8790498E+00 I	 XX  X X   X  X X    XXX      X   X  XX       XX
      -0.1108212E+01 -	      X     XXX     XXX  X	   X	    X
      -0.1337375E+01 I	X X    X		 X	 X X   X XX X X
      -0.1566537E+01 I	  X X	       X       X	       XX
      -0.1795700E+01 I	X    X	 X   XX        X			X
      -0.2024862E+01 I	      X  X	X
      -0.2254025E+01 I					   X	     XX
      -0.2483188E+01 -		  X
			I-----------I-----------I-----------I-----------I
		 0.1000E+01  0.7575E+02  0.1505E+03  0.2252E+03  0.3000E+03

      The following is a plot of Y(I) (vertically) versus X(I) (horizontally)
			I-----------I-----------I-----------I-----------I
       0.3000000E+03 -					      XX  X	X
       0.2875417E+03 I					  XXXXX
       0.2750833E+03 I					XXX
       0.2626250E+03 I				      XXX
       0.2501667E+03 I				    XXX
       0.2377083E+03 I				   XX
       0.2252500E+03 -				 XXX
       0.2127917E+03 I				 X
       0.2003333E+03 I				XX
       0.1878750E+03 I			       XX
       0.1754167E+03 I			      XX
       0.1629583E+03 I			      X
       0.1505000E+03 -			     XX
       0.1380417E+03 I			    XX
       0.1255833E+03 I			   XX
       0.1131250E+03 I			  XX
       0.1006667E+03 I			  X
       0.8820834E+02 I			 XX
       0.7575000E+02 -			X
       0.6329167E+02 I		       XX
       0.5083334E+02 I		     XX
       0.3837500E+02 I		    XX
       0.2591669E+02 I		 XXX
       0.1345834E+02 I	     XXXXX
       0.1000000E+01 -	X X XX
			I-----------I-----------I-----------I-----------I
		-0.2483E+01 -0.1108E+01  0.2668E+00  0.1642E+01  0.3017E+01


AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Box and Muller, 'A Note on the Generation of Random Normal Deviates',
     Journal of the Association for Computing Machinery, 1958, pages 610-611.

  •  Tocher, The Art of Simulation, 1963, pages 33-34.

  •  Hammersley and Handscomb, Monte Carlo Methods, 1964, page 39.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     40-111.



				 July 20, 2023		    norran(3m_datapac)
norsf(3m_datapac)					     norsf(3m_datapac)



NAME
  norsf(3f) - [M_datapac:SPARSITY] compute the normal sparsity function


SYNOPSIS
  SUBROUTINE NORSF(P,Sf)

	 REAL(kind=wp),intent(in)  :: P
	 REAL(kind=wp),intent(out) :: Sf


DESCRIPTION
  NORSF(3f) computes the sparsity function value for the normal (Gaussian)
  distribution with mean = 0 and standard deviation = 1.

  This distribution is defined for all X and has the probability density
  function

	 f(X) = (1/sqrt(2*pi))*exp(-x*x/2)

  Note that the sparsity function of a distribution is the derivative of the
  percent point function, and also is the reciprocal of the probability
  density function (but in units of P rather than X).

INPUT ARGUMENTS
  P The value at which the sparsity function is to be evaluated.  P should be
    between 0.0 and 1.0, exclusively.

OUTPUT ARGUMENTS
  SF
    The sparsity function value.

EXAMPLES
  Sample program:

     program demo_norsf
     use M_datapac, only : norsf
     implicit none
     ! call norsf(x,y)
     end program demo_norsf

  Results:

AUTHOR
  The original DATAPAC library was written by James Filliben of the
  Statistical Engineering Division, National Institute of Standards and
  Technology.

MAINTAINER
  John Urban, 2022.05.31

LICENSE
  CC0-1.0

REFERENCES
  •  Filliben, Simple and Robust Linear Estimation of the Location Parameter
     of a Symmetric Distribution (Unpublished PH.D. Dissertation, Princeton
     University), 1969, pages 21-44, 229-231.

  •  Filliben, 'The Percent Point Function', (Unpublished Manuscript), 1970,
     pages 28-31.

  •  Johnson and Kotz, Continuous Univariate Distributions--1, 1970, pages
     40-111.



				 July 20, 2023		     norsf(3m_datapac)
