$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file tcdf.3m_datapac.man
NAME
   tcdf(3f) - [M_datapac:STATISTICS:CD] computes the cumulative distribution
   function value for student's t distribution with integer degrees of
   freedom NU.

SYNOPSIS
    Subroutine tcdf (X, Y)

DESCRIPTION
   tcdf(3f) computes the cumulative distribution
   function value for student's t distribution
   with integer degrees of freedom parameter = nu.
   this distribution is defined for all x.
   the probability density function is given
   in the references below.

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program demo_tcdf
   use M_datapac, only : tcdf
   implicit none
   character(len=*),parameter ::  g='(*(g0,1x))'
   ! call tcdf(x,y)
   end program demo_tcdf

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the Statistical
   Engineering Division, National Institute of Standards and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!*==tcdf.f90  processed by SPAG 7.51RB at 12:54 on 18 Mar 2022
      SUBROUTINE TCDF(X,Nu,Cdf)
      IMPLICIT NONE
REAL(kind=wp) :: anu , Cdf , cdfn , sd , X , z
      INTEGER i , ievodd , imax , imin , ipr , Nu , nucut
!
!     INPUT  ARGUMENTS--X      = THE SINGLE PRECISION VALUE AT
!                                WHICH THE CUMULATIVE DISTRIBUTION
!                                FUNCTION IS TO BE EVALUATED.
!                                X SHOULD BE NON-NEGATIVE.
!                     --NU     = THE INTEGER NUMBER OF DEGREES
!                                OF FREEDOM.
!                                NU SHOULD BE POSITIVE.
!     OUTPUT ARGUMENTS--CDF    = THE SINGLE PRECISION CUMULATIVE
!                                DISTRIBUTION FUNCTION VALUE.
!     OUTPUT--THE SINGLE PRECISION CUMULATIVE DISTRIBUTION
!             FUNCTION VALUE CDF FOR THE STUDENT'S T DISTRIBUTION
!             WITH DEGREES OF FREEDOM PARAMETER = NU.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--NU SHOULD BE A POSITIVE INTEGER VARIABLE.
!     OTHER DATAPAC   SUBROUTINES NEEDED--NORCDF.
!     FORTRAN LIBRARY SUBROUTINES NEEDED--DSQRT, DATAN.
!     MODE OF INTERNAL OPERATIONS--DOUBLE PRECISION.
!     REFERENCES--NATIONAL BUREAU OF STANDARDS APPLIED MATHMATICS
!                 SERIES 55, 1964, PAGE 948, FORMULAE 26.7.3 AND 26.7.4.
!               --JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE
!                 DISTRIBUTIONS--2, 1970, PAGES 94-129.
!               --FEDERIGHI, EXTENDED TABLES OF THE
!                 PERCENTAGE POINTS OF STUDENT'S
!                 T-DISTRIBUTION, JOURNAL OF THE
!                 AMERICAN STATISTICAL ASSOCIATION,
!                 1959, PAGES 683-688.
!               --OWEN, HANDBOOK OF STATISTICAL TABLES,
!                 1962, PAGES 27-30.
!               --PEARSON AND HARTLEY, BIOMETRIKA TABLES
!                 FOR STATISTICIANS, VOLUME 1, 1954,
!                 PAGES 132-134.
!     ORIGINAL VERSION--JUNE      1972.
!     UPDATED         --MAY       1974.
!     UPDATED         --SEPTEMBER 1975.
!     UPDATED         --NOVEMBER  1975.
!     UPDATED         --OCTOBER   1976.
!
!---------------------------------------------------------------------
!
      DOUBLE PRECISION dx , dnu , pi , c , csq , s , sum , term , ai
      DOUBLE PRECISION DSQRT , DATAN
      DOUBLE PRECISION dconst
      DOUBLE PRECISION term1 , term2 , term3
      DOUBLE PRECISION dcdfn
      DOUBLE PRECISION dcdf
      DOUBLE PRECISION b11
      DOUBLE PRECISION b21 , b22 , b23 , b24 , b25
      DOUBLE PRECISION b31 , b32 , b33 , b34 , b35 , b36 , b37
      DOUBLE PRECISION d1 , d3 , d5 , d7 , d9 , d11
      DATA nucut/1000/
      DATA pi/3.14159265358979D0/
      DATA dconst/0.3989422804D0/
      DATA b11/0.25D0/
      DATA b21/0.01041666666667D0/
      DATA b22 , b23 , b24 , b25/3.0D0 , -7.0D0 , -5.0D0 , -3.0D0/
      DATA b31/0.00260416666667D0/
      DATA b32 , b33 , b34 , b35 , b36 , b37/1.0D0 , -11.0D0 , 14.0D0 , &
     &     6.0D0 , -3.0D0 , -15.0D0/
!
      ipr = 6
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      IF ( Nu<=0 ) THEN
         WRITE (ipr,99001)
99001    FORMAT (' ',                                                   &
     &'***** FATAL ERROR--THE SECOND INPUT ARGUMENT TO THE TCDF   SUBROU&
     &TINE IS NON-POSITIVE *****')
         WRITE (ipr,99002) Nu
99002    FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',I8,' *****')
         Cdf = 0.0_wp
         RETURN
      ELSE
!
!-----START POINT-----------------------------------------------------
!
         dx = X
         anu = Nu
         dnu = Nu
!
!     IF NU IS 3 THROUGH 9 AND X IS MORE THAN 3000
!     STANDARD DEVIATIONS BELOW THE MEAN,
!     SET CDF = 0.0 AND RETURN.
!     IF NU IS 10 OR LARGER AND X IS MORE THAN 150
!     STANDARD DEVIATIONS BELOW THE MEAN,
!     SET CDF = 0.0 AND RETURN.
!     IF NU IS 3 THROUGH 9 AND X IS MORE THAN 3000
!     STANDARD DEVIATIONS ABOVE THE MEAN,
!     SET CDF = 1.0 AND RETURN.
!     IF NU IS 10 OR LARGER AND X IS MORE THAN 150
!     STANDARD DEVIATIONS ABOVE THE MEAN,
!     SET CDF = 1.0 AND RETURN.
!
         IF ( Nu<=2 ) GOTO 100
         sd = SQRT(anu/(anu-2.0_wp))
         z = X/sd
         IF ( Nu>=10 .OR. z>=-3000.0_wp ) THEN
            IF ( Nu<10 .OR. z>=-150.0_wp ) THEN
               IF ( Nu<10 .AND. z>3000.0_wp ) GOTO 50
               IF ( Nu<10 .OR. z<=150.0_wp ) GOTO 100
               GOTO 50
            ENDIF
         ENDIF
         Cdf = 0.0_wp
         RETURN
 50      Cdf = 1.0_wp
         RETURN
      ENDIF
!
!     DISTINGUISH BETWEEN THE SMALL AND MODERATE
!     DEGREES OF FREEDOM CASE VERSUS THE
!     LARGE DEGREES OF FREEDOM CASE
!
 100  IF ( Nu<nucut ) THEN
!
!     TREAT THE SMALL AND MODERATE DEGREES OF FREEDOM CASE
!     METHOD UTILIZED--EXACT FINITE SUM
!     (SEE AMS 55, PAGE 948, FORMULAE 26.7.3 AND 26.7.4).
!
         c = DSQRT(dnu/(dx*dx+dnu))
         csq = dnu/(dx*dx+dnu)
         s = dx/DSQRT(dx*dx+dnu)
         imax = Nu - 2
         ievodd = Nu - 2*(Nu/2)
         IF ( ievodd==0 ) THEN
!
            sum = 1.0D0
            term = 1.0D0
            imin = 2
         ELSE
!
            sum = c
            IF ( Nu==1 ) sum = 0.0D0
            term = c
            imin = 3
         ENDIF
!
         IF ( imin<=imax ) THEN
            DO i = imin , imax , 2
               ai = i
               term = term*((ai-1.0D0)/ai)*csq
               sum = sum + term
            ENDDO
         ENDIF
!
         sum = sum*s
         IF ( ievodd/=0 ) sum = (2.0D0/pi)*(DATAN(dx/DSQRT(dnu))+sum)
         Cdf = 0.5D0 + sum/2.0D0
         RETURN
      ELSE
!
!     TREAT THE LARGE DEGREES OF FREEDOM CASE.
!     METHOD UTILIZED--TRUNCATED ASYMPTOTIC EXPANSION
!     (SEE JOHNSON AND KOTZ, VOLUME 2, PAGE 102, FORMULA 10;
!     SEE FEDERIGHI, PAGE 687).
!
         CALL NORCDF(X,cdfn)
         dcdfn = cdfn
         d1 = dx
         d3 = dx**3
         d5 = dx**5
         d7 = dx**7
         d9 = dx**9
         d11 = dx**11
         term1 = b11*(d3+d1)/dnu
         term2 = b21*(b22*d7+b23*d5+b24*d3+b25*d1)/(dnu**2)
         term3 = b31*(b32*d11+b33*d9+b34*d7+b35*d5+b36*d3+b37*d1)       &
     &           /(dnu**3)
         dcdf = term1 + term2 + term3
         dcdf = dcdfn - (dconst*(DEXP(-dx*dx/2.0D0)))*dcdf
         Cdf = dcdf
      ENDIF
!
      END SUBROUTINE TCDF
