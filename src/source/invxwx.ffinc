$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file PRIVATE/invxwx.3m_datapac.man
NAME
   invxwx(3f) - [M_datapac:STATISTICS] compute the inverse of X'WX

SYNOPSIS
      SUBROUTINE INVXWX(N,K)

DESCRIPTION
   INVXWX(3f) computes the inverse of X'WX which is done by computing
   the inverse of R'R (where r has just recently been modified before
   calling this subroutine. The input r = the square root of the
   diagonal matrix D times the old matrix R. the inverse of X'WX will
   be identical (except for the absence of S**2 = the residual variance)
   to the covariance matrix of the coefficients.

   the only reason INVXWX(3f) exists is for the calculation of such
   covariances.

   Unpivoting has also been done herein so as to undo the pivoting done
   in the decomposition subroutine (DECOMP(3f)). The matrix C used herein
   is an intermediate result matrix.

      x--not used
      q--not used
      r--used and changed
      d--not used
      ipivot--used

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program test_invxwx
   use M_datapac, only : invxwx
   implicit none
   ! private routine
   ! call invxwx(x,y)
   end program test_invxwx

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the
   Statistical Engineering Division, National Institute of Standards
   and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
$ENDBLOCK
!     UPDATED         --NOVEMBER  1975.
!     UPDATED         --FEBRUARY  1976.
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!*==invxwx.f90  processed by SPAG 7.51RB at 12:54 on 18 Mar 2022

SUBROUTINE INVXWX(N,K)
REAL(kind=wp) :: anegri, D, dotpro, DUM1, DUM2, dum3, Q, R, ri, WS
INTEGER i, ii, im1, ip1, IPIvot, irarg, irarg1, irarg2, irarg3, j, jj, K, l, N

!     INVERSION ALGORITHM USED--CHOLESKI DECOMPOSITION
!---------------------------------------------------------------------
!
      DIMENSION Q(10000) , R(2500) , D(50) , IPIvot(50)
      COMMON /BLOCK2_${KIND}/ WS(15000)
      COMMON /BLOCK3_${KIND}/ DUM1(3000) , DUM2(3000)
      EQUIVALENCE (Q(1),WS(1))
      EQUIVALENCE (R(1),WS(10001))
      EQUIVALENCE (D(1),WS(12501))
      EQUIVALENCE (IPIvot(1),WS(12551))
      DIMENSION dum3(200)
!
!-----START POINT-----------------------------------------------------
!
      DO i = 1 , K
         im1 = i - 1
         IF ( im1>=1 ) THEN
            DO j = 1 , im1
               irarg = (i-1)*K + j
               R(irarg) = 0.0_wp
            ENDDO
         ENDIF
      ENDDO
      DO jj = 1 , K
         j = K + 1 - jj
         DO ii = 1 , j
            i = j + 1 - ii
            ip1 = i + 1
            IF ( ip1<=K ) THEN
               DO l = ip1 , K
                  irarg1 = (i-1)*K + l
                  irarg2 = (j-1)*K + l
                  irarg3 = (l-1)*K + j
                  DUM1(l) = R(irarg1)
                  IF ( l<j ) DUM2(l) = R(irarg2)
                  IF ( l==j ) DUM2(l) = dum3(l)
                  IF ( l>j ) DUM2(l) = R(irarg3)
               ENDDO
            ENDIF
            ri = 0.0_wp
            irarg = (i-1)*K + i
            IF ( i==j ) ri = 1.0_wp/R(irarg)
            anegri = -ri
!
            CALL DOT(DUM1,DUM2,ip1,K,anegri,dotpro)
!
            irarg = (i-1)*K + i
            dotpro = -dotpro/R(irarg)
            IF ( i==j ) dum3(i) = dotpro
            irarg = (j-1)*K + i
            IF ( i<j ) R(irarg) = dotpro
         ENDDO
      ENDDO
      DO i = 1 , K
         irarg = (i-1)*K + i
         R(irarg) = dum3(i)
      ENDDO
!
!     MATRIX C NOW EQUALS THE INVERSE OF R'R.
!     NOW 'UNPIVOT' ON C AND PUT THE RESULTS BACK INTO R.
!
      DO i = 1 , K
         ii = IPIvot(i)
         DO j = 1 , i
            jj = IPIvot(j)
            irarg1 = (ii-1)*K + jj
            irarg2 = (i-1)*K + j
            irarg3 = (jj-1)*K + ii
            IF ( ii<jj ) R(irarg1) = R(irarg2)
            IF ( ii==jj ) dum3(ii) = R(irarg2)
            IF ( ii>jj ) R(irarg3) = R(irarg2)
         ENDDO
      ENDDO
      DO i = 1 , K
         irarg = (i-1)*K + i
         R(irarg) = dum3(i)
      ENDDO
END SUBROUTINE INVXWX
