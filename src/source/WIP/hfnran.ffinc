$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file hfnran.3m_datapac.man
NAME
   hfnran(3f) - [M_datapac:RANDOM] generate half-normal random numbers

SYNOPSIS
      SUBROUTINE HFNRAN(N,Iseed,X)

DESCRIPTION
   hfnran(3f) generates a random sample of size n from the halfnormal
   distribution.

   the prototype halfnormal distribution used herein has mean = sqrt(2/pi)
   = 0.79788456 and standard deviation = 1. this distribution is defined
   for all non-negative x and has the probability density function

       f(x) = (2/sqrt(2*pi)) * exp(-x*x/2).

   the prototype halfnormal distribution used herein is the distribution
   of the variate x = abs(z) where the variate z is normally distributed
   with mean = 0 and standard deviation = 1.

OPTIONS
    X   description of parameter
    Y   description of parameter

  ISEED  An integer iseed value. Should be set to a non-negative value
         to start a new sequence of values. Will be set to -1 on return
         to indicate the next call should continue the current random
         sequence walk.


EXAMPLES
  Sample program:

   program demo_hfnran
   use M_datapac, only : hfnran
   implicit none
   ! call hfnran(x,y)
   end program demo_hfnran

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the
   Statistical Engineering Division, National Institute of Standards
   and Technology.

MAINTAINER
   John Urban, 2022.05.31

LICENSE
   CC0-1.0

REFERENCES
  * TOCHER, THE ART OF SIMULATION, 1963, PAGES 14-15.
  * HAMMERSLEY AND HANDSCOMB, MONTE CARLO METHODS, 1964, PAGE 36.
  * JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE DISTRIBUTIONS--1, 1970,
  PAGES 53, 59, 81, 83.
$ENDBLOCK
!     VERSION NUMBER--82/7
!     ORIGINAL VERSION--NOVEMBER  1975.
!     UPDATED         --JULY      1976.
!     UPDATED         --DECEMBER  1981.
!     UPDATED         --MAY       1982.
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
! processed by SPAG 7.51RB at 12:54 on 18 Mar 2022

SUBROUTINE HFNRAN(N,Iseed,X)
REAL(kind=wp) :: arg1 , arg2 , pi , sqrt1 , u1 , u2 , X , y , z1 , z2
INTEGER :: i , ip1 , Iseed , N
!
!     INPUT ARGUMENTS--N      = THE DESIRED INTEGER NUMBER
!                                OF RANDOM NUMBERS TO BE
!                                GENERATED.
!     OUTPUT ARGUMENTS--X      = A  VECTOR
!                                (OF DIMENSION AT LEAST N)
!                                INTO WHICH THE GENERATED
!                                RANDOM SAMPLE WILL BE PLACED.
!     OUTPUT--A RANDOM SAMPLE OF SIZE N
!             FROM THE HALFNORMAL DISTRIBUTION
!              WITH MEAN = SQRT(2/PI) = 0.79788456
!              AND STANDARD DEVIATION = 1.

!---------------------------------------------------------------------
!
      DIMENSION X(:)
      DIMENSION y(2)
!
!---------------------------------------------------------------------
!
!-----DATA STATEMENTS-------------------------------------------------
!
      DATA pi/3.14159265359_wp/
!
!-----START POINT-----------------------------------------------------
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      IF ( N<1 ) THEN
         WRITE (G_IO,99001)
99001    FORMAT (' ',                                                   &
     &'***** FATAL ERROR--THE FIRST  INPUT ARGUMENT TO THE HFNRAN SUBROU&
     &TINE IS NON-POSITIVE *****')
         WRITE (G_IO,99002) N
99002    FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',I8,' *****')
         RETURN
      ELSE
!
!     GENERATE N UNIFORM (0,1) RANDOM NUMBERS;
!     THEN GENERATE 2 ADDITIONAL UNIFORM (0,1) RANDOM NUMBERS
!     (TO BE USED BELOW IN FORMING THE N-TH NORMAL
!     RANDOM NUMBER WHEN THE DESIRED SAMPLE SIZE N
!     HAPPENS TO BE ODD).
!
         CALL UNIRAN(N,Iseed,X)
         CALL UNIRAN(2,Iseed,y)
!
!     GENERATE N NORMAL RANDOM NUMBERS
!     USING THE BOX-MULLER METHOD.
!
         DO i = 1 , N , 2
            ip1 = i + 1
            u1 = X(i)
            IF ( i==N ) THEN
               u2 = y(2)
            ELSE
               u2 = X(ip1)
            ENDIF
            arg1 = -2.0_wp*LOG(u1)
            arg2 = 2.0_wp*pi*u2
            sqrt1 = SQRT(arg1)
            z1 = sqrt1*COS(arg2)
            z2 = sqrt1*SIN(arg2)
            X(i) = z1
            IF ( i/=N ) X(ip1) = z2
         ENDDO
!
!     GENERATE N HALFNORMAL RANDOM NUMBERS
!     USING THE DEFINITION THAT
!     A HALFNORMAL VARIATE
!     EQUALS THE ABSOLUTE VALUE OF A NORMAL VARIATE.
!
         DO i = 1 , N
            IF ( X(i)<0.0_wp ) X(i) = -X(i)
         ENDDO
      ENDIF
!
END SUBROUTINE HFNRAN
