$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file binran.3m_datapac.man
NAME
   binran(3f) - [M_datapac:RANDOM] generate binomial random numbers

SYNOPSIS
    SUBROUTINE BINRAN(N,P,Npar,Iseed,X)

DESCRIPTION
   BINRAN(3f) generates a random sample of size n from the binomial
   distribution with 'bernoulli probability' parameter =
   p, and integer 'number of bernoulli trials' parameter = npar.

   the binomial distribution used herein has mean = npar*p and standard
   deviation = sqrt(npar*p*(1-p)).

   this distribution is defined for all discrete integer x between 0
   (inclusively) and npar (inclusively). This distribution has the
   probability function

       f(x) = c(npar,x) * p**x * (1-p)**(npar-x).

   where c(npar,x) is the combinatorial function equaling the number of
   combinations of npar items taken x at a time.

   the binomial distribution is the distribution of the number of
   successes in npar bernoulli (0,1) trials where the probability of
   success in a precision trial = p.

OPTIONS
INPUT ARGUMENTS

  N      The desired integer number of random numbers to be generated.

  P      The value of the 'Bernoulli probability' parameter for the
         binomial distribution.  P should be between 0.0 (exclusively)
         and 1.0 (exclusively).

  NPAR   The integer value of the 'number of Bernoulli trials'
         parameter.  NPAR should be a positive integer.

OUTPUT ARGUMENTS

  X     A vector (of dimension at least N) into which the generated
        random sample of size n from the binomial distribution
        will be placed; with 'Bernoulli probability' parameter = P
        and 'number of Bernoulli trials' parameter = NPAR.

EXAMPLES
  Sample program:

   program demo_binran
   use M_datapac, only : binran
   implicit none
   character(len=*),parameter ::  g='(*(g0,1x))'
   ! call binran(x,y)
   end program demo_binran

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the Statistical
   Engineering Division, National Institute of Standards and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
REFERENCES
  o Johnson and Kotz, Discrete Distributions, 1969, Pages 50-86.
  o Hastings and Peacock, Statistical Distributions,
    A Handbook for Students and Practitioners, 1975,
    Page 41.
  o Feller, An Introduction to Probability Theory and Its Applications,
    Volume 1, Edition 2, 1957, Pages 135-142.
  o National Bureau of Standards Applied Mathematics
    Series 55, 1964, Page 929.
  o Kendall and Stuart, The Advanced Theory of Statistics,
    Volume 1, Edition 2, 1963, Pages 120-125.
  o Mood and Grable, Introduction to the Theory of Statistics,
    Edition 2, 1963, Pages 64-69.
  o Tocher, The Art Of Simulation, 1963, Pages 39-40.
$ENDBLOCK
!     VERSION NUMBER--82/7
!     ORIGINAL VERSION--NOVEMBER  1975.
!     UPDATED         --DECEMBER  1981.
!     UPDATED         --MAY       1982.
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
! ==binran.f90  processed by SPAG 7.51RB at 12:54 on 18 Mar 2022

SUBROUTINE BINRAN(N,P,Npar,Iseed,X)
REAL(kind=wp) :: g(1) , P , u(1) , X
INTEGER i , ig , Iseed , isum , j , N , Npar
!
!     RESTRICTIONS--
!                 --P SHOULD BE BETWEEN 0.0 (EXCLUSIVELY)
!                   AND 1.0 (EXCLUSIVELY).
!                 --NPAR SHOULD BE A POSITIVE INTEGER.

!     COMMENT--NOTE THAT EVEN THOUGH THE OUTPUT
!              FROM THIS DISCRETE RANDOM NUMBER
!              GENERATOR MUST NECESSARILY BE A
!              SEQUENCE OF ***INTEGER*** VALUES,
!              THE OUTPUT VECTOR X IS SINGLE
!              PRECISION IN MODE.
!              X HAS BEEN SPECIFIED AS SINGLE
!              PRECISION SO AS TO CONFORM WITH THE DATAPAC
!              CONVENTION THAT ALL OUTPUT VECTORS FROM ALL
!              THIS CONVENTION IS BASED ON THE BELIEF THAT
!              1) A MIXTURE OF MODES (FLOATING POINT
!              VERSUS INTEGER) IS INCONSISTENT AND
!              AN UNNECESSARY COMPLICATION
!              IN A DATA ANALYSIS; AND
!              2) FLOATING POINT MACHINE ARITHMETIC
!              (AS OPPOSED TO INTEGER ARITHMETIC)
!              IS THE MORE NATURAL MODE FOR DOING
!              DATA ANALYSIS.
!
!---------------------------------------------------------------------
      DIMENSION X(:)
!-----START POINT-----------------------------------------------------
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      IF ( N<1 ) THEN
         WRITE (G_IO,99001)
         99001    FORMAT (' ***** FATAL ERROR--THE FIRST  INPUT ARGUMENT TO THE BINRAN SUBROUTINE IS NON-POSITIVE *****')
         WRITE (G_IO,99005) N
         RETURN
      ELSEIF ( P<=0.0_wp .OR. P>=1.0_wp ) THEN
         WRITE (G_IO,99002)
         99002 FORMAT (&
         & ' ***** FATAL ERROR--THE SECOND INPUT ARGUMENT TO THE BINRAN SUBROUTINE IS OUTSIDE THE ALLOWABLE (0,1) INTERVAL *****')
         WRITE (G_IO,99003) P
         99003 FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',E15.8,' *****')
         RETURN
      ELSEIF ( Npar<1 ) THEN
         WRITE (G_IO,99004)
         99004    FORMAT (' ','***** FATAL ERROR--THE THIRD  INPUT ARGUMENT TO THE BINRAN SUBROUTINE IS NON-POSITIVE *****')
         WRITE (G_IO,99005) Npar
         RETURN
      ELSEIF ( P<0.1_wp ) THEN
         !
         !     CHECK ON THE MAGNITUDE OF P,
         !     AND BRANCH TO THE FASTER
         !     GENERATION METHOD ACCORDINGLY.
         !
         !
         !     IF P IS SMALL,
         !     GENERATE N BINOMIAL NUMBERS
         !     USING THE FACT THAT THE
         !     WAITING TIME FOR 1 SUCCESS IN
         !     BERNOULLI TRIALS HAS A
         !     GEOMETRIC DISTRIBUTION.
         !
         DO i = 1 , N
            isum = 0
            j = 1
            DO
               CALL GEORAN(1,P,Iseed,g)
               ig = g(1) + 0.5_wp
               isum = isum + ig + 1
               IF ( isum>Npar ) THEN
                  X(i) = j - 1
                  EXIT
               ELSE
                  j = j + 1
               ENDIF
            ENDDO
         ENDDO
         GOTO 99999
      ENDIF
      !
      !     IF P IS MODERATE OR LARGE,
      !     GENERATE N BINOMIAL RANDOM NUMBERS
      !     USING THE REJECTION METHOD.
      !
      DO i = 1 , N
         isum = 0
         DO j = 1 , Npar
            CALL UNIRAN(1,Iseed,u)
            IF ( u(1)<=P ) isum = isum + 1
         ENDDO
         X(i) = isum
      ENDDO
      RETURN
99005 FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',I8,' *****')
!
99999 continue
END SUBROUTINE BINRAN
