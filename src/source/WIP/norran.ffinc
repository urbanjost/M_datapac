$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file norran.3m_datapac.man
NAME
   norran(3f) - [M_datapac:RANDOM] generate normal random numbers

SYNOPSIS
      SUBROUTINE NORRAN(N,Iseed,X)

       INTEGER,integer(in)        :: N
       INTEGER,integer(inout)     :: Iseed
       REAL(kind=wp),integer(out) :: X(:)

DESCRIPTION

   NORRAN(3f) generates a random sample of size N from the normal
   (Gaussian) distribution with mean = 0 and standard deviation = 1.

   Internally, it uses the Box-Muller algorithm.

   This distribution is defined for all X and has the probability
   density function

       f(X) = (1/sqrt(2*pi))*exp(-X*X/2)

INPUT ARGUMENTS

   N     The desired integer number of random numbers to be generated.

  ISEED  An integer seed value. Should be set to a non-negative value
         to start a new sequence of values. Will be set to -1 on return
         to indicate the next call should continue the current random
         sequence walk.

OUTPUT ARGUMENTS

   X    A vector (of dimension at least N) into which the generated
        random sample of size N from the normal distribution with mean =
        0 and standard deviation = 1 will be placed.

EXAMPLES
  Sample program:

   program demo_norran
   use M_datapac, only : norran, label, plotxt, sort, norplt
   implicit none
   integer,parameter :: N=300
   real              :: x(N), y(N)
   real              :: mu, sigma
   integer           :: Iseed
      Iseed=1234
      sigma=1.00000
      mu=0.0
      call label('norran')
      call norran(N,Iseed,x)
      x = sigma*x
      x = x + mu
      call plotxt(x,n)
      call sort(x,n,y) 
      call plotxt(y,n)
   end program demo_norran

  Results:
    
    THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
                      I-----------I-----------I-----------I-----------I
     0.3016713E+01 -                                               X
     0.2787551E+01 I   
     0.2558388E+01 I   
     0.2329226E+01 I     X
     0.2100063E+01 I   
     0.1870901E+01 I     X   X XX      X XX      XX X
     0.1641738E+01 -         X    X         X
     0.1412575E+01 I    X        X X X  XX       X  X X         X
     0.1183413E+01 I                     X X        XX    X XXX   XX
     0.9542503E+00 I    X   XX          X             X    X  XX X X
     0.7250879E+00 I   X  XX X      X  X        XXX      XX     X X X
     0.4959254E+00 I     XX X  XXX   XXXXX   X  XX    X    X XX  XX  X
     0.2667627E+00 -    X XX  XXX X   XXX X X XX   X XXXX X  X     XX
     0.3760028E-01 I   X X    X   XX XXX  X   XXX X  X XXXX XX XX X  XX
    -0.1915622E+00 I  XX  X   X  X   X   X X X  X XXXX XX  XX X  X   X
    -0.4207249E+00 I  XX  XX   XX XXXX X   XX XX   X XXXX X X XXX XXX
    -0.6498873E+00 I        X XXX  XX  XX    XXXXXX    X XX    X     XX
    -0.8790498E+00 I   XX  X X   X  X X    XXX      X   X  XX       XX
    -0.1108212E+01 -        X     XXX     XXX  X         X        X
    -0.1337375E+01 I  X X    X                 X       X X   X XX X X
    -0.1566537E+01 I    X X          X       X               XX
    -0.1795700E+01 I  X    X   X   XX        X                        X
    -0.2024862E+01 I        X  X      X
    -0.2254025E+01 I                                     X         XX
    -0.2483188E+01 -            X
                      I-----------I-----------I-----------I-----------I
               0.1000E+01  0.7575E+02  0.1505E+03  0.2252E+03  0.3000E+03
    
    THE FOLLOWING IS A PLOT OF X(I) (VERTICALLY) VERSUS I (HORIZONTALLY
                      I-----------I-----------I-----------I-----------I
     0.3016713E+01 -                                                  X
     0.2787551E+01 I   
     0.2558388E+01 I   
     0.2329226E+01 I                                                  X
     0.2100063E+01 I   
     0.1870901E+01 I                                                XXX
     0.1641738E+01 -                                                X
     0.1412575E+01 I                                              XXX
     0.1183413E+01 I                                            XXX
     0.9542503E+00 I                                          XXX
     0.7250879E+00 I                                        XXX
     0.4959254E+00 I                                   XXXXX
     0.2667627E+00 -                               XXXXX
     0.3760028E-01 I                         XXXXXXX
    -0.1915622E+00 I                     XXXXX
    -0.4207249E+00 I                XXXXXX
    -0.6498873E+00 I            XXXXX
    -0.8790498E+00 I         XXXX
    -0.1108212E+01 -       XX
    -0.1337375E+01 I     XXX
    -0.1566537E+01 I    XX
    -0.1795700E+01 I   XX
    -0.2024862E+01 I   X
    -0.2254025E+01 I  X
    -0.2483188E+01 -  X
                      I-----------I-----------I-----------I-----------I
               0.1000E+01  0.7575E+02  0.1505E+03  0.2252E+03  0.3000E+03
================================================================================
```

AUTHOR
   The original DATAPAC library was written by James Filliben of the
   Statistical Engineering Division, National Institute of Standards
   and Technology.

MAINTAINER
   John Urban, 2022.05.31

LICENSE
   CC0-1.0

REFERENCES
  * Box and Muller, 'A Note on the Generation of Random Normal Deviates',
    Journal of the Association for Computing Machinery, 1958, Pages 610-611.
  * Tocher, The Art of Simulation, 1963, Pages 33-34.
  * Hammersley and Handscomb, Monte Carlo Methods, 1964, Page 39.
  * Johnson and Kotz, Continuous Univariate Distributions--1, 1970,
    Pages 40-111.

$ENDBLOCK
!     VERSION NUMBER--82.6
!     ORIGINAL VERSION--JUNE      1972.
!     UPDATED         --SEPTEMBER 1975.
!     UPDATED         --NOVEMBER  1975.
!     UPDATED         --JULY      1976.
!     UPDATED         --DECEMBER  1981.
!     UPDATED         --MAY       1982.
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
! processed by SPAG 7.51RB at 12:54 on 18 Mar 2022

SUBROUTINE NORRAN(N,Iseed,X)
INTEGER,intent(in)        :: N
INTEGER,intent(in)        :: Iseed
REAL(kind=wp),intent(out) :: X(:)
REAL(kind=wp) :: arg1, arg2, sqrt1, u1, u2, y(2), z1, z2
INTEGER       :: i, ip1 
   !
   !  CHECK THE INPUT ARGUMENTS FOR ERRORS
   !
   IF ( N<1 ) THEN
      WRITE (G_IO,99001)
      99001 FORMAT (' ***** FATAL ERROR--THE FIRST INPUT ARGUMENT TO THE NORRAN SUBROUTINE IS NON-POSITIVE *****')
      WRITE (G_IO,99002) N
      99002 FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',I0,' *****')
      RETURN
   ELSE
      !
      !  GENERATE N UNIFORM (0,1) RANDOM NUMBERS;
      !  THEN GENERATE 2 ADDITIONAL UNIFORM (0,1) RANDOM NUMBERS
      !  (TO BE USED BELOW IN FORMING THE N-TH NORMAL
      !  RANDOM NUMBER WHEN THE DESIRED SAMPLE SIZE N
      !  HAPPENS TO BE ODD).
      !
      CALL UNIRAN(N,Iseed,X)
      CALL UNIRAN(2,Iseed,y)
      !
      !  GENERATE N NORMAL RANDOM NUMBERS
      !  USING THE BOX-MULLER METHOD.
      !
      DO i = 1 , N , 2
         ip1 = i + 1
         u1 = X(i)
         IF ( i==N ) THEN
            u2 = y(2)
         ELSE
            u2 = X(ip1)
         ENDIF
         arg1 = -2.0_wp*LOG(u1)
         arg2 = 2.0_wp*G_pi*u2
         sqrt1 = SQRT(arg1)
         z1 = sqrt1*COS(arg2)
         z2 = sqrt1*SIN(arg2)
         X(i) = z1
         IF ( i/=N ) X(ip1) = z2
      ENDDO
   ENDIF
 
END SUBROUTINE NORRAN
