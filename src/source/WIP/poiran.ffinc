$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file poiran.3m_datapac.man
NAME
   poiran(3f) - [M_datapac:RANDOM] generate Poisson random numbers

SYNOPSIS
      SUBROUTINE POIRAN(N,Alamba,Iseed,X)

DESCRIPTION
   poiran(3f) generates a random sample of size n from the poisson
   distribution with precision precision tail length parameter = alamba.

   the poisson distribution used herein has mean = alamba and standard
   deviation = sqrt(alamba).

   this distribution is defined for all discrete non-negative integer
   x--x = 0, 1, 2, ... .

   this distribution has the probability function

       f(x) = exp(-alamba) * alamba**x / x!.

   the poisson distribution is the distribution of the number of events
   in the interval (0,alamba) when the waiting time between events is
   exponentially distributed with mean = 1 and standard deviation = 1.

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program demo_poiran
   use M_datapac, only : poiran
   implicit none
   character(len=*),parameter ::  g='(*(g0,1x))'
   ! call poiran(x,y)
   end program demo_poiran

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the Statistical
   Engineering Division, National Institute of Standards and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
REFERENCES
  o COX AND MILLER, THE THEORY OF STOCHASTIC PROCESSES, 1965, PAGE 7.
  o TOCHER, THE ART OF SIMULATION, 1963, PAGES 36-37.
  o JOHNSON AND KOTZ, DISCRETE DISTRIBUTIONS, 1969, PAGES 87-121.
  o HASTINGS AND PEACOCK, STATISTICAL DISTRIBUTIONS--A HANDBOOK FOR
    STUDENTS AND PRACTITIONERS, 1975, PAGES 108-113.
  o FELLER, AN INTRODUCTION TO PROBABILITY THEORY AND ITS APPLICATIONS,
    VOLUME 1, EDITION 2, 1957, PAGES 146-154.
  o NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS SERIES 55, 1964,
    PAGE 929.
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!*==poiran.f90  processed by SPAG 7.51RB at 12:54 on 18 Mar 2022
      SUBROUTINE POIRAN(N,Alamba,Iseed,X)
REAL(kind=wp) :: Alamba , e , sum , u(1) , X
INTEGER :: i , Iseed , j , N
!
!     INPUT ARGUMENTS--N      = THE DESIRED INTEGER NUMBER
!                                OF RANDOM NUMBERS TO BE
!                                GENERATED.
!                     --ALAMBA = THE  VALUE
!                                OF THE TAIL LENGTH PARAMETER.
!                                ALAMBA SHOULD BE POSITIVE.
!     OUTPUT ARGUMENTS--X      = A  VECTOR
!                                (OF DIMENSION AT LEAST N)
!                                INTO WHICH THE GENERATED
!                                RANDOM SAMPLE WILL BE PLACED.
!     OUTPUT--A RANDOM SAMPLE OF SIZE N
!             FROM THE POISSON DISTRIBUTION
!             WITH TAIL LENGTH PARAMETER = ALAMBA.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--THERE IS NO RESTRICTION ON THE MAXIMUM VALUE
!                   OF N FOR THIS SUBROUTINE.
!                 --ALAMBA SHOULD BE POSITIVE.
!     OTHER DATAPAC   SUBROUTINES NEEDED--UNIRAN.
!     FORTRAN LIBRARY SUBROUTINES NEEDED--LOG.
!     MODE OF INTERNAL OPERATIONS--.
!     COMMENT--THE  TAIL LENGTH
!              PARAMETER ALAMBA IS     NOT     RESTRICTED
!              TO ONLY INTEGER VALUES.
!              ALAMBA CAN BE SET TO ANY POSITIVE REAL
!              VALUE--INTEGER OR NON-INTEGER.
!     COMMENT--NOTE THAT EVEN THOUGH THE OUTPUT
!              FROM THIS DISCRETE RANDOM NUMBER
!              GENERATOR MUST NECESSARILY BE A
!              SEQUENCE OF ***INTEGER*** VALUES,
!              THE OUTPUT VECTOR X IS SINGLE
!              PRECISION IN MODE.
!              X HAS BEEN SPECIFIED AS SINGLE
!              PRECISION SO AS TO CONFORM WITH THE DATAPAC
!              CONVENTION THAT ALL OUTPUT VECTORS FROM ALL
!              DATAPAC SUBROUTINES ARE .
!              THIS CONVENTION IS BASED ON THE BELIEF THAT
!              1) A MIXTURE OF MODES (FLOATING POINT
!              VERSUS INTEGER) IS INCONSISTENT AND
!              AN UNNECESSARY COMPLICATION
!              IN A DATA ANALYSIS; AND
!              2) FLOATING POINT MACHINE ARITHMETIC
!              (AS OPPOSED TO INTEGER ARITHMETIC)
!              IS THE MORE NATURAL MODE FOR DOING
!              DATA ANALYSIS.
!     VERSION NUMBER--82.6
!     ORIGINAL VERSION--NOVEMBER  1975.
!     UPDATED         --DECEMBER  1981.
!     UPDATED         --MAY       1982.
!
!-----CHARACTER STATEMENTS FOR NON-COMMON VARIABLES-------------------
!
!---------------------------------------------------------------------
!
      DIMENSION X(:)
!
!---------------------------------------------------------------------
!
!-----START POINT-----------------------------------------------------
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      IF ( N<1 ) THEN
         WRITE (G_IO,99001)
99001    FORMAT (' ',                                                   &
     &'***** FATAL ERROR--THE FIRST  INPUT ARGUMENT TO THE POIRAN SUBROU&
     &TINE IS NON-POSITIVE *****')
         WRITE (G_IO,99002) N
99002    FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',I8,' *****')
         RETURN
      ELSEIF ( Alamba<=0.0_wp ) THEN
         WRITE (G_IO,99003)
99003    FORMAT (' ',                                                   &
     &'***** FATAL ERROR--THE SECOND INPUT ARGUMENT TO THE POIRAN SUBROU&
     &TINE IS NON-POSITIVE *****')
         WRITE (G_IO,99004) Alamba
99004    FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',E15.8,       &
     &           ' *****')
         RETURN
      ELSE
!
!     GENERATE N POISSON RANDOM NUMBERS
!     USING THE FACT THAT THE DISTRIBUTION
!     OF EXPONENTIAL WAITING TIMES IS POISSON.
!
         DO i = 1 , N
            sum = 0.0_wp
            j = 1
            DO
               CALL UNIRAN(1,Iseed,u)
               e = -LOG(1.0_wp-u(1))
               sum = sum + e
               IF ( sum>Alamba ) THEN
                  X(i) = j - 1
                  EXIT
               ELSE
                  j = j + 1
               ENDIF
            ENDDO
         ENDDO
      ENDIF
!
END SUBROUTINE POIRAN
