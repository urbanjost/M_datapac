$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file decomp.3m_datapac.man
NAME
   decomp(3f) - [M_datapac:STATISTICS] decomposes a weighted data matrix
   (utility routine used by other routines)

SYNOPSIS
      SUBROUTINE DECOMP(N,K,Eta,Tol,Irank,Insing)

DESCRIPTION
   decomp(3f) decomposes the weighted data matrix q which originally =
   the n by k data matrix x times the square root of the weights (in w).

   the original q is decomposed into a new q times the inverse of a
   diagonal matrix d times the diagonal matrix d times an upper triangular
   matrix r.

   the new n by k q has orthogonal columns.

   a second output from decomp(3f) is the rank and status (non-singular
   or singular) of the data matrix x.

   a third output from decomp(3f) is the numerically optimal pivot points
   for the decomposition.

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program demo_decomp
   use M_datapac, only : decomp
   implicit none
   character(len=*),parameter ::  g='(*(g0,1x))'
   ! call decomp(x,y)
   end program demo_decomp

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the Statistical
   Engineering Division, National Institute of Standards and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
$ENDBLOCK
!     UPDATED         --NOVEMBER  1975.
!     UPDATED         --FEBRUARY  1976.
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
! ==decomp.f90  processed by SPAG 7.51RB at 12:54 on 18 Mar 2022

SUBROUTINE DECOMP(N,K,Eta,Tol,Irank,Insing)
REAL(kind=wp) :: D, dis, dn, DUM1, DUM2, Eta, hold, Q, R, risj, Tol, tol2, WS
INTEGER i, Insing, ip, IPIvot, iqarg, iqarg1, iqarg2, Irank, irarg, irarg1, irarg2, is, ism1, isp1, j, K, l, m, N
LOGICAL fsum
DIMENSION Q(10000) , R(2500) , D(50) , IPIvot(50)
COMMON /BLOCK2_${KIND}/ WS(15000)
COMMON /BLOCK3_${KIND}/ DUM1(3000) , DUM2(3000)
EQUIVALENCE (Q(1),WS(1))          !     Q--USED AND CHANGED
EQUIVALENCE (R(1),WS(10001))      !     R--DEFINED
EQUIVALENCE (D(1),WS(12501))      !     D--PERMANENTLY DEFINED
EQUIVALENCE (IPIvot(1),WS(12551)) !     IPIVOT--PERMANENTLY DEFINED
!
!-----START POINT-----------------------------------------------------
!
!     ZERO-OUT SOME VARIABLES, VECTORS, AND ARRAYS
!
      Insing = 0
      Irank = 0
      DO j = 1 , K
         D(j) = 0.0_wp
         DO i = 1 , K
            irarg = (i-1)*K + j
            R(irarg) = 0.0_wp
         ENDDO
      ENDDO
!
      tol2 = Tol*Tol
      DO j = 1 , K
         IPIvot(j) = j
      ENDDO
      DO is = 1 , K
!
!     BEGIN STEP NUMBER      IS      IN THE DECOMPOSITION
!
         IF ( is==1 ) fsum = .TRUE.
 50      dis = 0.0_wp
         ip = is
!
!     BEGIN THE PIVOT SEARCH
!
         DO j = is , K
            m = IPIvot(j)
            IF ( fsum ) THEN
               DO l = 1 , N
                  iqarg = (l-1)*K + m
                  DUM1(l) = Q(iqarg)
                  DUM2(l) = Q(iqarg)
               ENDDO
!
               CALL DOT(DUM1,DUM2,1,N,0.0_wp,D(j))
            ENDIF
!
            IF ( dis<D(j) ) THEN
               dis = D(j)
               ip = j
            ENDIF
         ENDDO
!
!     END THE PIVOT SEARCH
!
         m = IPIvot(ip)
         IF ( fsum ) dn = dis
         IF ( dis<Eta*dn ) THEN
            fsum = .TRUE.
         ELSE
            fsum = .FALSE.
         ENDIF
         IF ( fsum ) GOTO 50
         IF ( ip/=is ) THEN
!
!     BEGIN COLUMN INTERCHANGES
!
            D(ip) = D(is)
            IPIvot(ip) = IPIvot(is)
            IPIvot(is) = m
            IF ( is/=1 ) THEN
               ism1 = is - 1
               DO i = 1 , ism1
                  irarg1 = (i-1)*K + ip
                  irarg2 = (i-1)*K + is
                  hold = R(irarg1)
                  R(irarg1) = R(irarg2)
                  R(irarg2) = hold
               ENDDO
            ENDIF
         ENDIF
!
!     END COLUMN INTERCHANGES
!
         DO l = 1 , N
            iqarg = (l-1)*K + m
            DUM1(l) = Q(iqarg)
            DUM2(l) = Q(iqarg)
         ENDDO
!
         CALL DOT(DUM1,DUM2,1,N,0.0_wp,D(is))
!
         dis = D(is)
         IF ( dis<=tol2*D(1) ) RETURN
         IF ( dis/=0.0_wp ) THEN
            isp1 = is + 1
            IF ( isp1<=K ) THEN
!
!     BEGIN ORTHOGONALIZATION
!
               DO j = isp1 , K
                  ip = IPIvot(j)
                  DO l = 1 , N
                     iqarg1 = (l-1)*K + m
                     iqarg2 = (l-1)*K + ip
                     DUM1(l) = Q(iqarg1)
                     DUM2(l) = Q(iqarg2)
                  ENDDO
!
                  irarg = (is-1)*K + j
                  CALL DOT(DUM1,DUM2,1,N,0.0_wp,R(irarg))
                  R(irarg) = R(irarg)/dis
!
                  risj = R(irarg)
                  DO i = 1 , N
                     iqarg1 = (i-1)*K + ip
                     iqarg2 = (i-1)*K + m
                     Q(iqarg1) = Q(iqarg1) - risj*Q(iqarg2)
                  ENDDO
                  D(j) = D(j) - dis*risj*risj
               ENDDO
            ENDIF
!
!     END ORTHOGONALIZATION
!
            Irank = is
         ELSE
            Insing = 0
            RETURN
         ENDIF
      ENDDO
!
!     END STEP NUMBER     IS     INTHE DECOMPOSITION
!
      Insing = 1
END SUBROUTINE DECOMP
