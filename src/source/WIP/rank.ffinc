$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file rank.3m_datapac.man
NAME
   rank(3f) - [M_datapac:SORT] rank a vector of sample observations

SYNOPSIS
      SUBROUTINE RANK(X,N,Xr)

DESCRIPTION
   rank(3f) ranks (in ascending order) the n elements of the precision
   precision vector x, and puts the resulting n ranks into the precision
   precision vector xr.

   rank(3f) gives the data analyst the ability to (for example) rank
   the data preliminary to certain distribution-free analyses.

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program demo_rank
   use M_datapac, only : rank
   implicit none
   character(len=*),parameter ::  g='(*(g0,1x))'
   ! call rank(x,y)
   end program demo_rank

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the Statistical
   Engineering Division, National Institute of Standards and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
REFERENCES
  * CACM MARCH 1969, PAGE 186 (BINARY SORT ALGORITHM BY RICHARD
    C. SINGLETON).
  * CACM JANUARY 1970, PAGE 54.
  * CACM OCTOBER 1970, PAGE 624.
  * JACM JANUARY 1961, PAGE 41.
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
! processed by SPAG 7.51RB at 12:54 on 18 Mar 2022
SUBROUTINE RANK(X,N,Xr)
REAL(kind=wp) :: an , avrank , hold , rprev , X , xprev , Xr , XS
INTEGER :: i , ibran , iupper , j , jmin , jp1 , k , N , nm1
!
!     INPUT ARGUMENTS--X      = THE  VECTOR OF
!                                OBSERVATIONS TO BE RANKED.
!                     --N      = THE INTEGER NUMBER OF OBSERVATIONS
!                                IN THE VECTOR X.
!     OUTPUT ARGUMENTS--XR     = THE  VECTOR
!                                INTO WHICH THE RANKS
!                                FROM X WILL BE PLACED.
!     OUTPUT--THE  VECTOR XR
!             CONTAINING THE RANKS
!             (IN ASCENDING ORDER)
!             OF THE VALUES
!             IN THE  VECTOR X.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--THE MAXIMUM ALLOWABLE VALUE OF N
!                   FOR THIS SUBROUTINE IS 7500.
!     OTHER DATAPAC   SUBROUTINES NEEDED--SORT.
!     MODE OF INTERNAL OPERATIONS--.
!     COMMENT--THE RANK OF THE FIRST ELEMENT
!              OF THE VECTOR X
!              WILL BE PLACED IN THE FIRST POSITION
!              OF THE VECTOR XR,
!              THE RANK OF THE SECOND ELEMENT
!              OF THE VECTOR X
!              WILL BE PLACED IN THE SECOND POSITION
!              OF THE VECTOR XR,
!              ETC.
!     COMMENT--THE SMALLEST ELEMENT IN THE VECTOR X
!              WILL HAVE A RANK OF 1 (UNLESS TIES EXIST).
!              THE LARGEST ELEMENT IN THE VECTOR X
!              WILL HAVE A RANK OF N (UNLESS TIES EXIST).
!     COMMENT--ALTHOUGH RANKS ARE USUALLY (UNLESS TIES EXIST)
!              INTEGRAL VALUES FROM 1 TO N, IT IS TO BE
!              NOTED THAT THEY ARE OUTPUTED AS SINGLE
!              PRECISION INTEGERS IN THE
!              VECTOR XR.
!              XR IS  SO AS TO BE
!              CONSISTENT WITH THE FACT THAT ALL
!              VECTOR ARGUMENTS IN ALL OTHER
!              DATAPAC SUBROUTINES ARE ;
!              BUT MORE IMPORTANTLY, BECAUSE TIES FREQUENTLY
!              DO EXIST IN DATA SETS AND SO SOME OF THE
!              RESULTING RANKS WILL BE NON-INTEGRAL
!              AND SO THE OUTPUT VECTOR OF RANKS MUST NECESSARILY
!              BE  AND NOT INTEGER.
!     COMMENT--THE INPUT VECTOR X REMAINS UNALTERED.
!     COMMENT--DUE TO CONFLICTING USE OF LABELED
!              COMMON /BLOCK2_${KIND}/ BY THIS RANK
!              SUBROUTINE AND THE SPCORR (SPEARMAN RANK
!              CORRELATION COEFFICIENT) SUBROUTINE,
!              THE VECTOR XS OF THIS RANK
!              SUBROUTINE HAS BEEN PLACED IN
!              LABELED COMMON /BLOCK4_${KIND}/
!     COMMENT--THE FIRST AND THIRD ARGUMENTS IN THE
!              CALLING SEQUENCE MAY
!              BE IDENTICAL; THAT IS, AN 'IN PLACE'
!              RANKING IS PERMITTED.
!              THE CALLING SEQUENCE
!              CALL RANK(X,N,X) IS VALID, IF DESIRED.
!     COMMENT--THE SORTING ALGORTHM USED HEREIN
!              IS THE BINARY SORT.
!              THIS ALGORTHIM IS EXTREMELY FAST AS THE
!              FOLLOWING TIME TRIALS INDICATE.
!              THESE TIME TRIALS WERE CARRIED OUT ON THE
!              UNIVAC 1108 EXEC 8 SYSTEM AT NBS
!              IN AUGUST OF 1974.
!              BY WAY OF COMPARISON, THE TIME TRIAL VALUES
!              FOR THE EASY-TO-PROGRAM BUT EXTREMELY
!              INEFFICIENT BUBBLE SORT ALGORITHM HAVE
!              ALSO BEEN INCLUDED--
!              NUMBER OF RANDOM        BINARY SORT       BUBBLE SORT
!               NUMBERS SORTED
!                N = 10                 .002 SEC          .002 SEC
!                N = 100                .011 SEC          .045 SEC
!                N = 1000               .141 SEC         4.332 SEC
!                N = 3000               .476 SEC        37.683 SEC
!                N = 10000             1.887 SEC      NOT COMPUTED
!     ORIGINAL VERSION--JUNE      1972.
!     UPDATED         --JANUARY   1975.
!     UPDATED         --NOVEMBER  1975.
!     UPDATED         --JANUARY   1977.
!
!---------------------------------------------------------------------
!
      DIMENSION X(:) , Xr(:)
      COMMON /BLOCK4_${KIND}/ XS(7500)
!
      an = N
      iupper = 7500
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      IF ( N<1 .OR. N>iupper ) THEN
         WRITE (G_IO,99001) iupper
99001    FORMAT (' ',                                                   &
     &'***** FATAL ERROR--THE SECOND INPUT ARGUMENT TO THE RANK   SUBROU&
     &TINE IS OUTSIDE THE ALLOWABLE (1,',I6,') INTERVAL *****')
         WRITE (G_IO,99002) N
99002    FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',I8,' *****')
         RETURN
      ELSE
         IF ( N==1 ) THEN
            WRITE (G_IO,99003)
99003       FORMAT (' ',                                                &
     &'***** NON-FATAL DIAGNOSTIC--THE SECOND INPUT ARGUMENT TO THE RANK&
     &   SUBROUTINE HAS THE VALUE 1 *****')
            Xr(1) = 1.0_wp
            RETURN
         ELSE
            hold = X(1)
            DO i = 2 , N
               IF ( X(i)/=hold ) GOTO 50
            ENDDO
            WRITE (G_IO,99004) hold
99004       FORMAT (' ',                                                &
     &'***** NON-FATAL DIAGNOSTIC--THE FIRST  INPUT ARGUMENT (A VECTOR) &
     &TO THE RANK   SUBROUTINE HAS ALL ELEMENTS = ',E15.8,' *****')
            avrank = (an+1.0_wp)/2.0_wp
            DO i = 1 , N
               Xr(i) = avrank
            ENDDO
            RETURN
         ENDIF
!
!-----START POINT-----------------------------------------------------
!
!     FIRST SORT THE DATA FROM THE INPUT VECTOR X
!     INTO THE INTERMEDIATE STORAGE VECTOR XS.
!
 50      CALL SORT(X,N,XS)
!
!     NOW DETERMINE THE RANKS.
!     THE BASIC ALGORITHM IS TO TAKE A GIVEN ELEMENT
!     IN THE ORIGINAL INPUT VECTOR X,
!     AND SCAN THE SORTED VALUES IN THE XS VECTOR
!     UNTIL A MATCH IS FOUND;
!     WHEN A MATCH IS FOUND, THEN THE RANK FOR THAT
!     VALUE IN THE XS VECTOR IS DETERMINED.
!     THAT RANK IS THEN WRITTEN INTO THAT POSITION
!     IN THE OUTPUT Y VECTOR WHICH CORRESPONDS TO THE POSITION OF THE
!     GIVEN ELEMENT OF INTEREST IN THE ORIGINAL X VECTOR.
!     THE CODE IS LENGTHENED FROM THIS BASIC ALGORITHM
!     BY A SECTION WHICH CUTS DOWN THE SEARCH IN THE XS VECTOR,
!     AND BY A SECTION WHICH OBVIATES (UNDER CERTAIN CIRCUMSTANCES)
!     THE NEED FOR RECALCULATING THE RANK OF AN ELEMENT IN XS.
!
         nm1 = N - 1
         xprev = X(1)
         DO i = 1 , N
            jmin = 1
            IF ( X(i)>xprev ) THEN
               jmin = k
               IF ( jmin>=N ) THEN
                  IF ( jmin==N ) GOTO 60
                  ibran = 1
                  WRITE (G_IO,99007) ibran
                  WRITE (G_IO,99005) jmin
99005             FORMAT (' ','JMIN = ',I8)
                  STOP
               ENDIF
            ELSEIF ( i/=1 ) THEN
               IF ( X(i)==xprev ) THEN
                  Xr(i) = rprev
                  GOTO 80
               ENDIF
            ENDIF
            DO j = jmin , nm1
               IF ( X(i)==XS(j) ) THEN
                  jp1 = j + 1
                  DO k = jp1 , N
                     IF ( XS(k)/=XS(j) ) GOTO 55
                  ENDDO
                  k = N + 1
 55               avrank = j + k - 1
                  avrank = avrank/2.0_wp
                  Xr(i) = avrank
                  GOTO 80
               ENDIF
            ENDDO
 60         j = N
            k = N + 1
            IF ( X(i)==XS(j) ) THEN
               Xr(i) = N
            ELSE
               ibran = 2
               WRITE (G_IO,99007) ibran
               WRITE (G_IO,99006) X(i) , XS(j)
99006          FORMAT (' ','X(I) = ',F15.7,'   XS(J) = ',F15.7)
               STOP
            ENDIF
 80         xprev = X(i)
            rprev = Xr(i)
         ENDDO
      ENDIF
99007 FORMAT (' ','*****INTERNAL ERROR IN RANK SUBROUTINE--',           &
     &        'IMPOSSIBLE BRANCH CONDITION AT BRANCH POINT = ',I8)
!
END SUBROUTINE RANK
