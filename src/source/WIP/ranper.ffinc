$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file ranper.3m_datapac.man
NAME
   ranper(3f) - [M_datapac:RANDOM] generates a random permutation

SYNOPSIS
      SUBROUTINE RANPER(N,Istart,X)

DESCRIPTION
   RANPER(3f) generates a random permutation of size N of the values 1.0,
   2.0, 3.0, ..., N-1, N.

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program demo_ranper
   use M_datapac, only : ranper
   implicit none
   ! call ranper(x,y)
   end program demo_ranper

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the
   Statistical Engineering Division, National Institute of Standards
   and Technology.

MAINTAINER
   John Urban, 2022.05.31

LICENSE
   CC0-1.0

$ENDBLOCK
!     ORIGINAL VERSION--JUNE      1972.
!     UPDATED         --MAY       1974.
!     UPDATED         --SEPTEMBER 1975.
!     UPDATED         --NOVEMBER  1975.
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
! processed by SPAG 7.51RB at 12:54 on 18 Mar 2022

SUBROUTINE RANPER(N,Istart,X)
REAL(kind=wp) :: add , an , hold , u , X
INTEGER :: i , iadd , Istart , j , N
INTEGER :: iseed
!
!     INPUT ARGUMENTS--N      = THE DESIRED INTEGER SIZE
!                                OF THE RANDOM 1 TO N PERMUTATION.
!                     --ISTART = AN INTEGER FLAG CODE WHICH
!                                (IF SET TO 0) WILL START THE
!                                GENERATOR OVER AND HENCE
!                                PRODUCE THE SAME RANDOM PERMUTATION
!                                OVER AND OVER AGAIN
!                                UPON SUCCESSIVE CALLS TO
!                                THIS SUBROUTINE WITHIN A RUN; OR
!                                (IF SET TO SOME INTEGER
!                                VALUE NOT EQUAL TO 0,
!                                LIKE, SAY, 1) WILL ALLOW
!                                THE GENERATOR TO CONTINUE
!                                FROM WHERE IT STOPPED
!                                AND HENCE PRODUCE DIFFERENT
!                                RANDOM PERMUTATIONS UPON
!                                SUCCESSIVE CALLS TO
!                                THIS SUBROUTINE WITHIN A RUN.
!     OUTPUT ARGUMENTS--X      = A  VECTOR
!                                (OF DIMENSION AT LEAST N)
!                                INTO WHICH THE GENERATED
!                                RANDOM PERMUTATION WILL BE PLACED.
!     OUTPUT--A RANDOM PERMUTATION OF SIZE N
!             OF THE VALUES 1.0, 2.0, 3.0, ..., N-1, N.

!     COMMENT--ALGORITHM SUGGESTED BY DAN LOZIER,
!              NATIONAL BUREAU OF STANDARDS (205.01).
!
!---------------------------------------------------------------------
!
      DIMENSION X(:)
      DIMENSION u(1)
!
      an = N
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
   IF ( N<1 ) THEN
      WRITE (G_IO,99001)
      99001 FORMAT (' ***** FATAL ERROR--The first input argument to RANPER(3f) is non-positive *****')
      WRITE (G_IO,99002) N
      99002 FORMAT (' ***** The value of the argument is ',I0,' *****')
      RETURN
   ELSEIF ( N==1 ) THEN
      WRITE (G_IO,99003)
      99003 FORMAT (' ***** NON-FATAL DIAGNOSTIC--The first input argument to RANPER(3f) has the value 1 *****')
      X(1) = 1
      RETURN
   ELSE
      CALL UNIRAN(1,Istart,u)

      DO i = 1 , N
         X(i) = i
      ENDDO
      Iseed=1
      DO i = 1 , N
         CALL UNIRAN(1,iseed,u)
         add = an*u(1) + 1.0_wp
         iadd = add
         IF ( iadd<1 ) iadd = 1
         IF ( iadd>N ) iadd = N
         j = i + iadd
         IF ( j>N ) j = j - N
         hold = X(j)
         X(j) = X(i)
         X(i) = hold
      ENDDO
   ENDIF

END SUBROUTINE RANPER
