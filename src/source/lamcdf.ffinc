$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file lamcdf.3m_datapac.man
NAME
   lamcdf(3f) - [M_datapac:STATISTICS] compute the Tukey-Lambda cumulative
   distribution function

SYNOPSIS
    Subroutine lamcdf (X, Y)

     ${TYPE} (kind=${KIND}), Intent (InOut) :: X(:)
     Real, Intent (In)                      :: Y

   Where ${TYPE}(kind=${KIND}) may be

      o Real(kind=real32)
      o Real(kind=real64)
      o Integer(kind=int32)
      o Character(kind=selected_char_kind("DEFAULT"),len=*)

DESCRIPTION
  Description

OPTIONS
    X   description of parameter
    Y   description of parameter

EXAMPLES
  Sample program:

   program demo_lamcdf
   ! generate a random perturbation of an array
   use M_datapac, only : lamcdf
   implicit none
   character(len=*),parameter :: g='(*(g0,1x))'
   call lamcdf(x,y)
   end program demo_lamcdf

  Results:

AUTHOR
   The original DATAPAC library was written by James Filliben of the Statistical
   Engineering Division, National Institute of Standards and Technology.
MAINTAINER
   John Urban, 2022.05.31
LICENSE
   CC0-1.0
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!*==lamcdf.f90  processed by SPAG 7.51RB at 12:54 on 18 Mar 2022
      SUBROUTINE LAMCDF(X,Alamba,Cdf)
      IMPLICIT NONE
!*--LAMCDF10507
!*** Start of declarations inserted by SPAG
      REAL Alamba , Cdf , pdel , plower , pmax , pmid , pmin , pupper , &
     &     X , xcalc , xmax , xmin
      INTEGER icount , ipr
!*** End of declarations inserted by SPAG
!CCCC FOLLOWING LINE ADDED TO MAKE THIS A DLL.
!      DLL_EXPORT LAMCDF
!
!     PURPOSE--THIS SUBROUTINE COMPUTES THE CUMULATIVE DISTRIBUTION
!              FUNCTION VALUE FOR THE (TUKEY) LAMBDA DISTRIBUTION
!              WITH TAIL LENGTH PARAMETER VALUE = ALAMBA.
!              IN GENERAL, THE PROBABILITY DENSITY FUNCTION
!              FOR THIS DISTRIBUTION IS NOT SIMPLE.
!              THE PERCENT POINT FUNCTION FOR THIS DISTRIBUTION IS
!              G(P) = ((P**ALAMBA)-((1-P)**ALAMBA))/ALAMBA
!     INPUT  ARGUMENTS--X      = THE SINGLE PRECISION VALUE AT
!                                WHICH THE CUMULATIVE DISTRIBUTION
!                                FUNCTION IS TO BE EVALUATED.
!                     --ALAMBA = THE SINGLE PRECISION VALUE OF LAMBDA
!                                (THE TAIL LENGTH PARAMETER).
!     OUTPUT ARGUMENTS--CDF    = THE SINGLE PRECISION CUMULATIVE
!                                DISTRIBUTION FUNCTION VALUE.
!     OUTPUT--THE SINGLE PRECISION CUMULATIVE DISTRIBUTION
!             FUNCTION VALUE CDF FOR THE TUKEY LAMBDA DISTRIBUTION
!             WITH TAIL LENGTH PARAMETER = ALAMBA.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--FOR ALAMBA NON-POSITIVE, NO RESTRICTIONS ON X.
!                 --FOR ALAMBA POSITIVE, X SHOULD BE BETWEEN (-1/ALAMBA)
!                   AND (+1/ALAMBA), INCLUSIVELY.
!     OTHER DATAPAC   SUBROUTINES NEEDED--NONE.
!     FORTRAN LIBRARY SUBROUTINES NEEDED--NONE.
!     MODE OF INTERNAL OPERATIONS--SINGLE PRECISION.
!     LANGUAGE--ANSI FORTRAN.
!     REFERENCES--HASTINGS, MOSTELLER, TUKEY, AND WINDSOR,
!                 'LOW MOMENTS FOR SMALL SAMPLES:  A COMPARATIVE
!                 STUDY OF ORDER STATISTICS', ANNALS OF
!                 MATHEMATICAL STATISTICS, 18, 1947,
!                 PAGES 413-426.
!               --FILLIBEN, SIMPLE AND ROBUST LINEAR ESTIMATION
!                 OF THE LOCATION PARAMETER OF A SYMMETRIC
!                 DISTRIBUTION (UNPUBLISHED PH.D. DISSERTATION,
!                 PRINCETON UNIVERSITY), 1969, PAGES 42-44, 53-58.
!     WRITTEN BY--JAMES J. FILLIBEN
!                 STATISTICAL ENGINEERING LABORATORY (205.03)
!                 NATIONAL BUREAU OF STANDARDS
!                 WASHINGTON, D. C. 20234
!                 PHONE:  301-921-2315
!     ORIGINAL VERSION--JUNE      1972.
!     UPDATED         --MAY       1974.
!     UPDATED         --SEPTEMBER 1975.
!     UPDATED         --NOVEMBER  1975.
!
!---------------------------------------------------------------------
!
      ipr = 6
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      IF ( Alamba>0.0 ) THEN
         xmax = 1.0/Alamba
         xmin = -xmax
         IF ( X<xmin .OR. X>xmax ) THEN
            WRITE (ipr,99001)
99001       FORMAT (' ',                                                &
     &'***** NON-FATAL DIAGNOSTIC--THE FIRST INPUT ARGUMENT TO THE LAMCD&
     &F SUBROUTINE IS OUTSIDE THE USUAL +-(1/ALAMBA) INTERVAL *****')
            WRITE (ipr,99002) X
99002       FORMAT (' ','***** THE VALUE OF THE ARGUMENT IS ',E15.8,    &
     &              ' *****')
            IF ( X<xmin ) Cdf = 0.0
            IF ( X>xmax ) Cdf = 1.0
            RETURN
         ENDIF
      ENDIF
!
!-----START POINT-----------------------------------------------------
!
      IF ( Alamba>0.0 ) THEN
!
         xmax = 1.0/Alamba
         xmin = -xmax
         IF ( X<=xmin ) Cdf = 0.0
         IF ( X>=xmax ) Cdf = 1.0
         IF ( X<=xmin .OR. X>=xmax ) RETURN
      ENDIF
!
      IF ( -0.001>=Alamba .OR. Alamba>=0.001 ) THEN
!
         IF ( -0.001>=Alamba .OR. Alamba>=0.001 ) THEN
            pmin = 0.0
            pmid = 0.5
            pmax = 1.0
            plower = pmin
            pupper = pmax
            icount = 0
            DO
               xcalc = (pmid**Alamba-(1.0-pmid)**Alamba)/Alamba
               IF ( xcalc==X ) THEN
                  Cdf = pmid
                  GOTO 99999
               ELSE
                  IF ( xcalc>X ) THEN
                     pupper = pmid
                     pmid = (pmid+plower)/2.0
                  ELSE
                     plower = pmid
                     pmid = (pmid+pupper)/2.0
                  ENDIF
                  pdel = ABS(pmid-plower)
                  icount = icount + 1
                  IF ( pdel<0.000001 .OR. icount>30 ) THEN
                     Cdf = pmid
                     GOTO 99999
                  ENDIF
               ENDIF
            ENDDO
         ENDIF
      ENDIF
      IF ( X>=0.0 ) THEN
         Cdf = 1.0/(1.0+EXP(-X))
         RETURN
      ELSE
         Cdf = EXP(X)/(1.0+EXP(X))
         RETURN
      ENDIF
!
99999 END SUBROUTINE LAMCDF
